<?xml version="1.0"?>
<QuickForm xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" id="c106417c-5cb7-4022-ab61-d4977ae9122a" DefinitionType="Sage.Platform.QuickForms.QuickFormMainDetailViewDefinition, Sage.Platform.QuickForms">
  <ActiveControl />
  <ImagePath />
  <LoadActions>
    <FormActionDefinition>
      <ResourceKey>6d8f9061-ee2a-4a08-a585-09f80b859f79</ResourceKey>
      <Action typeName="Sage.Platform.QuickForms.ActionItems.CSharpSnippetActionItem, Sage.Platform.QuickForms">
        <CSharpSnippetActionItem>
          <MethodName />
          <CSharpCodeSnippet>Sage.Entity.Interfaces.ITicket tkt = this.GetParentEntity() as Sage.Entity.Interfaces.ITicket;
txtTotalQuantity.Text = "0";
txtUserQuantity.Text = "0";
if (EntityContext.EntityID.ToString().ToUpper().Equals("INSERT") == true)
{
    
	
	string qry = "Select CONTRACTPRODUCTITEMID From CONTRACTPRODUCTITEM where CONTRACTID = '" + tkt.Contract.Id + "' AND CONTRACTPRODUCTITEMID NOT IN (Select CONTRACTPRODUCTITEMID From TicketProduct where TicketID='" +tkt.Id + "')";

	string sId1 = "'";
	Sage.Platform.Data.IDataService service1 = Sage.Platform.Application.ApplicationContext.Current.Services.Get&lt;Sage.Platform.Data.IDataService&gt;();
	System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service1.GetConnectionString());
	System.Data.OleDb.OleDbDataAdapter dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
	System.Data.DataTable dt = new System.Data.DataTable();
	dataAdapterObj.Fill(dt);
	foreach (System.Data.DataRow dr in dt.Rows)
	{
		sId1 = sId1 + dr["CONTRACTPRODUCTITEMID"].ToString() + "','";
	}
	if(sId1.Length &gt; 1)
	{
		sId1 = sId1.Remove(sId1.Length - 2, 2);
	}
	else
	{
		sId1 = "''";
	}
	//string Accmgr = "xxx' AND Id in (" + sId1 + ") AND 'A' != 'B";
	
	string Accmgr = "Id in (" + sId1 + ") and Contract.Id";

	
	lkpProduct.SeedProperty = Accmgr;//"Contract.Id";
    lkpProduct.SeedValue = tkt.Contract.Id.ToString();
    lkpProduct.InitializeLookup = true;
	lkpProduct.Enabled = true;
}
else
{
	
	Sage.Entity.Interfaces.ITicketProduct objprod = this.BindingSource.Current as Sage.Entity.Interfaces.ITicketProduct;

	txtTotalQuantity.Text= objprod.ContractProductItem.Quantity.ToString();
	foreach(Sage.Entity.Interfaces.ITicket ticket in tkt.Contract.Tickets)
	{
		foreach(Sage.Entity.Interfaces.ITicketProduct tktp in ticket.TicketProducts)
		{
			if(tktp.ContractProductItem.Id == objprod.ContractProductItem.Id)
			{
				txtUserQuantity.Text = Convert.ToString(Convert.ToInt32(txtUserQuantity.Text) + Convert.ToInt32(tktp.Quantity));
			}
		}
	}
	txtUserQuantity.Text = Convert.ToString(Convert.ToInt32(txtUserQuantity.Text) - Convert.ToInt32(objprod.Quantity));
	lkpProduct.Enabled = false;
}</CSharpCodeSnippet>
        </CSharpSnippetActionItem>
      </Action>
      <IsDialogCloseAction>False</IsDialogCloseAction>
      <RunOnEveryRePaint>False</RunOnEveryRePaint>
      <DialogActionResult>NoResult</DialogActionResult>
      <PerformsUpdate>False</PerformsUpdate>
      <AppliedSecurity />
      <RefreshData>False</RefreshData>
    </FormActionDefinition>
  </LoadActions>
  <Name>AddEditProduct</Name>
  <ClientScriptIncludes />
  <ClientResourceKeys />
  <ExtendedProperties />
  <HelpFile />
  <ReadOnly>false</ReadOnly>
  <GeneratePrintView>false</GeneratePrintView>
  <Controls>
    <Control typeName="Sage.SalesLogix.QuickForms.QFControls.QFSLXLookup, Sage.SalesLogix.QuickForms.QFControls">
      <QFSLXLookup>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>lkpProduct</ControlId>
        <DataBindings>
          <QuickFormPropertyDataBindingDefinition>
            <DataSourceID>MainEntity</DataSourceID>
            <DataItemName>ContractProductItem</DataItemName>
            <ControlItemName>LookupResultValue</ControlItemName>
            <FormatString />
            <NullValueString />
          </QuickFormPropertyDataBindingDefinition>
          <QuickFormPropertyDataBindingDefinition>
            <DataSourceID>MainEntity</DataSourceID>
            <DataItemName>Product</DataItemName>
            <ControlItemName>Text</ControlItemName>
            <FormatString />
            <NullValueString />
          </QuickFormPropertyDataBindingDefinition>
        </DataBindings>
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <OnChangeAction>
          <ResourceKey>lkpProduct</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.CSharpSnippetActionItem, Sage.Platform.QuickForms">
            <CSharpSnippetActionItem>
              <MethodName>lkpProduct_ChangeAction</MethodName>
              <CSharpCodeSnippet>Sage.Entity.Interfaces.ITicket tkt = this.GetParentEntity() as Sage.Entity.Interfaces.ITicket;
Sage.Entity.Interfaces.ITicketProduct objprod = this.BindingSource.Current as Sage.Entity.Interfaces.ITicketProduct;

txtTotalQuantity.Text= objprod.ContractProductItem.Quantity.ToString();
foreach(Sage.Entity.Interfaces.ITicket ticket in tkt.Contract.Tickets)
{
	foreach(Sage.Entity.Interfaces.ITicketProduct tktp in ticket.TicketProducts)
	{
		if(tktp.ContractProductItem.Id == objprod.ContractProductItem.Id)
		{
			txtUserQuantity.Text = Convert.ToString(Convert.ToInt32(txtUserQuantity.Text) + Convert.ToInt32(tktp.Quantity));
		}
	}
}</CSharpCodeSnippet>
            </CSharpSnippetActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>False</RefreshData>
        </OnChangeAction>
        <Required>false</Required>
        <LookupImage />
        <LookupDialogWidth xsi:nil="true" />
        <LookupDialogHeight xsi:nil="true" />
        <LookupBindingMode>String</LookupBindingMode>
        <LookupResultValue xsi:type="xsd:string" />
        <SeedProperty />
        <SeedValue />
        <DropDownDisplayProperty />
        <AllowClearingResult>false</AllowClearingResult>
        <AppendStringValues>false</AppendStringValues>
        <OverrideSeedOnSearch>false</OverrideSeedOnSearch>
        <LookupEntityName>ContractProductItem</LookupEntityName>
        <LookupEntityTypeName>Sage.Entity.Interfaces.IContractProductItem, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null</LookupEntityTypeName>
        <AutoPostBack>false</AutoPostBack>
        <EnableHyperLinking>false</EnableHyperLinking>
        <InitializeLookup>false</InitializeLookup>
        <LookupProperties>
          <LookupProperty>
            <PropertyName>Family</PropertyName>
            <PropertyType>System.String</PropertyType>
            <PropertyHeader>Family</PropertyHeader>
            <PropertyFormat>None</PropertyFormat>
            <PropertyFormatString />
            <UseAsResult>true</UseAsResult>
            <ExcludeFromFilters>false</ExcludeFromFilters>
            <IsSortable>true</IsSortable>
            <HideCondition />
          </LookupProperty>
          <LookupProperty>
            <PropertyName>Product</PropertyName>
            <PropertyType>System.String</PropertyType>
            <PropertyHeader>Product</PropertyHeader>
            <PropertyFormat>None</PropertyFormat>
            <PropertyFormatString />
            <UseAsResult>true</UseAsResult>
            <ExcludeFromFilters>false</ExcludeFromFilters>
            <IsSortable>true</IsSortable>
            <HideCondition />
          </LookupProperty>
          <LookupProperty>
            <PropertyName>Program</PropertyName>
            <PropertyType>System.String</PropertyType>
            <PropertyHeader>Program</PropertyHeader>
            <PropertyFormat>None</PropertyFormat>
            <PropertyFormatString />
            <UseAsResult>true</UseAsResult>
            <ExcludeFromFilters>false</ExcludeFromFilters>
            <IsSortable>true</IsSortable>
            <HideCondition />
          </LookupProperty>
          <LookupProperty>
            <PropertyName>Quantity</PropertyName>
            <PropertyType>System.Int32</PropertyType>
            <PropertyHeader>Quantity</PropertyHeader>
            <PropertyFormat>None</PropertyFormat>
            <PropertyFormatString />
            <UseAsResult>true</UseAsResult>
            <ExcludeFromFilters>false</ExcludeFromFilters>
            <IsSortable>true</IsSortable>
            <HideCondition />
          </LookupProperty>
        </LookupProperties>
        <LookupPreFilters />
      </QFSLXLookup>
    </Control>
    <Control typeName="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls">
      <QFSLXNumeric>
        <Column>0</Column>
        <Row>1</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>txtQuantity</ControlId>
        <DataBindings>
          <QuickFormPropertyDataBindingDefinition>
            <DataSourceID>MainEntity</DataSourceID>
            <DataItemName>Quantity</DataItemName>
            <ControlItemName>Text</ControlItemName>
            <FormatString />
            <NullValueString />
          </QuickFormPropertyDataBindingDefinition>
        </DataBindings>
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <OnChangeAction>
          <ResourceKey>txtQuantity</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.NoActionActionItem, Sage.Platform.QuickForms">
            <NoActionActionItem>
              <MethodName />
            </NoActionActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>False</RefreshData>
        </OnChangeAction>
        <Required>true</Required>
        <DecimalDigits>
          <Strict>false</Strict>
        </DecimalDigits>
        <FormatType>Number</FormatType>
      </QFSLXNumeric>
    </Control>
    <Control typeName="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls">
      <QFSLXNumeric>
        <Column>1</Column>
        <Row>0</Row>
        <IsReadOnly>true</IsReadOnly>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>txtTotalQuantity</ControlId>
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <OnChangeAction>
          <ResourceKey>txtTotalQuantity</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.NoActionActionItem, Sage.Platform.QuickForms">
            <NoActionActionItem>
              <MethodName />
            </NoActionActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>False</RefreshData>
        </OnChangeAction>
        <Required>false</Required>
        <DecimalDigits>
          <Strict>false</Strict>
        </DecimalDigits>
        <FormatType>Number</FormatType>
      </QFSLXNumeric>
    </Control>
    <Control typeName="Sage.SalesLogix.QuickForms.QFControls.QFSLXNumeric, Sage.SalesLogix.QuickForms.QFControls">
      <QFSLXNumeric>
        <Column>1</Column>
        <Row>1</Row>
        <IsReadOnly>true</IsReadOnly>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>txtUserQuantity</ControlId>
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <OnChangeAction>
          <ResourceKey>txtUserQuantity</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.NoActionActionItem, Sage.Platform.QuickForms">
            <NoActionActionItem>
              <MethodName />
            </NoActionActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>False</RefreshData>
        </OnChangeAction>
        <Required>false</Required>
        <DecimalDigits>
          <Strict>false</Strict>
        </DecimalDigits>
        <FormatType>Number</FormatType>
      </QFSLXNumeric>
    </Control>
  </Controls>
  <ToolControls>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFElementSpacer, Sage.Platform.QuickForms">
      <QFElementSpacer>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId />
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
      </QFElementSpacer>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFElementSpacer, Sage.Platform.QuickForms">
      <QFElementSpacer>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId />
        <DataBindings />
        <ControlLabelPlacement>left</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
      </QFElementSpacer>
    </Control>
    <Control typeName="Sage.Platform.QuickForms.Controls.QFButton, Sage.Platform.QuickForms">
      <QFButton>
        <Column>0</Column>
        <Row>0</Row>
        <HotKey>0</HotKey>
        <TabIndex>0</TabIndex>
        <ControlId>cmdSave</ControlId>
        <DataBindings />
        <ControlLabelPlacement>none</ControlLabelPlacement>
        <ExtendedProperties />
        <CaptionAlignment>left</CaptionAlignment>
        <StyleScheme />
        <ButtonType>Icon</ButtonType>
        <Image>[Localization!Global_Images:Save_16x16]</Image>
        <OnClientClick />
        <OnClickAction>
          <ResourceKey>cmdSave</ResourceKey>
          <Action typeName="Sage.Platform.QuickForms.ActionItems.CSharpSnippetActionItem, Sage.Platform.QuickForms">
            <CSharpSnippetActionItem>
              <MethodName />
              <CSharpCodeSnippet>Sage.Entity.Interfaces.ITicket ticket = this.GetParentEntity() as Sage.Entity.Interfaces.ITicket;
Sage.Entity.Interfaces.ITicketProduct ticketproduct = BindingSource.Current as Sage.Entity.Interfaces.ITicketProduct;
if (Convert.ToInt32(ticketproduct.Quantity) &lt;= 0)
{
	throw new Sage.Platform.Application.ValidationException("Enter Quantity of selected product...");
}
if (EntityContext.EntityID.ToString().ToUpper().Equals("INSERT") == true)
{
	if (ticket.TicketProducts.Count &gt; 0)
	{
	    foreach (Sage.Entity.Interfaces.ITicketProduct tktproduct in ticket.TicketProducts)
	    {
	        if (tktproduct.ContractProductItem.Id == ticketproduct.ContractProductItem.Id)
	        {
	            throw new Sage.Platform.Application.ValidationException("product already Exist...");
	        }
	    }
	}
}
if(Convert.ToInt32(txtQuantity.Text) &gt; (Convert.ToInt32(txtTotalQuantity.Text)-Convert.ToInt32(txtUserQuantity.Text)))
{
	throw new Sage.Platform.Application.ValidationException("Quantity exeeded the limit ...");
}
/*
//if (EntityContext.EntityID.ToString().ToUpper().Equals("INSERT") == true)
//{


Sage.Platform.Data.IDataService service = Sage.Platform.Application.ApplicationContext.Current.Services.Get&lt;Sage.Platform.Data.IDataService&gt;();
System.Data.OleDb.OleDbConnection conObj1 = new System.Data.OleDb.OleDbConnection(service.GetConnectionString());
conObj1.Open();
string query1 = "Select isnull(SUM(isnull(TP.Quantity,0)),0) Qty From TICKETPRODUCT TP " +                       
                "where TP.ContractProductItemID	= '" + ticketproduct.ContractProductItem.Id + "'";

System.Data.OleDb.OleDbCommand cmd = new System.Data.OleDb.OleDbCommand(query1, conObj1);
System.Data.OleDb.OleDbDataAdapter da = new System.Data.OleDb.OleDbDataAdapter(cmd);
System.Data.DataSet ds = new System.Data.DataSet();
da.Fill(ds);

//dr = cmd.ExecuteReader();
if (ds.Tables[0].Rows.Count &gt; 0)
{
    
    if (Convert.ToInt32(ds.Tables[0].Rows[0][0]) + Convert.ToInt32(ticketproduct.Quantity) &gt; Convert.ToInt32(ticketproduct.ContractProductItem.Quantity))
    {
		Int32 exqty = (Convert.ToInt32(ds.Tables[0].Rows[0][0])+Convert.ToInt32(ticketproduct.Quantity)) - Convert.ToInt32(ticketproduct.ContractProductItem.Quantity);
        throw new ApplicationException("Quantity is exeeded the limit with " + exqty.ToString());
    }
}
ticketproduct.TicketId = ticket.Id.ToString();
ticketproduct.ProductID = ticketproduct.ContractProductItem.ProductId.ToString();
//ticketproduct.Description = ticketproduct.ContractProductItem.Product.ToString(); 
//  }*/
ticketproduct.TicketId = ticket.Id.ToString();
ticketproduct.ProductID = string.IsNullOrEmpty(ticketproduct.ContractProductItem.ProductId) ? "" : ticketproduct.ContractProductItem.ProductId.ToString();
ticketproduct.Description = string.IsNullOrEmpty(ticketproduct.ContractProductItem.Description) ? "" : ticketproduct.ContractProductItem.Description.ToString();
ticketproduct.PoNumber= string.IsNullOrEmpty(ticketproduct.ContractProductItem.POItemNo) ? "" : ticketproduct.ContractProductItem.POItemNo.ToString();

ticketproduct.Save();

System.Web.HttpContext.Current.Response.Redirect(string.Format("~/{0}.aspx?entityId={1}", "Ticket", ticketproduct.TicketId.ToString()));</CSharpCodeSnippet>
            </CSharpSnippetActionItem>
          </Action>
          <IsDialogCloseAction>False</IsDialogCloseAction>
          <RunOnEveryRePaint>False</RunOnEveryRePaint>
          <DialogActionResult>NoResult</DialogActionResult>
          <PerformsUpdate>False</PerformsUpdate>
          <AppliedSecurity />
          <RefreshData>False</RefreshData>
        </OnClickAction>
      </QFButton>
    </Control>
  </ToolControls>
  <Columns>
    <ColumnStyle>
      <SizeType>Percent</SizeType>
      <Width>50</Width>
    </ColumnStyle>
    <ColumnStyle>
      <SizeType>Percent</SizeType>
      <Width>50</Width>
    </ColumnStyle>
  </Columns>
  <Rows>
    <RowStyle>
      <SizeType>Absolute</SizeType>
      <Height>35</Height>
    </RowStyle>
    <RowStyle>
      <SizeType>Absolute</SizeType>
      <Height>35</Height>
    </RowStyle>
  </Rows>
  <Description />
  <UseEntityNameAsTitle>true</UseEntityNameAsTitle>
  <EntityTypeName>ITicketProduct</EntityTypeName>
  <DefaultNamespace>Sage.Entity.Interfaces</DefaultNamespace>
  <AssemblyName>Sage.Entity.Interfaces</AssemblyName>
</QuickForm>