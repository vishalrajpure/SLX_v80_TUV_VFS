<%@ Control Language="C#" ClassName="AddEditVisitReportInspector" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
   <div class=" lbl alignleft">
   <asp:Label ID="lkpSurveyor_lbl" AssociatedControlID="lkpSurveyor" runat="server" Text="<%$ resources: lkpSurveyor.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lkpSurveyor" LookupEntityName="Surveyor" LookupEntityTypeName="Sage.Entity.Interfaces.ISurveyor, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null"  >
<LookupProperties>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="AddEditVisitReportInspector_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="QFButton"
ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
   
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=AddEditVisitReportInspector&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkAddEditVisitReportInspectorHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="AddEditVisitReportInspector" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IVisitReportSurveyor); }
}

 

protected override void OnAddEntityBindings() {
                 // lkpSurveyor.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpSurveyorLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Surveyor", lkpSurveyor, "LookupResultValue");
        BindingSource.Bindings.Add(lkpSurveyorLookupResultValueBinding);
    
   
    }
       
protected void QFButton_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.IVisitReportSurveyor _entity = BindingSource.Current as Sage.Entity.Interfaces.IVisitReportSurveyor;
  if (_entity != null)
  {
    object _parent = GetParentEntity();
    if (DialogService.ChildInsertInfo != null)
    {
        if (_parent != null)
        {
            if (DialogService.ChildInsertInfo.ParentReferenceProperty != null)
            {
                DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
            }
        }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
    if (page != null)
    {
        if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
        {
            shouldSave = false;
        }
    }

    if(shouldSave)
    {
       _entity.Save();
    }

    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null)
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }
  }

  
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 QFButton.Click += new ImageClickEventHandler(QFButton_ClickAction);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.Entity.Interfaces.IVisitReport VRpt = this.GetParentEntity() as Sage.Entity.Interfaces.IVisitReport;
//Sage.Entity.Interfaces.IVisitReportItem VRI = BindingSource.Current as Sage.Entity.Interfaces.IVisitReportItem;

    
if(VRpt != null)
{
	string qry = "SELECT TS.SURVEYORID FROM TICKETSURVEYOR AS TS Where TS.TicketID = '"+VRpt.Ticket.Id+"' and TS.SurveyorID Not IN (Select SurveyorID From VISITREPORTSURVEYOR AS VRS Where VISITREPORTID = '"+VRpt.Id+"')";
	//filter Pincode Lookup 
	string sId1 = "'";
	Sage.Platform.Data.IDataService service1 = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
	System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service1.GetConnectionString());
	System.Data.OleDb.OleDbDataAdapter dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
	System.Data.DataTable dt = new System.Data.DataTable();
	dataAdapterObj.Fill(dt);
	if(dt.Rows.Count>0)
	{
		foreach (System.Data.DataRow dr in dt.Rows)
		{
		    sId1 = sId1 + dr["SURVEYORID"].ToString() + "','";
		}
		if (sId1.Length > 1)
		{
		    sId1 = sId1.Remove(sId1.Length - 2, 2);
		}
		else
		{
		    sId1 = "''";
		}
		string Accmgr = "xxx' AND Id in (" + sId1 + ") AND 'A' != 'B";

		//Filter BDS Lookup 
		Sage.SalesLogix.HighLevelTypes.LookupPreFilter actfilter6 = new Sage.SalesLogix.HighLevelTypes.LookupPreFilter();
		actfilter6.LookupEntityName = "Sage.Entity.Interfaces.ISurveyor";
		actfilter6.FilterValue = Accmgr;
		actfilter6.PropertyName = "Id";
		actfilter6.OperatorCode = " != ";
		actfilter6.PropertyType = "System.String";
		lkpSurveyor.LookupPreFilters.Clear();
		lkpSurveyor.LookupPreFilters.Add(actfilter6);
		lkpSurveyor.LookupResultValue = lkpSurveyor.LookupResultValue;
		lkpSurveyor.LookupExclusions = new string[] { string.Empty };
	}
}



}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ClientBindingMgr.RegisterSaveButton(QFButton);

if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new AddEditVisitReportInspectorAdapter(this)); }
}

public class AddEditVisitReportInspectorAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IAddEditVisitReportInspector
{
    public AddEditVisitReportInspectorAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.ILookupControl _lkpSurveyor;
    public  Sage.Platform.Controls.ILookupControl lkpSurveyor
    {
        get { return FindControl(ref _lkpSurveyor, "lkpSurveyor"); }
    }
    private Sage.Platform.Controls.IButtonControl _QFButton;
    public  Sage.Platform.Controls.IButtonControl QFButton
    {
        get { return FindControl(ref _QFButton, "QFButton"); }
    }

}

</script>

<script type="text/javascript">
</script>
