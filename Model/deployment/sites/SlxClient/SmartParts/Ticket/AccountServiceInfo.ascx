<%@ Control Language="C#" ClassName="AccountServiceInfo" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="50%" />
            <col width="50%" />
     <tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueAccountName_lbl" AssociatedControlID="lueAccountName" runat="server" Text="<%$ resources: lueAccountName.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lueAccountName" ButtonToolTip="<%$ resources: lueAccountName.ButtonToolTip %>" LookupEntityName="Account" LookupEntityTypeName="Sage.SalesLogix.Entities.Account, Sage.SalesLogix.Entities" AutoPostBack="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccountName.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccountName.LookupProperties.MainPhone.PropertyHeader %>" PropertyName="MainPhone" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccountName.LookupProperties.Type.PropertyHeader %>" PropertyName="Type" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccountName.LookupProperties.SubType.PropertyHeader %>" PropertyName="SubType" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccountName.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccountName.LookupProperties.AccountManager.UserInfo.UserName.PropertyHeader %>" PropertyName="AccountManager.UserInfo.UserName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccountName.LookupProperties.Owner.OwnerDescription.PropertyHeader %>" PropertyName="Owner.OwnerDescription" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtType_lbl" AssociatedControlID="txtType" runat="server" Text="<%$ resources: txtType.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtType" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtOpenTickets_lbl" AssociatedControlID="txtOpenTickets" runat="server" Text="<%$ resources: txtOpenTickets.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtOpenTickets" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtSubType_lbl" AssociatedControlID="txtSubType" runat="server" Text="<%$ resources: txtSubType.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtSubType" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtTotalTickets_lbl" AssociatedControlID="txtTotalTickets" runat="server" Text="<%$ resources: txtTotalTickets.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtTotalTickets" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtStatus_lbl" AssociatedControlID="txtStatus" runat="server" Text="<%$ resources: txtStatus.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtStatus" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  colspan="2" >
<div class="mainContentHeader2"><span id="hzsContacts" 	>
<asp:Localize runat="server" Text="<%$ resources: hzsContacts.Caption %>"   >Contacts</asp:Localize></span></div>


      </td>
            </tr>
<tr>
            <td  colspan="2" >
<SalesLogix:SlxGridView runat="server" ID="grdContacts" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="5" OnPageIndexChanging="grdContactspage_changing" EmptyTableRowText="<%$ resources: grdContacts.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdContacts_RowCommand"
 DataKeyNames="InstanceId,Id"
 AllowSorting="true" OnSorting="grdContacts_Sorting"  ShowSortIcon="true"  OnPreRender="grdContacts_PreRender" >
<Columns>
   <asp:BoundField DataField="NameLF"
      HeaderText="<%$ resources: grdContacts.5f88f5e6-28a5-4bc4-a330-f90772a91483.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="Address.City"
      HeaderText="<%$ resources: grdContacts.3a137d0f-7a8d-4084-8168-b33a40487bbe.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: grdContacts.1cc274d4-49c3-4d7a-b5f2-eaa3c23c7312.ColumnHeading %>"        >
    <itemtemplate>
   <SalesLogix:Phone runat="server" ID="grdContactscol3" DisplayAsLabel="True" Text='<%#  dtsContacts.getPropertyValue(Container.DataItem, "WorkPhone")  %>' CssClass=""  />
   </itemtemplate></asp:TemplateField>
    <asp:BoundField DataField="Email"
      HeaderText="<%$ resources: grdContacts.cfa52353-9749-46ad-a5cd-41777eb3a42e.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:CheckBoxField DataField="IsServiceAuthorized" ReadOnly="True"
      HeaderText="<%$ resources: grdContacts.f0a3c1d5-e55e-46d9-9949-7f23afbb7d12.ColumnHeading %>"        >
          </asp:CheckBoxField>
  <asp:CommandField ShowSelectButton="true"
  SelectText="<%$ resources: grdContacts.81d821ad-516f-449d-b1b2-e7423c884354.Text %>" ButtonType="link"
      HeaderText="<%$ resources: grdContacts.81d821ad-516f-449d-b1b2-e7423c884354.ColumnHeading %>"        >
          </asp:CommandField>
 </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">


protected void grdContactspage_changing(object sender, GridViewPageEventArgs e)
{
 grdContacts.PageIndex = e.NewPageIndex;
 grdContacts.DataBind();
}
protected void grdContacts_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdContacts_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dtsContacts.SelectedIndex = rowIndex;
        object currentEntity = dtsContacts.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
        string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
            if (grdContacts.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdContacts.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        ViewState["datakeyfield"] = val.Key;
                        Guid instanceId = (Guid)val.Value;
                        dtsContacts.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
                        currentEntity = dtsContacts.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdContacts.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                    ViewState["datakeyfield"] = val.Key;
                }
            }
        }
        ViewState["selectedid"] = id;
    }
    grdContacts_refresh();
}
protected void grdContacts_PreRender(object sender, EventArgs e)
{
    if (ViewState["selectedid"] != null)
    {
        dtsContacts.Bind();
    }
}


    protected void grdContacts_refresh()
    {
        if (PageWorkItem != null) {
            Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
            if (refresher != null)
            {
                refresher.RefreshAll();
            }
            else
            {
                Response.Redirect(Request.Url.ToString());
            }
        }
    }

        </script>

      </td>
            </tr>
<tr>
            <td  colspan="2" >
<div class="mainContentHeader2"><span id="hzsContracts" 	>
<asp:Localize runat="server" Text="<%$ resources: hzsContracts.Caption %>"   >Active Contracts</asp:Localize></span></div>


      </td>
            </tr>
<tr>
            <td  colspan="2" >
<SalesLogix:SlxGridView runat="server" ID="grdContracts" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="5" OnPageIndexChanging="grdContractspage_changing" EmptyTableRowText="<%$ resources: grdContracts.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdContracts_RowCommand"
 DataKeyNames="InstanceId,Id"
 AllowSorting="true" OnSorting="grdContracts_Sorting"  ShowSortIcon="true"  OnPreRender="grdContracts_PreRender" >
<Columns>
   <asp:CheckBoxField DataField="IsActive" ReadOnly="True"
      HeaderText="<%$ resources: grdContracts.3a453f57-f860-47a0-b719-a2c85501a65d.ColumnHeading %>"    itemstyle-horizontalalign="Center"     >
          </asp:CheckBoxField>
    <asp:TemplateField   HeaderText="<%$ resources: grdContracts.0651d84a-1b1d-4999-8089-cbe51d737704.ColumnHeading %>"        >
    <itemtemplate>
   <SalesLogix:PickListControl runat="server" ID="grdContractscol2" PickListId="kSYST0000332" ValueStoredAsText="False" PickListName="Contract Service Type" PickListValue='<%#  dtsContracts.getPropertyValue(Container.DataItem, "ServiceCode")  %>' DisplayMode="AsText" CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:TemplateField   HeaderText="<%$ resources: grdContracts.9778cc96-20d3-4c92-bfac-f51cbbeba6e7.ColumnHeading %>"        >
    <itemtemplate>
   <SalesLogix:PickListControl runat="server" ID="grdContractscol3" PickListId="kSYST0000333" ValueStoredAsText="False" PickListName="Contract Type" PickListValue='<%#  dtsContracts.getPropertyValue(Container.DataItem, "TypeCode")  %>' DisplayMode="AsText" CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:BoundField DataField="Remaining"
      HeaderText="<%$ resources: grdContracts.4b5a1ab4-2601-44d8-9172-2f0879d92bda.ColumnHeading %>"    itemstyle-horizontalalign="Center"       >
      </asp:BoundField>
    <asp:BoundField DataField="StartDate"
      HeaderText="<%$ resources: grdContracts.1c025128-ead7-43f4-812a-abe180f29c7f.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="EndingDate"
      HeaderText="<%$ resources: grdContracts.bfe5c785-395b-479e-9ef3-0ed44d98977e.ColumnHeading %>"          >
      </asp:BoundField>
  <asp:CommandField ShowSelectButton="true"
  SelectText="<%$ resources: grdContracts.541749df-5753-4b47-9223-d2a9fe9f6ab0.Text %>" ButtonType="link"
      HeaderText="<%$ resources: grdContracts.541749df-5753-4b47-9223-d2a9fe9f6ab0.ColumnHeading %>"        >
          </asp:CommandField>
 </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">


protected void grdContractspage_changing(object sender, GridViewPageEventArgs e)
{
 grdContracts.PageIndex = e.NewPageIndex;
 grdContracts.DataBind();
}
protected void grdContracts_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdContracts_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dtsContracts.SelectedIndex = rowIndex;
        object currentEntity = dtsContracts.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
        string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
            if (grdContracts.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdContracts.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        ViewState["datakeyfield"] = val.Key;
                        Guid instanceId = (Guid)val.Value;
                        dtsContracts.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
                        currentEntity = dtsContracts.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdContracts.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                    ViewState["datakeyfield"] = val.Key;
                }
            }
        }
        ViewState["selectedid"] = id;
    }
    grdContracts_refresh();
}
protected void grdContracts_PreRender(object sender, EventArgs e)
{
    if (ViewState["selectedid"] != null)
    {
        dtsContracts.Bind();
    }
}


    protected void grdContracts_refresh()
    {
        if (PageWorkItem != null) {
            Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
            if (refresher != null)
            {
                refresher.RefreshAll();
            }
            else
            {
                Response.Redirect(Request.Url.ToString());
            }
        }
    }

        </script>

      </td>
            </tr>
<tr>
            <td  colspan="2" >
 <div class="lbltop alignleft">
   <asp:Label ID="txtComments_lbl" AssociatedControlID="txtComments" runat="server" Text="<%$ resources: txtComments.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtComments" ReadOnly="true"  Rows="3" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea"  />
  </div>

      </td>
            </tr>
<tr>
            <td></td>
                <td  >
<asp:Panel runat="server" ID="ctrlstButtons" CssClass="controlslist qfActionContainer"
>
   <asp:Button runat="server" ID="cmdOK"
 Text="<%$ resources: cmdOK.Caption %>" CssClass="slxbutton"  />
 
   <asp:Button runat="server" ID="cmdCancel"
 Text="<%$ resources: cmdCancel.Caption %>" CssClass="slxbutton"  />
 
</asp:Panel>
      </td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="AccountServiceInfo_RTools" ToolbarLocation="right">
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=AccountServiceInfo&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkAccountServiceInfoHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="AccountServiceInfo" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.ITicket); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dtsContacts;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dtsContacts
{ 
  get 
  {
    if (_dtsContacts == null)
    {
             _dtsContacts = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IContact), 
	    EntityType              ,"Account.Contacts", System.Reflection.MemberTypes.Property);
            	   	}
 	return _dtsContacts;
  }
}

void dtsContacts_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dtsContacts.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dtsContacts);
   }
}

 



 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dtsContracts;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dtsContracts
{ 
  get 
  {
    if (_dtsContracts == null)
    {
             _dtsContracts = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IContract), 
	    EntityType              ,"Account.Contracts", System.Reflection.MemberTypes.Property);
            	   	}
 	return _dtsContracts;
  }
}

void dtsContracts_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dtsContracts.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dtsContracts);
   }
}

 



 

protected override void OnAddEntityBindings() {
                 // lueAccountName.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueAccountNameLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Account", lueAccountName, "LookupResultValue", "", null);
        BindingSource.Bindings.Add(lueAccountNameLookupResultValueBinding);
                    // txtType.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtTypeTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Account.Type", txtType, "Text");
        BindingSource.Bindings.Add(txtTypeTextBinding);
                       // txtSubType.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtSubTypeTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Account.SubType", txtSubType, "Text");
        BindingSource.Bindings.Add(txtSubTypeTextBinding);
                       // txtStatus.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtStatusTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Account.Status", txtStatus, "Text");
        BindingSource.Bindings.Add(txtStatusTextBinding);
             dtsContacts.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("Account.Contacts", grdContacts ));
   dtsContacts.BindFieldNames = new String[] { "Id","NameLF","Address.City","WorkPhone","Email","IsServiceAuthorized" };
                    // dtsContacts.SelectedMember Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtsContactsSelectedMemberBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Contact", dtsContacts, "SelectedMember");
        BindingSource.Bindings.Add(dtsContactsSelectedMemberBinding);
             dtsContracts.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("Account.Contracts", grdContracts ));
   dtsContracts.BindFieldNames = new String[] { "Id","IsActive","ServiceCode","TypeCode","Remaining","StartDate","EndingDate" };
                    // dtsContracts.SelectedMember Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtsContractsSelectedMemberBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Contract", dtsContracts, "SelectedMember");
        BindingSource.Bindings.Add(dtsContractsSelectedMemberBinding);
                    // txtComments.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtCommentsTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Contract.Notes", txtComments, "Text");
        BindingSource.Bindings.Add(txtCommentsTextBinding);
             
     BindingSource.OnCurrentEntitySet += new EventHandler(dtsContacts_OnCurrentEntitySet);
      BindingSource.OnCurrentEntitySet += new EventHandler(dtsContracts_OnCurrentEntitySet);
    
}
                                                                                                  
protected void lueAccountName_ChangeAction(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}
protected void cmdOK_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.ITicket ticket = BindingSource.Current as Sage.Entity.Interfaces.ITicket;
if (ticket != null)
{
    object currentEntity = dtsContacts.Current;
    if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
        currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
    ticket.Contact = currentEntity as Sage.Entity.Interfaces.IContact;
    currentEntity = dtsContracts.Current;
    if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
        currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
    ticket.Contract = currentEntity as Sage.Entity.Interfaces.IContract;
}

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lueAccountName.LookupResultValueChanged += new EventHandler(lueAccountName_ChangeAction);
cmdOK.Click += new EventHandler(cmdOK_ClickAction);
cmdCancel.Click += new EventHandler(DialogService.CloseEventHappened);


}

protected void quickformload0(object sender, EventArgs e) {
if (EntityContext != null && EntityContext.EntityType == typeof(Sage.Entity.Interfaces.ITicket))
{
    bool insertMode = EntityContext.EntityID.ToString().ToUpper().Equals("INSERT");
    lueAccountName.Enabled = insertMode;
    lueAccountName.EnableLookup = insertMode;
	grdContacts.Height = 225;
    grdContracts.Height = 200;
    cmdOK.Visible = insertMode;
	if (!insertMode)
    {
        cmdCancel.Text = GetLocalResourceObject("cmdCancel.CloseText").ToString();
    }
	
	Sage.Entity.Interfaces.ITicket ticket = EntityContext.GetEntity() as Sage.Entity.Interfaces.ITicket;
    if (ticket != null)
    {
        if (insertMode && ticket.IsAutoPunchInEnabled())
        {
            ticket.HoldPunchInTicketActivity();
        }

        if (ticket.Account != null)
        {
            var stats = ticket.Account.GetTicketStats() as Sage.Platform.ComponentModel.ComponentView;
            txtOpenTickets.Text = stats.GetProperties().Find("OpenTicketCount", true).GetValue(stats).ToString();
            txtTotalTickets.Text = stats.GetProperties().Find("TotalTicketCount", true).GetValue(stats).ToString();
        }
    }
}

}
protected override void OnFormBound()
{
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
if (dtsContacts.SourceObject == null) { dtsContacts.SourceObject = BindingSource.Current; }
if (dtsContacts.SourceObject == null) { RegisterBindingsWithClient(dtsContacts); }
dtsContacts.Bind();

if (dtsContracts.SourceObject == null) { dtsContracts.SourceObject = BindingSource.Current; }
if (dtsContracts.SourceObject == null) { RegisterBindingsWithClient(dtsContracts); }
dtsContracts.Bind();

ClientBindingMgr.RegisterDialogCancelButton(cmdCancel);
quickformload0(this, EventArgs.Empty);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

    tinfo.ImagePath = Page.ResolveClientUrl("~/ImageResource.axd?scope=global&type=Global_Images&key=Ticket_List_3D_32x32");    return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new AccountServiceInfoAdapter(this)); }
}

public class AccountServiceInfoAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IAccountServiceInfo
{
    public AccountServiceInfoAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.ILookupControl _lueAccountName;
    public  Sage.Platform.Controls.ILookupControl lueAccountName
    {
        get { return FindControl(ref _lueAccountName, "lueAccountName"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtOpenTickets;
    public  Sage.Platform.Controls.ITextBoxControl txtOpenTickets
    {
        get { return FindControl(ref _txtOpenTickets, "txtOpenTickets"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtTotalTickets;
    public  Sage.Platform.Controls.ITextBoxControl txtTotalTickets
    {
        get { return FindControl(ref _txtTotalTickets, "txtTotalTickets"); }
    }
    private Sage.Platform.Controls.IDataGridControl _grdContacts;
    public  Sage.Platform.Controls.IDataGridControl grdContacts
    {
        get { return FindControl(ref _grdContacts, "grdContacts"); }
    }
    private Sage.Platform.Controls.IDataGridControl _grdContracts;
    public  Sage.Platform.Controls.IDataGridControl grdContracts
    {
        get { return FindControl(ref _grdContracts, "grdContracts"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtComments;
    public  Sage.Platform.Controls.ITextBoxControl txtComments
    {
        get { return FindControl(ref _txtComments, "txtComments"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtType;
    public  Sage.Platform.Controls.ITextBoxControl txtType
    {
        get { return FindControl(ref _txtType, "txtType"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtSubType;
    public  Sage.Platform.Controls.ITextBoxControl txtSubType
    {
        get { return FindControl(ref _txtSubType, "txtSubType"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtStatus;
    public  Sage.Platform.Controls.ITextBoxControl txtStatus
    {
        get { return FindControl(ref _txtStatus, "txtStatus"); }
    }
    private Sage.Platform.Controls.IControlsListControl _ctrlstButtons;
    public  Sage.Platform.Controls.IControlsListControl ctrlstButtons
    {
        get { return FindControl(ref _ctrlstButtons, "ctrlstButtons"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdOK;
    public  Sage.Platform.Controls.IButtonControl cmdOK
    {
        get { return FindControl(ref _cmdOK, "cmdOK"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdCancel;
    public  Sage.Platform.Controls.IButtonControl cmdCancel
    {
        get { return FindControl(ref _cmdCancel, "cmdCancel"); }
    }
    private Sage.Platform.Controls.IDataSourceControl _dtsContacts;
    public  Sage.Platform.Controls.IDataSourceControl dtsContacts
    {
        get { return FindControl(ref _dtsContacts, "dtsContacts"); }
    }
    private Sage.Platform.Controls.IDataSourceControl _dtsContracts;
    public  Sage.Platform.Controls.IDataSourceControl dtsContracts
    {
        get { return FindControl(ref _dtsContracts, "dtsContracts"); }
    }

}

</script>

<script type="text/javascript">
</script>
