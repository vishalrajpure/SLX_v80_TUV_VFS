<%@ Control Language="C#" ClassName="QuotationDetail" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="50%" />
            <col width="50%" />
     <tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="QuotationNumber_lbl" AssociatedControlID="QuotationNumber" runat="server" Text="<%$ resources: QuotationNumber.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="QuotationNumber" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="QFTextBox_lbl" AssociatedControlID="QFTextBox" runat="server" Text="<%$ resources: QFTextBox.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="QFTextBox" LookupEntityName="Opportunity" LookupEntityTypeName="Sage.Entity.Interfaces.IOpportunity, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" EnableHyperLinking="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: QFTextBox.LookupProperties.Description.PropertyHeader %>" PropertyName="Description" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: QFTextBox.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: QFTextBox.LookupProperties.Type.PropertyHeader %>" PropertyName="Type" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="Quotation_lbl" AssociatedControlID="Quotation" runat="server" Text="<%$ resources: Quotation.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="Quotation"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpAccount_lbl" AssociatedControlID="lkpAccount" runat="server" Text="<%$ resources: lkpAccount.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lkpAccount" LookupEntityName="Account" LookupEntityTypeName="Sage.Entity.Interfaces.IAccount, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupBindingMode="String"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpAccount.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpAccount.LookupProperties.Division.PropertyHeader %>" PropertyName="Division" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpAccount.LookupProperties.Industry.PropertyHeader %>" PropertyName="Industry" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpAccountManager_lbl" AssociatedControlID="lkpAccountManager" runat="server" Text="<%$ resources: lkpAccountManager.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lkpAccountManager" LookupEntityName="UserInfo" LookupEntityTypeName="Sage.Entity.Interfaces.IUserInfo, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupBindingMode="String"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpAccountManager.LookupProperties.Division.PropertyHeader %>" PropertyName="Division" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpAccountManager.LookupProperties.Email.PropertyHeader %>" PropertyName="Email" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpAccountManager.LookupProperties.Mobile.PropertyHeader %>" PropertyName="Mobile" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpAccountManager.LookupProperties.UserName.PropertyHeader %>" PropertyName="UserName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpBranch_lbl" AssociatedControlID="lkpBranch" runat="server" Text="<%$ resources: lkpBranch.Caption %>" ></asp:Label>
 </div>   
  <div    >
<SalesLogix:LookupControl runat="server" ID="lkpBranch" ReadOnly="true" EnableLookup="false" LookupEntityName="Branch" LookupEntityTypeName="Sage.Entity.Interfaces.IBranch, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="DropDownList" LookupBindingMode="String" DropDownDisplayProperty="BranchName"  >
<LookupProperties>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpEndCustomer_lbl" AssociatedControlID="lkpEndCustomer" runat="server" Text="<%$ resources: lkpEndCustomer.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lkpEndCustomer" LookupEntityName="Account" LookupEntityTypeName="Sage.Entity.Interfaces.IAccount, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupBindingMode="String"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpEndCustomer.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpEndCustomer.LookupProperties.Description.PropertyHeader %>" PropertyName="Description" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpEndCustomer.LookupProperties.Division.PropertyHeader %>" PropertyName="Division" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpEndCustomer.LookupProperties.Industry.PropertyHeader %>" PropertyName="Industry" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklType_lbl" AssociatedControlID="pklType" runat="server" Text="<%$ resources: pklType.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklType" ReadOnly="true" PickListName="TypeProduct" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtInspectionStartDate_lbl" AssociatedControlID="dtInspectionStartDate" runat="server" Text="<%$ resources: dtInspectionStartDate.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtInspectionStartDate" DisplayTime="false" />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtInspectionEndDate_lbl" AssociatedControlID="dtInspectionEndDate" runat="server" Text="<%$ resources: dtInspectionEndDate.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtInspectionEndDate" DisplayTime="false" />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklFeeType_lbl" AssociatedControlID="pklFeeType" runat="server" Text="<%$ resources: pklFeeType.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklFeeType" PickListName="FeeType" MaxLength="64"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="CUSTOMERPROJECTNO_lbl" AssociatedControlID="CUSTOMERPROJECTNO" runat="server" Text="<%$ resources: CUSTOMERPROJECTNO.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="CUSTOMERPROJECTNO"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="REFERENCENO_lbl" AssociatedControlID="REFERENCENO" runat="server" Text="<%$ resources: REFERENCENO.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="REFERENCENO"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtEstimatedClose_lbl" AssociatedControlID="dtEstimatedClose" runat="server" Text="<%$ resources: dtEstimatedClose.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtEstimatedClose" DisplayTime="false" />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="pklCloseProbability_lbl" AssociatedControlID="pklCloseProbability" runat="server" Text="<%$ resources: pklCloseProbability.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="pklCloseProbability"  dojoType="Sage.UI.Controls.TextBox"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="QFSLXPickList1_lbl" AssociatedControlID="QFSLXPickList1" runat="server" Text="<%$ resources: QFSLXPickList1.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="QFSLXPickList1" PickListName="Opportunity Status" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
<div class="slxlabel  alignleft checkboxRight">

  <SalesLogix:SLXCheckBox runat="server" ID="chkAddToForecast"  Text="<%$ resources: chkAddToForecast.Caption %>"  CssClass=""
LabelPlacement="left"  />
</div>
      </td>
                <td  >
 <asp:ImageButton runat="server" ID="btnOrder"
 AlternateText="<%$ resources: btnOrder.Caption %>" Visible="false" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Sales_Order_32x32"  />
 
      </td>
      </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="Notes_lbl" AssociatedControlID="Notes" runat="server" Text="<%$ resources: Notes.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="Notes"  dojoType="Sage.UI.Controls.TextBox" MaxLength="2147483647"  />
  </div>

      </td>
            </tr>
<tr>
            <td></td>
                <td  >
 <asp:Button runat="server" ID="btnGenerateOrder"
 Text="<%$ resources: btnGenerateOrder.Caption %>"  />
 
      </td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="QuotationDetail_RTools" ToolbarLocation="right">
   <SalesLogix:GroupNavigator runat="server" ID="grpNavigator" ></SalesLogix:GroupNavigator>
    <asp:ImageButton runat="server" ID="btnSave"
ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
   
    <asp:ImageButton runat="server" ID="btnDelete"
ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Delete_16x16"  />
 
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=QuotationDetail&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkQuotationDetailHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="QuotationDetail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IQuotation); }
}

 

protected override void OnAddEntityBindings() {
                 // QuotationNumber.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding QuotationNumberTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("QuotationNumber", QuotationNumber, "Text");
        BindingSource.Bindings.Add(QuotationNumberTextBinding);
                    // QFTextBox.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding QFTextBoxLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Opportunity", QFTextBox, "LookupResultValue");
        BindingSource.Bindings.Add(QFTextBoxLookupResultValueBinding);
                    // Quotation.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding QuotationTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("DESCRIPTION", Quotation, "Text");
        BindingSource.Bindings.Add(QuotationTextBinding);
                    // lkpAccount.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpAccountLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ACCOUNTID", lkpAccount, "LookupResultValue");
        BindingSource.Bindings.Add(lkpAccountLookupResultValueBinding);
                    // lkpAccountManager.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpAccountManagerLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ACCOUNTMANAGERID", lkpAccountManager, "LookupResultValue");
        BindingSource.Bindings.Add(lkpAccountManagerLookupResultValueBinding);
                    // lkpBranch.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpBranchLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("BRANCHID", lkpBranch, "LookupResultValue");
        BindingSource.Bindings.Add(lkpBranchLookupResultValueBinding);
                    // lkpEndCustomer.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpEndCustomerLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ENDCUSTOMER", lkpEndCustomer, "LookupResultValue");
        BindingSource.Bindings.Add(lkpEndCustomerLookupResultValueBinding);
                    // pklType.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklTypePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("TYPE", pklType, "PickListValue");
        BindingSource.Bindings.Add(pklTypePickListValueBinding);
                    // dtInspectionStartDate.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtInspectionStartDateDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("INSPECTIONSTARTDATE", dtInspectionStartDate, "DateTimeValue");
        BindingSource.Bindings.Add(dtInspectionStartDateDateTimeValueBinding);
                    // dtInspectionEndDate.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtInspectionEndDateDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("INSPECTIONENDDATE", dtInspectionEndDate, "DateTimeValue");
        BindingSource.Bindings.Add(dtInspectionEndDateDateTimeValueBinding);
                    // pklFeeType.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklFeeTypePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("FEETYPE", pklFeeType, "PickListValue");
        BindingSource.Bindings.Add(pklFeeTypePickListValueBinding);
                    // CUSTOMERPROJECTNO.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding CUSTOMERPROJECTNOTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("CUSTOMERPROJECTNO", CUSTOMERPROJECTNO, "Text");
        BindingSource.Bindings.Add(CUSTOMERPROJECTNOTextBinding);
                    // REFERENCENO.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding REFERENCENOTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("REFERENCENO", REFERENCENO, "Text");
        BindingSource.Bindings.Add(REFERENCENOTextBinding);
                    // dtEstimatedClose.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtEstimatedCloseDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ESTIMATEDCLOSE", dtEstimatedClose, "DateTimeValue");
        BindingSource.Bindings.Add(dtEstimatedCloseDateTimeValueBinding);
                    // pklCloseProbability.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklCloseProbabilityTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("CLOSEPROBABILITY", pklCloseProbability, "Text");
        BindingSource.Bindings.Add(pklCloseProbabilityTextBinding);
                    // QFSLXPickList1.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding QFSLXPickList1PickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("STATUS", QFSLXPickList1, "PickListValue");
        BindingSource.Bindings.Add(QFSLXPickList1PickListValueBinding);
                    // chkAddToForecast.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkAddToForecastCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ADDTOFORECAST", chkAddToForecast, "Checked");
        BindingSource.Bindings.Add(chkAddToForecastCheckedBinding);
                       // Notes.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding NotesTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("NOTES", Notes, "Text");
        BindingSource.Bindings.Add(NotesTextBinding);
       
   
            }
                                                                                                                                            
protected void btnOrder_ClickAction(object sender, EventArgs e) {
Sage.Platform.WebPortal.EntityPage page = (Sage.Platform.WebPortal.EntityPage)Page;
    Sage.Entity.Interfaces.ISalesOrder objSalesOrder = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.ISalesOrder>();

    //Sage.Entity.Interfaces.ISalesOrderAddress objSalesOrderaddress = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.ISalesOrderAddress>();
    Sage.Platform.Data.IDataService service = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
    System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service.GetConnectionString());

    Sage.Entity.Interfaces.IQuotation _entity = BindingSource.Current as Sage.Entity.Interfaces.IQuotation;
    if (_entity != null)
    {
		
		  //  objSalesOrderaddress.AddressId  = objSalesOrder.Account.Address.Id.ToString();
         //   objSalesOrderaddress.Save();
		
        objSalesOrder.QuotationId = page.EntityContext.EntityID.ToString();
        Sage.Entity.Interfaces.IAccount Account = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IAccount>(_entity.ACCOUNTID);

        Sage.Entity.Interfaces.IOpportunity oppo = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOpportunity>(_entity.OPPORTUNITYID);
        objSalesOrder.Account = Account;
        objSalesOrder.Opportunity = oppo;
        objSalesOrder.IsQuote = false;
		objSalesOrder.Status = "Sales Order";
		objSalesOrder.CurrencyCode = "USD";
objSalesOrder.BranchId =Account.BranchId ;
      
      
		objSalesOrder.OrderType = "Regular Order";
		
        objSalesOrder.Save();
              
        
        
    
        
    }


}
protected void btnGenerateOrder_ClickAction(object sender, EventArgs e) {
 // Generate Order from Quotaion.

    Sage.Platform.WebPortal.EntityPage page = (Sage.Platform.WebPortal.EntityPage)Page;

    Sage.Entity.Interfaces.ISalesOrder objSalesOrder = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.ISalesOrder>();
    Sage.Platform.Data.IDataService service = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
    System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service.GetConnectionString());

    Sage.Entity.Interfaces.IQuotation _entity = BindingSource.Current as Sage.Entity.Interfaces.IQuotation;
    if (_entity != null)
    {
        try
        {


            objSalesOrder.QuotationId = page.EntityContext.EntityID.ToString();
            Sage.Entity.Interfaces.IAccount Account = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IAccount>(_entity.ACCOUNTID);

            Sage.Entity.Interfaces.IOpportunity oppo = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOpportunity>(_entity.OPPORTUNITYID);
            objSalesOrder.Account = Account;
            objSalesOrder.Opportunity = oppo;
            
            objSalesOrder.IsQuote = false;
            objSalesOrder.Status = "Sales Order";
            objSalesOrder.CurrencyCode = oppo.ExchangeRateCode ; // "USD";



           // objSalesOrder.OrderType = "Regular Order";
 
            if (!string.IsNullOrEmpty(_entity.TYPE))
            {
                objSalesOrder.OrderType = _entity.TYPE.ToString();
            }          


            if ((_entity.FEETYPE) != null)
            {
                objSalesOrder.FeeType  = _entity.FEETYPE.ToString();
            }
            if ((_entity.INSPECTIONSTARTDATE) != null)
            {
                objSalesOrder.ProposedStartDate = _entity.INSPECTIONSTARTDATE;
            }
            if ((_entity.INSPECTIONENDDATE ) != null)
            {
                objSalesOrder.ProposedEndDate  = _entity.INSPECTIONENDDATE ;
            }
            if ((_entity.BRANCHID) != null)
            {
                objSalesOrder.BranchId = _entity.BRANCHID.ToString();
            }
      
            if ((_entity.ACCOUNTMANAGERID ) != null)
            {

                Sage.Entity.Interfaces.IUser uf = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IUser>(_entity.ACCOUNTMANAGERID);
                objSalesOrder.AccountManager = uf;
                
            }
        
            objSalesOrder.ProjectType = "";   
            
           
            
            if ((_entity.EXCHANGERATE) != null)
            {
                objSalesOrder.ExchangeRate  = Convert.ToDouble (_entity.EXCHANGERATE);
            }

            //datesd

            if ((_entity.ACTUALCLOSE) != null)
            {
                objSalesOrder.DatePromised  = (_entity.ACTUALCLOSE );
            }
          

            if ((_entity.EXCHANGERATEDATE) != null)
            {
                objSalesOrder.ExchangeRateDate  = _entity.EXCHANGERATEDATE;
            }          

          
                    string tbranchid = "0";
            if ((_entity.BRANCHID) != null)
            {
                tbranchid = _entity.BRANCHID.ToString();
            }

            string tBranchcode = "";
            string tQuoteType = "";
            if (!string.IsNullOrEmpty(tbranchid))
            {
                string Query2 = " select Branchcode from branch where branchid='" + tbranchid + "'";
                System.Data.OleDb.OleDbDataAdapter dataAdapterObj2 = new System.Data.OleDb.OleDbDataAdapter(Query2, conObj);
                System.Data.DataTable dt2 = new System.Data.DataTable();

                dataAdapterObj2.Fill(dt2);
                if (dt2.Rows.Count > 0)
                {
                    tBranchcode = dt2.Rows[0][0].ToString();
                }
            }
            string Query = "select yearname,LASTNUMBERUSED  from  sysdba.codemaster where tablename='SalesOrder' and YEARname =YEAR(getdate()) ";

            System.Data.OleDb.OleDbDataAdapter dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(Query, conObj);
            System.Data.DataTable dt = new System.Data.DataTable();

            dataAdapterObj.Fill(dt);



            string tOrdercode = "";
            int tLastNumber = 0;
            if (!string.IsNullOrEmpty(_entity.TYPE))
            {
                tQuoteType = _entity.TYPE.ToString();
            }

            if (dt.Rows.Count > 0)
            {
                if (String.IsNullOrEmpty(objSalesOrder.Ordercode ))
                {
                    tLastNumber = Convert.ToInt32(dt.Rows[0][1].ToString()) + 1;
                    tOrdercode = tBranchcode + "/" + tQuoteType + "/" + dt.Rows[0][0].ToString() + "/" + tLastNumber;
                    objSalesOrder.Ordercode = tOrdercode;

                }
            }
            else
            {
                //not exist record for year insert new record 

                Sage.Entity.Interfaces.ICodeMaster objcodemaster = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.ICodeMaster>();

                objcodemaster.LastNumberUsed = "0";
                objcodemaster.YearName = Convert.ToString(DateTime.Today.Year);
                objcodemaster.TableName = "SalesOrder";
                objcodemaster.Save();
                string Query1 = "select yearname,LASTNUMBERUSED  from  sysdba.codemaster where  tablename='SalesOrder' and YEARName =YEAR(getdate())";

                System.Data.OleDb.OleDbDataAdapter dataAdapterObj1 = new System.Data.OleDb.OleDbDataAdapter(Query1, conObj);
                System.Data.DataTable dt1 = new System.Data.DataTable();
                dataAdapterObj1.Fill(dt1);
                tLastNumber = Convert.ToInt32(dt1.Rows[0][1].ToString()) + 1;
                tOrdercode = tBranchcode + "/" + tQuoteType + "/" + dt1.Rows[0][0].ToString() + "/" + tLastNumber;
                objSalesOrder.Ordercode = tOrdercode;

            }

            objSalesOrder.Save();

            //*************************  Quotation product *******************

            Sage.Entity.Interfaces.ISalesOrderItem objSalesOrderItem = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.ISalesOrderItem>();

            string QryProduct = "select  * from Quotation_PRODUCT where quotationid ='" + page.EntityContext.EntityID.ToString() + "'";

            System.Data.OleDb.OleDbDataAdapter da = new System.Data.OleDb.OleDbDataAdapter(QryProduct, conObj);
            System.Data.DataTable dtproduct = new System.Data.DataTable();
            da.Fill(dtproduct);
            if (dtproduct.Rows.Count > 0)
            {

                for (int i = 0; i <= dtproduct.Rows.Count - 1; i++)
                {

                    //'objSalesOrderItem.PRODUCTID = !string.IsNullOrEmpty(dtproduct.Rows[i][2].ToString()) ? dtproduct.Rows[i][2].ToString() : string.Empty;
                    Sage.Entity.Interfaces.ISalesOrder  SalesOrder = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ISalesOrder>(objSalesOrder.Id.ToString());
                    objSalesOrderItem.SalesOrder = SalesOrder;
                    Sage.Entity.Interfaces.IProduct product = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IProduct>(dtproduct.Rows[i][6].ToString());
                    objSalesOrderItem.SalesOrder = SalesOrder;
                    
                    
				  if (!string.IsNullOrEmpty(dtproduct.Rows[i][6].ToString()))
                    {
                        objSalesOrderItem.Product = product;
                        objSalesOrderItem.Family = product.Family;
                        objSalesOrderItem.ProductName = product.Name;
                        objSalesOrderItem.UnitOfMeasure = product.UnitOfMeasure;
                      
                      
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][7].ToString()))
                    {
                        objSalesOrderItem.Quantity = Convert.ToDouble(dtproduct.Rows[i][7].ToString());
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][8].ToString()))
                    {
                        objSalesOrderItem.Discount = Convert.ToDouble(dtproduct.Rows[i][8].ToString());
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][9].ToString()))
                    {

                        objSalesOrderItem.Price = Convert.ToDouble(dtproduct.Rows[i][9].ToString());
                    }
                    
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][11].ToString()))
                    {
                        objSalesOrderItem.ExtendedPrice = Convert.ToDouble(dtproduct.Rows[i][11].ToString());
                    }
                    
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][13].ToString()))
                    {
                        objSalesOrderItem. CalculatedPrice  = Convert.ToDecimal(dtproduct.Rows[i][13].ToString());
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][14].ToString()))
                    {
                       // objSalesOrderItem.UnitOfMeasure  = dtproduct.Rows[i][14].ToString();
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][15].ToString()))
                    {
                        objSalesOrderItem.Program  = dtproduct.Rows[i][15].ToString();
                    }

                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][21].ToString()))
                    {
                        objSalesOrderItem.LineNumber  = Convert.ToInt32 (dtproduct.Rows[i][21].ToString());
                    }              
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][22].ToString()))
                    {
                        objSalesOrderItem.CreateSource  = dtproduct.Rows[i][22].ToString();
                    }
                       
                     
                    objSalesOrderItem.Save();

                }

            }

            //'*********** quotation contact



            Sage.Entity.Interfaces.IQuotationContact objQuotationcontact = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IQuotationContact>();
         
            
            string Qrycontact = "select  * from Quotation_CONTACT where IsPrimary='T' and quotationid ='" + page.EntityContext.EntityID.ToString() + "'";

            System.Data.OleDb.OleDbDataAdapter dacontact = new System.Data.OleDb.OleDbDataAdapter(Qrycontact, conObj);
            System.Data.DataTable dtcontact = new System.Data.DataTable();
            dacontact.Fill(dtcontact);
            if (dtcontact.Rows.Count > 0)
            {

                for (int i = 0; i <= dtcontact.Rows.Count - 1; i++)
                {

                    //'objQuotationProduct.PRODUCTID = !string.IsNullOrEmpty(dtproduct.Rows[i][2].ToString()) ? dtproduct.Rows[i][2].ToString() : string.Empty;


                    if (!string.IsNullOrEmpty(dtcontact.Rows[i][1].ToString()))
                    {
                       // objQuotationcontact.CONTACTID = dtcontact.Rows[i][1].ToString();

                         Sage.Entity.Interfaces.IContact  contact = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IContact >( dtcontact.Rows[i][1].ToString());
                         objSalesOrder.RequestedBy = contact;
            
                   
                    }
                        

                    
                }
            }



            //***** fee structure *** OPPORTUNITYFEESTRUCTURE

            Sage.Entity.Interfaces.ISalesOrderFeeStructure objSalesOrderfee = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.ISalesOrderFeeStructure>();

            string Qryfee = "select  * from QUOTATION_FEESTRUCTURE where quotationid ='" + page.EntityContext.EntityID.ToString() + "'";

            System.Data.OleDb.OleDbDataAdapter dafee = new System.Data.OleDb.OleDbDataAdapter(Qryfee, conObj);
            System.Data.DataTable dtfee = new System.Data.DataTable();
            dafee.Fill(dtfee);
            if (dtfee.Rows.Count > 0)
            {

                for (int i = 0; i <= dtfee.Rows.Count - 1; i++)
                {

                    //'objQuotationProduct.PRODUCTID = !string.IsNullOrEmpty(dtproduct.Rows[i][2].ToString()) ? dtproduct.Rows[i][2].ToString() : string.Empty;

                    objSalesOrderfee.SalesOrderId = objSalesOrder.Id.ToString();
                    if (!string.IsNullOrEmpty(dtfee.Rows[i][6].ToString()))
                    {
                        objSalesOrderfee.Description = dtfee.Rows[i][6].ToString();
                    }

                    objSalesOrderfee.Save();
                }
            }

           
            
            //**** payment terms


            Sage.Entity.Interfaces.ISalesOrderPaymentTerm objsalesorderpayment = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.ISalesOrderPaymentTerm>();

            string Qrypayment = "select  * from Quotation_PAYMENTTERM where quotationid ='" + page.EntityContext.EntityID.ToString() + "'";

            System.Data.OleDb.OleDbDataAdapter dapayment = new System.Data.OleDb.OleDbDataAdapter(Qrypayment, conObj);
            System.Data.DataTable dtpayment = new System.Data.DataTable();
            dapayment.Fill(dtpayment);
            if (dtpayment.Rows.Count > 0)
            {

                for (int i = 0; i <= dtpayment.Rows.Count - 1; i++)
                {



                    objsalesorderpayment.SalesOrderId = objSalesOrder.Id.ToString();
                    if (!string.IsNullOrEmpty(dtpayment.Rows[i][6].ToString()))
                    {
                        objsalesorderpayment.Description = dtpayment.Rows[i][6].ToString();
                    }

                    objsalesorderpayment.Save();
                }
            } 


            
            //update codemaster
            string tno = "0";
            if (!string.IsNullOrEmpty(objSalesOrder.Ordercode .ToString()))
            {
                tno = objSalesOrder.Ordercode.ToString();
                string[] tno1 = tno.Split('/');

                tno = tno1[3];

                System.Data.OleDb.OleDbConnection conObj1 = new System.Data.OleDb.OleDbConnection(service.GetConnectionString());
                conObj1.Open();
                string query1 = "Update sysdba.codemaster set LASTNUMBERUSED ='" + tno + "' where tablename='SalesOrder' and  yearname=YEAR(getdate())";
                System.Data.OleDb.OleDbCommand cmd = new System.Data.OleDb.OleDbCommand(query1, conObj1);
                cmd.ExecuteNonQuery();

            }


            Response.Redirect(string.Format("SalesOrder.aspx?entityId=" + objSalesOrder.Id.ToString(), "&modeid=Detail"));
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            conObj.Dispose();
        }

    }



}
protected void btnSave_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.IQuotation _entity = BindingSource.Current as Sage.Entity.Interfaces.IQuotation;
  if (_entity != null)
  {
    object _parent = GetParentEntity();
    if (DialogService.ChildInsertInfo != null)
    {
        if (_parent != null)
        {
            if (DialogService.ChildInsertInfo.ParentReferenceProperty != null)
            {
                DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
            }
        }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
    if (page != null)
    {
        if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
        {
            shouldSave = false;
        }
    }

    if(shouldSave)
    {
       _entity.Save();
    }

    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null)
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }
  }

  
}
protected void btnDelete_ClickAction(object sender, EventArgs e) {
  Sage.Platform.Orm.Interfaces.IPersistentEntity persistentEntity = this.BindingSource.Current as Sage.Platform.Orm.Interfaces.IPersistentEntity;
  if (persistentEntity != null) {
    persistentEntity.Delete();
  }

  
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 btnOrder.Click += new ImageClickEventHandler(btnOrder_ClickAction);
btnGenerateOrder.Click += new EventHandler(btnGenerateOrder_ClickAction);
btnSave.Click += new ImageClickEventHandler(btnSave_ClickAction);
btnDelete.Click += new ImageClickEventHandler(btnDelete_ClickAction);


}

protected override void OnFormBound()
{
ClientBindingMgr.RegisterSaveButton(btnSave);

if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new QuotationDetailAdapter(this)); }
}

public class QuotationDetailAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IQuotationDetail
{
    public QuotationDetailAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.ITextBoxControl _QuotationNumber;
    public  Sage.Platform.Controls.ITextBoxControl QuotationNumber
    {
        get { return FindControl(ref _QuotationNumber, "QuotationNumber"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _Quotation;
    public  Sage.Platform.Controls.ITextBoxControl Quotation
    {
        get { return FindControl(ref _Quotation, "Quotation"); }
    }
    private Sage.Platform.Controls.ILookupControl _lkpAccountManager;
    public  Sage.Platform.Controls.ILookupControl lkpAccountManager
    {
        get { return FindControl(ref _lkpAccountManager, "lkpAccountManager"); }
    }
    private Sage.Platform.Controls.ILookupControl _lkpEndCustomer;
    public  Sage.Platform.Controls.ILookupControl lkpEndCustomer
    {
        get { return FindControl(ref _lkpEndCustomer, "lkpEndCustomer"); }
    }
    private Sage.Platform.Controls.IDateTimePickerControl _dtInspectionStartDate;
    public  Sage.Platform.Controls.IDateTimePickerControl dtInspectionStartDate
    {
        get { return FindControl(ref _dtInspectionStartDate, "dtInspectionStartDate"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklFeeType;
    public  Sage.Platform.Controls.IPickListControl pklFeeType
    {
        get { return FindControl(ref _pklFeeType, "pklFeeType"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _REFERENCENO;
    public  Sage.Platform.Controls.ITextBoxControl REFERENCENO
    {
        get { return FindControl(ref _REFERENCENO, "REFERENCENO"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _pklCloseProbability;
    public  Sage.Platform.Controls.ITextBoxControl pklCloseProbability
    {
        get { return FindControl(ref _pklCloseProbability, "pklCloseProbability"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkAddToForecast;
    public  Sage.Platform.Controls.ICheckBoxControl chkAddToForecast
    {
        get { return FindControl(ref _chkAddToForecast, "chkAddToForecast"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _Notes;
    public  Sage.Platform.Controls.ITextBoxControl Notes
    {
        get { return FindControl(ref _Notes, "Notes"); }
    }
    private Sage.Platform.Controls.ILookupControl _QFTextBox;
    public  Sage.Platform.Controls.ILookupControl QFTextBox
    {
        get { return FindControl(ref _QFTextBox, "QFTextBox"); }
    }
    private Sage.Platform.Controls.ILookupControl _lkpAccount;
    public  Sage.Platform.Controls.ILookupControl lkpAccount
    {
        get { return FindControl(ref _lkpAccount, "lkpAccount"); }
    }
    private Sage.Platform.Controls.ILookupControl _lkpBranch;
    public  Sage.Platform.Controls.ILookupControl lkpBranch
    {
        get { return FindControl(ref _lkpBranch, "lkpBranch"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklType;
    public  Sage.Platform.Controls.IPickListControl pklType
    {
        get { return FindControl(ref _pklType, "pklType"); }
    }
    private Sage.Platform.Controls.IDateTimePickerControl _dtInspectionEndDate;
    public  Sage.Platform.Controls.IDateTimePickerControl dtInspectionEndDate
    {
        get { return FindControl(ref _dtInspectionEndDate, "dtInspectionEndDate"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _CUSTOMERPROJECTNO;
    public  Sage.Platform.Controls.ITextBoxControl CUSTOMERPROJECTNO
    {
        get { return FindControl(ref _CUSTOMERPROJECTNO, "CUSTOMERPROJECTNO"); }
    }
    private Sage.Platform.Controls.IDateTimePickerControl _dtEstimatedClose;
    public  Sage.Platform.Controls.IDateTimePickerControl dtEstimatedClose
    {
        get { return FindControl(ref _dtEstimatedClose, "dtEstimatedClose"); }
    }
    private Sage.Platform.Controls.IPickListControl _QFSLXPickList1;
    public  Sage.Platform.Controls.IPickListControl QFSLXPickList1
    {
        get { return FindControl(ref _QFSLXPickList1, "QFSLXPickList1"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnOrder;
    public  Sage.Platform.Controls.IButtonControl btnOrder
    {
        get { return FindControl(ref _btnOrder, "btnOrder"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnGenerateOrder;
    public  Sage.Platform.Controls.IButtonControl btnGenerateOrder
    {
        get { return FindControl(ref _btnGenerateOrder, "btnGenerateOrder"); }
    }
    private Sage.Platform.Controls.IGroupNavigatorControl _grpNavigator;
    public  Sage.Platform.Controls.IGroupNavigatorControl grpNavigator
    {
        get { return FindControl(ref _grpNavigator, "grpNavigator"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnSave;
    public  Sage.Platform.Controls.IButtonControl btnSave
    {
        get { return FindControl(ref _btnSave, "btnSave"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnDelete;
    public  Sage.Platform.Controls.IButtonControl btnDelete
    {
        get { return FindControl(ref _btnDelete, "btnDelete"); }
    }

}

</script>

<script type="text/javascript">
</script>
