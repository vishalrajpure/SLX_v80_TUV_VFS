<%@ Control Language="C#" ClassName="QuotationContacts" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="grdQuotationContacts" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdQuotationContacts_RowCommand"
 DataKeyNames="InstanceId,Id"
 OnRowEditing="grdQuotationContacts_RowEditing" >
<Columns>
 <asp:ButtonField CommandName="Edit"
  Text="<%$ resources: grdQuotationContacts.d6bbab11-363e-4325-b695-0fb538f31927.Text %>"        HeaderText="<%$ resources: grdQuotationContacts.d6bbab11-363e-4325-b695-0fb538f31927.ColumnHeading %>"        >
          </asp:ButtonField>
      <asp:TemplateField   HeaderText="<%$ resources: grdQuotationContacts.aca47f41-4197-4d46-b65d-ee1ac427c43a.ColumnHeading %>"        >
    <itemtemplate>
      <SalesLogix:PageLink runat="server" NavigateUrl="Contact"
   EntityId='<%# dsQuotationContacts.getPropertyValue(Container.DataItem, "Contact.Id") %>'     Text='<%# dsQuotationContacts.getPropertyValue(Container.DataItem, "Contact.NameLF") %>'
         LinkType="EntityAlias"></SalesLogix:PageLink>
     </itemtemplate></asp:TemplateField>
      <asp:BoundField DataField="Contact.Title"
      HeaderText="<%$ resources: grdQuotationContacts.b03e4e2e-fa23-44fd-b43d-b2e47aa7e251.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:CheckBoxField DataField="ISPRIMARY" ReadOnly="True"
      HeaderText="<%$ resources: grdQuotationContacts.a755f8c4-a55c-4492-895a-d90777a92a2e.ColumnHeading %>"        >
          </asp:CheckBoxField>
    <asp:TemplateField   HeaderText="<%$ resources: grdQuotationContacts.c5bd07f3-8a8c-4539-ad42-776a0bbbcd43.ColumnHeading %>"        >
    <itemtemplate>
   <SalesLogix:PickListControl runat="server" ID="grdQuotationContactscol5" PickListId="" ValueStoredAsText="True" PickListName="Role" PickListValue='<%#  dsQuotationContacts.getPropertyValue(Container.DataItem, "SalesRole")  %>' DisplayMode="AsText" CssClass="" />
   </itemtemplate></asp:TemplateField>
    <asp:BoundField DataField="Contact.WorkPhone"
      HeaderText="<%$ resources: grdQuotationContacts.3744b6d4-63d3-4376-8414-848e8792eb60.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="Contact.Email"
      HeaderText="<%$ resources: grdQuotationContacts.75a783fb-5d80-4393-9853-ef3fe56af593.ColumnHeading %>"          >
      </asp:BoundField>
 </Columns>
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">


protected void grdQuotationContacts_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dsQuotationContacts.SelectedIndex = rowIndex;
        object currentEntity = dsQuotationContacts.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
        string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
            if (grdQuotationContacts.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdQuotationContacts.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dsQuotationContacts.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
                        currentEntity = dsQuotationContacts.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdQuotationContacts.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }
        if (e.CommandName.Equals("Edit"))
        {
            if (DialogService != null)
            {
                // QFDataGrid
                            DialogService.SetSpecs(400, 600, "AddEditQuotationContact", GetLocalResourceObject("6f257aa2-8fe0-4c60-8722-b43c64f20e0e.DialogTitleOverride").ToString() );
                            DialogService.EntityType = typeof(Sage.Entity.Interfaces.IQuotationContact );
                DialogService.EntityID = id;
                DialogService.ShowDialog();
            }
        }
    }
    grdQuotationContacts_refresh();
}
    protected void grdQuotationContacts_refresh()
    {
        if (PageWorkItem != null) {
            Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
            if (refresher != null)
            {
                refresher.RefreshAll();
            }
            else
            {
                Response.Redirect(Request.Url.ToString());
            }
        }
    }

        protected void grdQuotationContacts_RowEditing(object sender, GridViewEditEventArgs e)
    {
        grdQuotationContacts.SelectedIndex = e.NewEditIndex;
        e.Cancel = true;
    }
        </script>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="QuotationContacts_RTools" ToolbarLocation="right">
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=QuotationContacts&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkQuotationContactsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="QuotationContacts" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IQuotation); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dsQuotationContacts;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dsQuotationContacts
{ 
  get 
  {
    if (_dsQuotationContacts == null)
    {
             _dsQuotationContacts = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IQuotationContact), 
	    EntityType              ,"QuotationContacts", System.Reflection.MemberTypes.Property);
                   _dsQuotationContacts.UseSmartQuery = true;
      	   	}
 	return _dsQuotationContacts;
  }
}

void dsQuotationContacts_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dsQuotationContacts.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dsQuotationContacts);
   }
}

 



 

protected override void OnAddEntityBindings() {
       dsQuotationContacts.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("QuotationContacts", grdQuotationContacts ));
   dsQuotationContacts.BindFieldNames = new String[] { "Id","Contact.Id","Contact.NameLF","Contact.Title","ISPRIMARY","SalesRole","Contact.WorkPhone","Contact.Email" };
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dsQuotationContacts_OnCurrentEntitySet);
    
}
       

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 
}

protected override void OnFormBound()
{
if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
if (dsQuotationContacts.SourceObject == null) { dsQuotationContacts.SourceObject = BindingSource.Current; }
if (dsQuotationContacts.SourceObject == null) { RegisterBindingsWithClient(dsQuotationContacts); }
dsQuotationContacts.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new QuotationContactsAdapter(this)); }
}

public class QuotationContactsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IQuotationContacts
{
    public QuotationContactsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.IDataGridControl _grdQuotationContacts;
    public  Sage.Platform.Controls.IDataGridControl grdQuotationContacts
    {
        get { return FindControl(ref _grdQuotationContacts, "grdQuotationContacts"); }
    }
    private Sage.Platform.Controls.IDataSourceControl _dsQuotationContacts;
    public  Sage.Platform.Controls.IDataSourceControl dsQuotationContacts
    {
        get { return FindControl(ref _dsQuotationContacts, "dsQuotationContacts"); }
    }

}

</script>

<script type="text/javascript">
</script>
