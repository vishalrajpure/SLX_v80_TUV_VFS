<%@ Control Language="C#" ClassName="RNReportDetails" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="50%" />
            <col width="50%" />
     <tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpAccount_lbl" AssociatedControlID="lkpAccount" runat="server" Text="<%$ resources: lkpAccount.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lkpAccount" LookupEntityName="Account" LookupEntityTypeName="Sage.Entity.Interfaces.IAccount, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" Required="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpAccount.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpAccount.LookupProperties.AccountManager.UserInfo.UserName.PropertyHeader %>" PropertyName="AccountManager.UserInfo.UserName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpAccount.LookupProperties.Address.City.PropertyHeader %>" PropertyName="Address.City" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpAccount.LookupProperties.Address.State.PropertyHeader %>" PropertyName="Address.State" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpAccount.LookupProperties.BranchId.PropertyHeader %>" PropertyName="BranchId" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpAccount.LookupProperties.MainPhone.PropertyHeader %>" PropertyName="MainPhone" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpAccount.LookupProperties.Owner.User.UserName.PropertyHeader %>" PropertyName="Owner.User.UserName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpAccount.LookupProperties.Type.PropertyHeader %>" PropertyName="Type" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtReferenceNo_lbl" AssociatedControlID="txtReferenceNo" runat="server" Text="<%$ resources: txtReferenceNo.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtReferenceNo" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpSalesOrder_lbl" AssociatedControlID="lkpSalesOrder" runat="server" Text="<%$ resources: lkpSalesOrder.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lkpSalesOrder" LookupEntityName="SalesOrder" LookupEntityTypeName="Sage.Entity.Interfaces.ISalesOrder, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" SeedProperty="Account.Id"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpSalesOrder.LookupProperties.Account.AccountName.PropertyHeader %>" PropertyName="Account.AccountName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpSalesOrder.LookupProperties.BranchId.PropertyHeader %>" PropertyName="BranchId" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpSalesOrder.LookupProperties.Ordercode.PropertyHeader %>" PropertyName="Ordercode" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpSalesOrder.LookupProperties.SAPJobNo.PropertyHeader %>" PropertyName="SAPJobNo" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="plklocation_lbl" AssociatedControlID="plklocation" runat="server" Text="<%$ resources: plklocation.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="plklocation" ReadOnly="true" PickListName="JobLocation" MustExistInList="false" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueContract_lbl" AssociatedControlID="lueContract" runat="server" Text="<%$ resources: lueContract.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lueContract" ButtonToolTip="<%$ resources: lueContract.ButtonToolTip %>" LookupEntityName="Contract" LookupEntityTypeName="Sage.Entity.Interfaces.IContract, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" SeedProperty="SalesOrder.Id" AutoPostBack="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContract.LookupProperties.ReferenceNumber.PropertyHeader %>" PropertyName="ReferenceNumber" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContract.LookupProperties.ServiceCode.PropertyHeader %>" PropertyName="ServiceCode" PropertyType="SalesLogix.PickList" PropertyFormat="PickList" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContract.LookupProperties.StartDate.PropertyHeader %>" PropertyName="StartDate" PropertyType="System.DateTime" PropertyFormat="DateTime" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="True"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContract.LookupProperties.EndingDate.PropertyHeader %>" PropertyName="EndingDate" PropertyType="System.DateTime" PropertyFormat="DateTime" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="True"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueContract.LookupProperties.SalesOrderId.PropertyHeader %>" PropertyName="SalesOrderId" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="plkPlaceOfIssue_lbl" AssociatedControlID="plkPlaceOfIssue" runat="server" Text="<%$ resources: plkPlaceOfIssue.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="plkPlaceOfIssue" PickListName="JobLocation" MustExistInList="false" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpTicket_lbl" AssociatedControlID="lkpTicket" runat="server" Text="<%$ resources: lkpTicket.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lkpTicket" LookupEntityName="Ticket" LookupEntityTypeName="Sage.Entity.Interfaces.ITicket, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" SeedProperty="Contract.Id" AutoPostBack="true" Required="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpTicket.LookupProperties.Account.AccountName.PropertyHeader %>" PropertyName="Account.AccountName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpTicket.LookupProperties.ProjectName.PropertyHeader %>" PropertyName="ProjectName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpTicket.LookupProperties.SubCategory.PropertyHeader %>" PropertyName="SubCategory" PropertyType="SalesLogix.PickList" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpTicket.LookupProperties.TicketNumber.PropertyHeader %>" PropertyName="TicketNumber" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtPODate_lbl" AssociatedControlID="dtPODate" runat="server" Text="<%$ resources: dtPODate.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtPODate" ReadOnly="true" DisplayTime="false" />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="lueVender_lbl" AssociatedControlID="lueVender" runat="server" Text="<%$ resources: lueVender.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="lueVender" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtPONo_lbl" AssociatedControlID="txtPONo" runat="server" Text="<%$ resources: txtPONo.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtPONo" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="plkOrderStatus_lbl" AssociatedControlID="plkOrderStatus" runat="server" Text="<%$ resources: plkOrderStatus.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="plkOrderStatus" PickListName="status" MustExistInList="false" MaxLength="32"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklDocReviewed_lbl" AssociatedControlID="pklDocReviewed" runat="server" Text="<%$ resources: pklDocReviewed.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklDocReviewed" PickListName="DocumentReviewed" MustExistInList="false" AllowMultiples="true" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtCalibration_lbl" AssociatedControlID="txtCalibration" runat="server" Text="<%$ resources: txtCalibration.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtCalibration"  Rows="1" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea" MultiLineMaxLength="2147483647"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtIdentificationMark_lbl" AssociatedControlID="txtIdentificationMark" runat="server" Text="<%$ resources: txtIdentificationMark.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtIdentificationMark"  Rows="4" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtDisclaimer_lbl" AssociatedControlID="txtDisclaimer" runat="server" Text="<%$ resources: txtDisclaimer.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtDisclaimer"  Rows="4" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea" MultiLineMaxLength="2147483647"  />
  </div>

      </td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtFooter_lbl" AssociatedControlID="txtFooter" runat="server" Text="<%$ resources: txtFooter.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtFooter"  Rows="4" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea" MultiLineMaxLength="2147483647"  />
  </div>

      </td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtConclusion_lbl" AssociatedControlID="txtConclusion" runat="server" Text="<%$ resources: txtConclusion.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtConclusion"  Rows="4" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea" MultiLineMaxLength="2147483647"  />
  </div>

      </td>
                <td></td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="RNReportDetails_RTools" ToolbarLocation="right">
   <SalesLogix:GroupNavigator runat="server" ID="grnVisitReport" ></SalesLogix:GroupNavigator>
    <asp:ImageButton runat="server" ID="cmdSave"
ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
 
    <asp:ImageButton runat="server" ID="cmdDelete"
ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Delete_16x16" 
 />
 
    <asp:ImageButton runat="server" ID="btnRevisedRNR"
ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Copy_16x16"  />
 
    <asp:ImageButton runat="server" ID="btnPrint"
 ToolTip="<%$ resources: btnPrint.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Print_View_16x16"  />
 
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=RNReportDetails&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkRNReportDetailsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="RNReportDetails" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IRNReport); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _ds;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource ds
{ 
  get 
  {
    if (_ds == null)
    {
             _ds = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IVisitReport), 
	    EntityType              ,"Id", System.Reflection.MemberTypes.Property);
            	   	}
 	return _ds;
  }
}

void ds_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        ds.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(ds);
   }
}

 



 

protected override void OnAddEntityBindings() {
                 // lkpAccount.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpAccountLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Account", lkpAccount, "LookupResultValue");
        BindingSource.Bindings.Add(lkpAccountLookupResultValueBinding);
                    // txtReferenceNo.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtReferenceNoTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReferenceNumber", txtReferenceNo, "Text");
        BindingSource.Bindings.Add(txtReferenceNoTextBinding);
                    // lkpSalesOrder.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpSalesOrderLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("SalesOrder", lkpSalesOrder, "LookupResultValue");
        BindingSource.Bindings.Add(lkpSalesOrderLookupResultValueBinding);
                 // lkpSalesOrder.SeedValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpSalesOrderSeedValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Account.Id", lkpSalesOrder, "SeedValue");
        lkpSalesOrderSeedValueBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(lkpSalesOrderSeedValueBinding);
                    // plklocation.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding plklocationPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Location", plklocation, "PickListValue");
        BindingSource.Bindings.Add(plklocationPickListValueBinding);
                    // lueContract.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueContractLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Contract", lueContract, "LookupResultValue");
        BindingSource.Bindings.Add(lueContractLookupResultValueBinding);
                 // lueContract.SeedValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueContractSeedValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("SalesOrder.Id", lueContract, "SeedValue");
        lueContractSeedValueBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(lueContractSeedValueBinding);
                    // plkPlaceOfIssue.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding plkPlaceOfIssuePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("PlaceOfIssue", plkPlaceOfIssue, "PickListValue");
        BindingSource.Bindings.Add(plkPlaceOfIssuePickListValueBinding);
                    // lkpTicket.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpTicketLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Ticket", lkpTicket, "LookupResultValue");
        BindingSource.Bindings.Add(lkpTicketLookupResultValueBinding);
                 // lkpTicket.SeedValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpTicketSeedValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Contract.Id", lkpTicket, "SeedValue");
        lkpTicketSeedValueBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(lkpTicketSeedValueBinding);
                    // dtPODate.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtPODateDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("PODate", dtPODate, "DateTimeValue");
        BindingSource.Bindings.Add(dtPODateDateTimeValueBinding);
                    // lueVender.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueVenderTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Vendor", lueVender, "Text");
        BindingSource.Bindings.Add(lueVenderTextBinding);
                    // txtPONo.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtPONoTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("PONumber", txtPONo, "Text");
        BindingSource.Bindings.Add(txtPONoTextBinding);
                    // plkOrderStatus.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding plkOrderStatusPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("OrderStatus", plkOrderStatus, "PickListValue");
        BindingSource.Bindings.Add(plkOrderStatusPickListValueBinding);
                    // pklDocReviewed.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklDocReviewedPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("DocumentsReviewed", pklDocReviewed, "PickListValue");
        BindingSource.Bindings.Add(pklDocReviewedPickListValueBinding);
                    // txtCalibration.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtCalibrationTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Calibration", txtCalibration, "Text");
        BindingSource.Bindings.Add(txtCalibrationTextBinding);
                    // txtIdentificationMark.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtIdentificationMarkTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("IdentificationMark", txtIdentificationMark, "Text");
        BindingSource.Bindings.Add(txtIdentificationMarkTextBinding);
                    // txtDisclaimer.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtDisclaimerTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Disclaimer", txtDisclaimer, "Text");
        BindingSource.Bindings.Add(txtDisclaimerTextBinding);
                    // txtFooter.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtFooterTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Footer", txtFooter, "Text");
        BindingSource.Bindings.Add(txtFooterTextBinding);
                    // txtConclusion.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtConclusionTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Conclusion", txtConclusion, "Text");
        BindingSource.Bindings.Add(txtConclusionTextBinding);
    
     BindingSource.OnCurrentEntitySet += new EventHandler(ds_OnCurrentEntitySet);
    
                    }
                                                                                                                       
protected void lkpTicket_ChangeAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.IRNReport VRpt = this.BindingSource.Current as Sage.Entity.Interfaces.IRNReport;
Sage.Entity.Interfaces.ITicket tkt = lkpTicket.LookupResultValue as Sage.Entity.Interfaces.ITicket;
if(tkt != null)
{
	VRpt.Account= tkt.Contract.Account;
	Sage.Entity.Interfaces.ISalesOrder objsales = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ISalesOrder>(tkt.Contract.SalesOrderId);
	if(objsales != null)
	    VRpt.SalesOrder = objsales;
	Sage.Entity.Interfaces.IContract objcont = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IContract>(tkt.Contract.Id);
	if(objcont != null)
	VRpt.Contract= objcont;	
	VRpt.Location= tkt.JobLocation;
	VRpt.PONumber = tkt.Contract.PONumber;
	VRpt.PODate = tkt.Contract.PODate;
	VRpt.Vendor = tkt.Contract.VendorName;
}






}
protected void cmdSave_ClickAction(object sender, EventArgs e) {


Sage.Entity.Interfaces.IRNReport VR = this.BindingSource.Current as Sage.Entity.Interfaces.IRNReport;
Sage.Entity.Interfaces.ITicket objT = this.GetParentEntity() as Sage.Entity.Interfaces.ITicket;
Sage.Entity.Interfaces.ITicket objTicket = VR.Ticket;
if(objTicket.VisitReports.Count <= 0)
{
	throw new ApplicationException("One Visit Report must to create IRN...");
}

if(string.IsNullOrEmpty(VR.ReferenceNumber))
{
	Sage.Entity.Interfaces.IComplaint complaint = BindingSource.Current as Sage.Entity.Interfaces.IComplaint;
	Sage.Platform.Data.IDataService service = 
	Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
	System.Data.OleDb.OleDbConnection conObj1 = new System.Data.OleDb.OleDbConnection(service.GetConnectionString());
	conObj1.Open();
	string query1 = "Select Isnull(MAx(substring(ReferenceNumber,CHARINDEX('/',ReferenceNumber,10)+1,len(ReferenceNumber))),0) + 1 cmp from RnReport";
	System.Data.OleDb.OleDbCommand cmd = new System.Data.OleDb.OleDbCommand(query1, conObj1);
	System.Data.DataSet ds = new System.Data.DataSet();
	System.Data.OleDb.OleDbDataAdapter da = new System.Data.OleDb.OleDbDataAdapter(query1,conObj1);
	da.Fill(ds);
	VR.ReferenceNumber = "F/INSP/IRN/" + ds.Tables[0].Rows[0][0].ToString();;
}
VR.Save();
if (EntityContext.EntityID.ToString().ToUpper().Equals("INSERT") == true)
{
if(objTicket.TicketProducts.Count > 0)
{
 
 foreach(Sage.Entity.Interfaces.ITicketProduct prd in objTicket.TicketProducts)
 {
  Sage.Entity.Interfaces.IRNReportItem vritem = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IRNReportItem>();
  vritem.TicketProduct = prd;  
  vritem.RNReport = VR;
  vritem.Quantity = Convert.ToDouble(prd.ContractProductItem.Quantity);
  vritem.QunatityOffered = Convert.ToDouble(prd.Quantity);
  vritem.Save();
 }
}
if(objTicket.TicketSurveyors.Count > 0)
 {
  
  foreach(Sage.Entity.Interfaces.ITicketSurveyor prd in objTicket.TicketSurveyors)
  {
   Sage.Entity.Interfaces.IRNSurveyor vritem = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IRNSurveyor>();
   vritem.Surveyor = prd.Surveyor;
   vritem.RNReport = VR;
   vritem.Save();
  }
 }
}
if(objT != null)
{ 
	System.Web.HttpContext.Current.Response.Redirect(string.Format("~/{0}.aspx?entityid={1}", "Ticket",  objT.Id.ToString()));
}
else
{
	System.Web.HttpContext.Current.Response.Redirect(string.Format("~/{0}.aspx?entityid={1}", "RNReport",  VR.Id.ToString()));
}



}
protected void cmdDelete_ClickAction(object sender, EventArgs e) {
  Sage.Platform.Orm.Interfaces.IPersistentEntity persistentEntity = this.BindingSource.Current as Sage.Platform.Orm.Interfaces.IPersistentEntity;
  if (persistentEntity != null) {
    persistentEntity.Delete();
  }

  
}
protected void btnRevisedRNR_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.IRNReport _entity = BindingSource.Current as Sage.Entity.Interfaces.IRNReport;
if (_entity.OrderStatus != "Closed")
{

	Sage.Platform.WebPortal.EntityPage page = (Sage.Platform.WebPortal.EntityPage)Page;

    Sage.Entity.Interfaces.IRNReport objRNReport = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IRNReport>();
    Sage.Platform.Data.IDataService service = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
    System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service.GetConnectionString());
	if (_entity != null)
    {
        try
        {
			
			objRNReport.Account = _entity.Account;
			objRNReport.Calibration = _entity.Calibration;
			objRNReport.Conclusion =_entity.Calibration;
			objRNReport.Contract = _entity.Contract;
			objRNReport.Contracter = _entity.Contracter;
			objRNReport.Disclaimer = _entity.Disclaimer;
			
			objRNReport.DocumentsReviewed = _entity.DocumentsReviewed;
			objRNReport.Footer = _entity.DocumentsReviewed;
			objRNReport.IdentificationMark = _entity.IdentificationMark;
			objRNReport.Location = _entity.Location;
			objRNReport.OrderStatus = "Open";
			objRNReport.Owner = _entity.Owner;
			objRNReport.PlaceOfIssue = _entity.PlaceOfIssue;
			objRNReport.PODate = _entity.PODate;
			objRNReport.PONumber = _entity.PONumber;
			/*********** Code For Reference Number*************/
			objRNReport.ReferenceNumber = _entity.ReferenceNumber + "Rev";
			/**************************************************/
			objRNReport.Rnreportid = _entity.Rnreportid;
			
			objRNReport.SalesOrder = _entity.SalesOrder;
			objRNReport.Ticket = _entity.Ticket;
			objRNReport.Vendor = _entity.Vendor;
			_entity.OrderStatus = "Cancel";
			_entity.Save();
			objRNReport.Save();
			
			/************* Need To Add Distributions********/
			if(_entity.Distributions.Count > 0)
			{
				foreach(Sage.Entity.Interfaces.IDistribution dist in _entity.Distributions)
				{
					Sage.Entity.Interfaces.IDistribution objDist = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IDistribution>();
					objDist.DistributionType= dist.DistributionType;
					objDist.Quantity= dist.Quantity;
					objDist.RNReport= objRNReport;
					objDist.TypeOfCopy= dist.TypeOfCopy;
					objDist.Save();
				}
				
			}
			/***********************************************/
			/************* Need To Add Documents********/
			if(_entity.RNDocumentReferences.Count > 0)
			{
				foreach(Sage.Entity.Interfaces.IRNDocumentReference docRef in _entity.RNDocumentReferences)
				{
					Sage.Entity.Interfaces.IRNDocumentReference objdocRef = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IRNDocumentReference>();
					objdocRef.Document= docRef.Document;
					objdocRef.RefferBy= docRef.RefferBy;
					objdocRef.RNReport= objRNReport;
					objdocRef.RevNo= docRef.RevNo;					
					objdocRef.Save();
				}
				
			}
			
			/**************************************************/
			
			/************* Need To Add Items********/
			if(_entity.RNReportItems.Count > 0)
			{
				foreach(Sage.Entity.Interfaces.IRNReportItem objitm in _entity.RNReportItems)
				{
					Sage.Entity.Interfaces.IRNReportItem itm = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IRNReportItem>();
					itm.ItemCode = objitm.ItemCode;
					itm.POItemNo= objitm.POItemNo;
					itm.RNReport= objRNReport;
					itm.Productid= objitm.Productid;
					itm.Quantity= objitm.Quantity;
					itm.QuantityAccepted= objitm.QuantityAccepted;
					itm.QuantityCompletePerPO= objitm.QuantityCompletePerPO;					
					itm.QunatityOffered= objitm.QunatityOffered;					
					itm.TicketProduct= objitm.TicketProduct;										
					itm.Save();
				}
				
			}
			
			
			/**************************************************/
			
			/************* Need To Add Stages********/
			if(_entity.RNReportStages.Count > 0)
			{
				foreach(Sage.Entity.Interfaces.IRNReportStage objitm in _entity.RNReportStages)
				{
					Sage.Entity.Interfaces.IRNReportStage itm = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IRNReportStage>();
					itm.Status = objitm.Status;
					itm.ProductStageId= objitm.ProductStageId;
					itm.RNReport= objRNReport;
					itm.SerialNumber= objitm.SerialNumber;
					itm.Save();
				}
				
			}
			
			/**************************************************/
			/************* Need To Add Inspectors********/
			if(_entity.RNSurveyors.Count > 0)
			{
				foreach(Sage.Entity.Interfaces.IRNSurveyor objitm in _entity.RNSurveyors)
				{
					Sage.Entity.Interfaces.IRNSurveyor itm = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IRNSurveyor>();
					itm.SurveyorID = objitm.SurveyorID;
					itm.VisitReportID= objitm.VisitReportID;
					itm.RNReport= objRNReport;
					itm.Save();
				}
				
			}
			
			/**************************************************/
			
			/************* Need To Add Visit Reports********/
			if(_entity.RNVisitReports.Count > 0)
			{
				foreach(Sage.Entity.Interfaces.IRNVisitReport objitm in _entity.RNVisitReports)
				{
					Sage.Entity.Interfaces.IRNVisitReport itm = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IRNVisitReport>();
					
					itm.VisitReportID= objitm.VisitReportID;
					itm.RNReport= objRNReport;
					itm.Save();
				}
				
			}
			
			
			/**************************************************/


            Response.Redirect(string.Format("RNReport.aspx?entityId=" + objRNReport.Id.ToString(), "&modeid=Detail"));
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            conObj.Dispose();
        }

    }
}
else
{ 
	throw new Sage.Platform.Application.ValidationException("RNReport is closed");
}

	


}
protected void btnPrint_ClickAction(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("RNReportDetails.btnPrint_OnClick", methodArgs);

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lkpTicket.LookupResultValueChanged += new EventHandler(lkpTicket_ChangeAction);
cmdSave.Click += new ImageClickEventHandler(cmdSave_ClickAction);
cmdDelete.Click += new ImageClickEventHandler(cmdDelete_ClickAction);
btnRevisedRNR.Click += new ImageClickEventHandler(btnRevisedRNR_ClickAction);
btnPrint.Click += new ImageClickEventHandler(btnPrint_ClickAction);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.Entity.Interfaces.IRNReport VRpt = BindingSource.Current as Sage.Entity.Interfaces.IRNReport;
Sage.Entity.Interfaces.ITicket tkt = this.GetParentEntity() as Sage.Entity.Interfaces.ITicket;
if (EntityContext.EntityID.ToString().ToUpper().Equals("INSERT") == true)
{
	  txtReferenceNo.Visible = false;
	  txtReferenceNo_lbl.Visible = true;
	  btnRevisedRNR.Visible = false;	
	  btnPrint.Visible = false;
 }
 else
 {
	txtReferenceNo_lbl.Visible = true;
    txtReferenceNo.Visible = true;
	btnRevisedRNR.Visible = true;
	btnPrint.Visible = true;
	
 } 
if(tkt != null)
{
	if(tkt.VisitReports.Count >0)
	{
	VRpt.Account= tkt.Contract.Account;
	Sage.Entity.Interfaces.ISalesOrder objsales = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ISalesOrder>(tkt.Contract.SalesOrderId);
	if(objsales != null)
	    VRpt.SalesOrder = objsales;
	Sage.Entity.Interfaces.IContract objcont = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IContract>(tkt.Contract.Id);
	if(objcont != null)
	VRpt.Contract= objcont;	
	VRpt.Location= tkt.JobLocation;
	VRpt.PONumber = tkt.Contract.PONumber;
	VRpt.PODate = tkt.Contract.PODate;
	VRpt.Vendor = tkt.Contract.VendorName;
	}
	else
	{
		throw new Sage.Platform.Application.ValidationException("One Visit Report must to create IRN...");
	}
}
	
	

}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
cmdDelete.OnClientClick = string.Format("return confirm('{0}');", Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("cmdDelete.ActionConfirmationMessage").ToString()));

if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
if (ds.SourceObject == null) { ds.SourceObject = BindingSource.Current; }
if (ds.SourceObject == null) { RegisterBindingsWithClient(ds); }
ds.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new RNReportDetailsAdapter(this)); }
}

public class RNReportDetailsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IRNReportDetails
{
    public RNReportDetailsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.ILookupControl _lkpAccount;
    public  Sage.Platform.Controls.ILookupControl lkpAccount
    {
        get { return FindControl(ref _lkpAccount, "lkpAccount"); }
    }
    private Sage.Platform.Controls.ILookupControl _lkpSalesOrder;
    public  Sage.Platform.Controls.ILookupControl lkpSalesOrder
    {
        get { return FindControl(ref _lkpSalesOrder, "lkpSalesOrder"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueContract;
    public  Sage.Platform.Controls.ILookupControl lueContract
    {
        get { return FindControl(ref _lueContract, "lueContract"); }
    }
    private Sage.Platform.Controls.ILookupControl _lkpTicket;
    public  Sage.Platform.Controls.ILookupControl lkpTicket
    {
        get { return FindControl(ref _lkpTicket, "lkpTicket"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _lueVender;
    public  Sage.Platform.Controls.ITextBoxControl lueVender
    {
        get { return FindControl(ref _lueVender, "lueVender"); }
    }
    private Sage.Platform.Controls.IPickListControl _plkOrderStatus;
    public  Sage.Platform.Controls.IPickListControl plkOrderStatus
    {
        get { return FindControl(ref _plkOrderStatus, "plkOrderStatus"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtCalibration;
    public  Sage.Platform.Controls.ITextBoxControl txtCalibration
    {
        get { return FindControl(ref _txtCalibration, "txtCalibration"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtDisclaimer;
    public  Sage.Platform.Controls.ITextBoxControl txtDisclaimer
    {
        get { return FindControl(ref _txtDisclaimer, "txtDisclaimer"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtFooter;
    public  Sage.Platform.Controls.ITextBoxControl txtFooter
    {
        get { return FindControl(ref _txtFooter, "txtFooter"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtConclusion;
    public  Sage.Platform.Controls.ITextBoxControl txtConclusion
    {
        get { return FindControl(ref _txtConclusion, "txtConclusion"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtReferenceNo;
    public  Sage.Platform.Controls.ITextBoxControl txtReferenceNo
    {
        get { return FindControl(ref _txtReferenceNo, "txtReferenceNo"); }
    }
    private Sage.Platform.Controls.IPickListControl _plklocation;
    public  Sage.Platform.Controls.IPickListControl plklocation
    {
        get { return FindControl(ref _plklocation, "plklocation"); }
    }
    private Sage.Platform.Controls.IPickListControl _plkPlaceOfIssue;
    public  Sage.Platform.Controls.IPickListControl plkPlaceOfIssue
    {
        get { return FindControl(ref _plkPlaceOfIssue, "plkPlaceOfIssue"); }
    }
    private Sage.Platform.Controls.IDateTimePickerControl _dtPODate;
    public  Sage.Platform.Controls.IDateTimePickerControl dtPODate
    {
        get { return FindControl(ref _dtPODate, "dtPODate"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtPONo;
    public  Sage.Platform.Controls.ITextBoxControl txtPONo
    {
        get { return FindControl(ref _txtPONo, "txtPONo"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklDocReviewed;
    public  Sage.Platform.Controls.IPickListControl pklDocReviewed
    {
        get { return FindControl(ref _pklDocReviewed, "pklDocReviewed"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtIdentificationMark;
    public  Sage.Platform.Controls.ITextBoxControl txtIdentificationMark
    {
        get { return FindControl(ref _txtIdentificationMark, "txtIdentificationMark"); }
    }
    private Sage.Platform.Controls.IDataSourceControl _ds;
    public  Sage.Platform.Controls.IDataSourceControl ds
    {
        get { return FindControl(ref _ds, "ds"); }
    }
    private Sage.Platform.Controls.IGroupNavigatorControl _grnVisitReport;
    public  Sage.Platform.Controls.IGroupNavigatorControl grnVisitReport
    {
        get { return FindControl(ref _grnVisitReport, "grnVisitReport"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdSave;
    public  Sage.Platform.Controls.IButtonControl cmdSave
    {
        get { return FindControl(ref _cmdSave, "cmdSave"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdDelete;
    public  Sage.Platform.Controls.IButtonControl cmdDelete
    {
        get { return FindControl(ref _cmdDelete, "cmdDelete"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnRevisedRNR;
    public  Sage.Platform.Controls.IButtonControl btnRevisedRNR
    {
        get { return FindControl(ref _btnRevisedRNR, "btnRevisedRNR"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnPrint;
    public  Sage.Platform.Controls.IButtonControl btnPrint
    {
        get { return FindControl(ref _btnPrint, "btnPrint"); }
    }

    public  void btnPrint_OnClick(System.EventArgs e)
    {
        Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
        Object[] methodArgs = new Object[] { this, e };
        lib.Execute("RNReportDetails.btnPrint_OnClick", methodArgs);
    }
}

</script>

<script type="text/javascript">
</script>
