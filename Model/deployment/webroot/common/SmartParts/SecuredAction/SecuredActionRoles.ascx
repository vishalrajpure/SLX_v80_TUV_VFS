<%@ Control Language="C#" ClassName="SecuredActionRoles" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="grdSecuredActionRoles" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="20" OnPageIndexChanging="grdSecuredActionRolespage_changing" EmptyTableRowText="<%$ resources: grdSecuredActionRoles.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdSecuredActionRoles_RowCommand"
 DataKeyNames="InstanceId,Id"
 AllowSorting="true" OnSorting="grdSecuredActionRoles_Sorting"  OnRowDeleting="grdSecuredActionRoles_RowDeleting" OnRowDataBound="grdSecuredActionRoles_RowDataBound"  ShowSortIcon="true" >
<Columns>
   <asp:TemplateField   HeaderText="<%$ resources: grdSecuredActionRoles.e33ffe33-d5c4-4a3f-94d8-b7062a0f9a28.ColumnHeading %>"       SortExpression="Role.RoleName"  >
    <itemtemplate>
      <SalesLogix:PageLink runat="server" NavigateUrl="Role"
   EntityId='<%# dsSecuredActionRoles.getPropertyValue(Container.DataItem, "Role.Id") %>'     Text='<%# dsSecuredActionRoles.getPropertyValue(Container.DataItem, "Role.RoleName") %>'
         LinkType="EntityAlias"></SalesLogix:PageLink>
     </itemtemplate></asp:TemplateField>
      <asp:BoundField DataField="Role.RoleDescription"
      HeaderText="<%$ resources: grdSecuredActionRoles.595fb7d4-7fb4-4405-acb9-5b4e7ee8f88b.ColumnHeading %>"       SortExpression="Role.RoleDescription"    >
      </asp:BoundField>
   <asp:ButtonField CommandName="Delete"
  Text="<%$ resources: grdSecuredActionRoles.f711edca-0a86-4218-923a-074d1b2edc59.Text %>"                >
          </asp:ButtonField>
   </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

         private int _grdSecuredActionRolesdeleteColumnIndex = -2;
protected int grdSecuredActionRolesDeleteColumnIndex
{
    get
    {
        if (_grdSecuredActionRolesdeleteColumnIndex == -2)
        {
            int bias = (grdSecuredActionRoles.ExpandableRows) ? 1 : 0;
            _grdSecuredActionRolesdeleteColumnIndex = -1;
            int colcount = 0;
            foreach (DataControlField col in grdSecuredActionRoles.Columns)
            {
                ButtonField btn = col as ButtonField;
                if (btn != null)
                {
                    if (btn.CommandName == "Delete")
                    {
                        _grdSecuredActionRolesdeleteColumnIndex = colcount + bias;
                        break;
                    }
                }
                colcount++;
            }
        }
        return _grdSecuredActionRolesdeleteColumnIndex;
    }
}

protected void grdSecuredActionRoles_RowDataBound(object sender, GridViewRowEventArgs e)
{
    if (e.Row.RowType == DataControlRowType.DataRow)
    {
        if ((grdSecuredActionRolesDeleteColumnIndex >= 0) && (grdSecuredActionRolesDeleteColumnIndex < e.Row.Cells.Count))
        {
            TableCell cell = e.Row.Cells[grdSecuredActionRolesDeleteColumnIndex];
            foreach (Control c in cell.Controls)
            {
                LinkButton btn = c as LinkButton;
                if (btn != null)
                {
                    btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdSecuredActionRoles.f711edca-0a86-4218-923a-074d1b2edc59.ConfirmationMessage").ToString()) + "');");
                    return;
                }
            }
        }
    }
}
   
protected void grdSecuredActionRolespage_changing(object sender, GridViewPageEventArgs e)
{
 grdSecuredActionRoles.PageIndex = e.NewPageIndex;
 grdSecuredActionRoles.DataBind();
}
protected void grdSecuredActionRoles_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdSecuredActionRoles_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dsSecuredActionRoles.SelectedIndex = rowIndex;
        object currentEntity = dsSecuredActionRoles.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
        string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
            if (grdSecuredActionRoles.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdSecuredActionRoles.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dsSecuredActionRoles.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
                        currentEntity = dsSecuredActionRoles.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdSecuredActionRoles.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }
        if (e.CommandName.Equals("Delete"))
        {
            Sage.Entity.Interfaces.ISecuredAction mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.ISecuredAction;
            if (mainentity != null)
            {
                Sage.Entity.Interfaces.ISecuredActionRole childEntity = null;
                if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.ISecuredActionRole))
                {
                    childEntity = (Sage.Entity.Interfaces.ISecuredActionRole)currentEntity;
                }
                else if (id != null)
                {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ISecuredActionRole>(id);
            }
                if(childEntity != null)
                {
                     mainentity.Roles.Remove(childEntity);

                     if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
                     {
                         childEntity.Delete();
                     }
                     dsSecuredActionRoles.SelectedIndex = -1;
                }
            }
        }
    }
    grdSecuredActionRoles_refresh();
}
    protected void grdSecuredActionRoles_refresh()
    {
        if (PageWorkItem != null) {
            Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
            if (refresher != null)
            {
                refresher.RefreshAll();
            }
            else
            {
                Response.Redirect(Request.Url.ToString());
            }
        }
    }

            protected void grdSecuredActionRoles_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        grdSecuredActionRoles.SelectedIndex = -1;
    }
    </script>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="SecuredActionRoles_RTools" ToolbarLocation="right">
   <SalesLogix:LookupControl runat="server" ID="lueAddRole"  ToolTip="<%$ resources: lueAddRole.ToolTip %>" ButtonToolTip="<%$ resources: lueAddRole.ButtonToolTip %>" LookupEntityName="Role" LookupEntityTypeName="Sage.Entity.Interfaces.IRole, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="ButtonOnly" AutoPostBack="true" LookupImageURL="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAddRole.LookupProperties.RoleName.PropertyHeader %>" PropertyName="RoleName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAddRole.LookupProperties.RoleDescription.PropertyHeader %>" PropertyName="RoleDescription" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
 

  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=SecuredActionRoles&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkSecuredActionRolesHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="SecuredActionRoles" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.ISecuredAction); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dsSecuredActionRoles;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dsSecuredActionRoles
{ 
  get 
  {
    if (_dsSecuredActionRoles == null)
    {
             _dsSecuredActionRoles = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.ISecuredActionRole), 
	    EntityType              ,"Roles", System.Reflection.MemberTypes.Property);
                   _dsSecuredActionRoles.UseSmartQuery = true;
      	   	}
 	return _dsSecuredActionRoles;
  }
}

void dsSecuredActionRoles_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dsSecuredActionRoles.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dsSecuredActionRoles);
   }
}

 



 

protected override void OnAddEntityBindings() {
       dsSecuredActionRoles.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("Roles", grdSecuredActionRoles ));
   dsSecuredActionRoles.BindFieldNames = new String[] { "Id","Role.Id","Role.RoleName","Role.RoleDescription" };
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dsSecuredActionRoles_OnCurrentEntitySet);
    
    }
       
protected void lueAddRole_ChangeAction(object sender, EventArgs e) {

			if (lueAddRole.LookupResultValue != null)
		{
			Sage.Entity.Interfaces.ISecuredAction parentEntity = BindingSource.Current as Sage.Entity.Interfaces.ISecuredAction;
			Sage.Entity.Interfaces.IRole relatedEntity = lueAddRole.LookupResultValue as Sage.Entity.Interfaces.IRole;
			Sage.Platform.WebPortal.EntityPage page = (Sage.Platform.WebPortal.EntityPage)Page;
			// check for duplicates
			bool found = false;
			if ((parentEntity != null) && (relatedEntity != null))
			{
						foreach (Sage.Entity.Interfaces.ISecuredActionRole i in parentEntity.Roles)
				{				
					if (i.Role.Equals(relatedEntity))
					{
						found = true;
						if (DialogService != null)
						{
							DialogService.ShowMessage(base.GetLocalResourceObject("ce724e55-1f17-428d-955f-a6c1cb77d4db.DuplicateAssociationMessage").ToString(), 90, 360);
							return;
						}
					}
				}
						Sage.Entity.Interfaces.ISecuredActionRole relationshipEntity = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.ISecuredActionRole>();
			if (!found)
			{
				relationshipEntity.SecuredAction = parentEntity;
				relationshipEntity.Role = relatedEntity;
				parentEntity.Roles.Add(relationshipEntity);
				dsSecuredActionRoles.SelectedMember = relationshipEntity;
				if (page.ModeId.ToUpper() != "INSERT")
				{
					parentEntity.Save();
				}
			}
					}
		}
					lueAddRole_ChangeActionIAC(sender, e);
		
			

}
protected void lueAddRole_ChangeActionIAC(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lueAddRole.LookupResultValueChanged += new EventHandler(lueAddRole_ChangeAction);


}

protected override void OnFormBound()
{
ClientBindingMgr.RegisterBoundControl(lueAddRole);

if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
if (dsSecuredActionRoles.SourceObject == null) { dsSecuredActionRoles.SourceObject = BindingSource.Current; }
if (dsSecuredActionRoles.SourceObject == null) { RegisterBindingsWithClient(dsSecuredActionRoles); }
dsSecuredActionRoles.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new SecuredActionRolesAdapter(this)); }
}

public class SecuredActionRolesAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.ISecuredActionRoles
{
    public SecuredActionRolesAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.IDataGridControl _grdSecuredActionRoles;
    public  Sage.Platform.Controls.IDataGridControl grdSecuredActionRoles
    {
        get { return FindControl(ref _grdSecuredActionRoles, "grdSecuredActionRoles"); }
    }
    private Sage.Platform.Controls.IDataSourceControl _dsSecuredActionRoles;
    public  Sage.Platform.Controls.IDataSourceControl dsSecuredActionRoles
    {
        get { return FindControl(ref _dsSecuredActionRoles, "dsSecuredActionRoles"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueAddRole;
    public  Sage.Platform.Controls.ILookupControl lueAddRole
    {
        get { return FindControl(ref _lueAddRole, "lueAddRole"); }
    }

}

</script>

<script type="text/javascript">
</script>
