<%@ Control Language="C#" ClassName="LogItems" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="50%" />
            <col width="50%" />
     <tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="cboFilterLogType_lbl" AssociatedControlID="cboFilterLogType" runat="server" Text="<%$ resources: cboFilterLogType.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol select"  > 
<asp:ListBox runat="server" ID="cboFilterLogType"  SelectionMode="Single" Rows="1" data-dojo-type="dijit.form.Select"  CssClass="select-control "  >
<asp:ListItem  Selected="true" Text="<%$ resources: cboFilterLogType_item0.Text %>"
Value="" />
<asp:ListItem  Text="<%$ resources: cboFilterLogType_item1.Text %>"
Value="Debug" />
<asp:ListItem  Text="<%$ resources: cboFilterLogType_item2.Text %>"
Value="Error" />
<asp:ListItem  Text="<%$ resources: cboFilterLogType_item3.Text %>"
Value="Info" />
<asp:ListItem  Text="<%$ resources: cboFilterLogType_item4.Text %>"
Value="Warn" />
</asp:ListBox>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="cboFilterResource_lbl" AssociatedControlID="cboFilterResource" runat="server" Text="<%$ resources: cboFilterResource.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol select"  > 
<asp:ListBox runat="server" ID="cboFilterResource"  SelectionMode="Single" Rows="1" data-dojo-type="dijit.form.Select"  CssClass="select-control "  >
<asp:ListItem  Selected="true" Text="<%$ resources: cboFilterResource_item0.Text %>"
Value="" />
<asp:ListItem  Text="<%$ resources: cboFilterResource_item1.Text %>"
Value="commodity" />
<asp:ListItem  Text="<%$ resources: cboFilterResource_item2.Text %>"
Value="commodityGroup" />
<asp:ListItem  Text="<%$ resources: cboFilterResource_item3.Text %>"
Value="contact" />
<asp:ListItem  Text="<%$ resources: cboFilterResource_item4.Text %>"
Value="location" />
<asp:ListItem  Text="<%$ resources: cboFilterResource_item5.Text %>"
Value="price" />
<asp:ListItem  Text="<%$ resources: cboFilterResource_item6.Text %>"
Value="priceList" />
<asp:ListItem  Text="<%$ resources: cboFilterResource_item7.Text %>"
Value="salesOrder" />
<asp:ListItem  Text="<%$ resources: cboFilterResource_item8.Text %>"
Value="salesOrderLine" />
<asp:ListItem  Text="<%$ resources: cboFilterResource_item9.Text %>"
Value="tradingAccount" />
</asp:ListBox>
  </div>

      </td>
      </tr>
<tr>
            <td></td>
                <td></td>
      </tr>
<tr>
            <td  colspan="2" >
<SalesLogix:SlxGridView runat="server" ID="QFDataGrid" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="15" OnPageIndexChanging="QFDataGridpage_changing" EmptyTableRowText="<%$ resources: QFDataGrid.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="QFDataGrid_RowCommand"
 DataKeyNames="item.Id"
 AllowSorting="true" OnSorting="QFDataGrid_Sorting"  ShowSortIcon="true"  OnPreRender="QFDataGrid_PreRender" >
<Columns>
 <asp:CommandField ShowSelectButton="true"
  SelectText="<%$ resources: QFDataGrid.ffb3d1f0-1c87-4748-b834-8d9b1e7dce85.Text %>" ButtonType="link"
             >
          </asp:CommandField>
    <asp:BoundField DataField="item.LogLevel"
      HeaderText="<%$ resources: QFDataGrid.18495e8e-00bd-4496-94ab-96d39a4c4b9e.ColumnHeading %>"       SortExpression="item.LogLevel"    >
      </asp:BoundField>
    <asp:BoundField DataField="item.ResourceKind"
      HeaderText="<%$ resources: QFDataGrid.89dcce44-2f74-445a-ba72-a20ab3a471a2.ColumnHeading %>"       SortExpression="item.ResourceKind"    >
      </asp:BoundField>
    <asp:TemplateField   HeaderText="<%$ resources: QFDataGrid.20f7922d-eef3-4235-8e56-f2966e900b85.ColumnHeading %>"       SortExpression="item.CreateDate"  >
    <itemtemplate>
   <SalesLogix:DateTimePicker runat="server" ID="QFDataGridcol4"  DisplayMode="AsText" DateTimeValue='<%#  hqlDtsLogItems.getPropertyValue(Container.DataItem, "item.CreateDate")  %>'  CssClass=""  />
   </itemtemplate></asp:TemplateField>
    <asp:BoundField DataField="item.LogMessage"
      HeaderText="<%$ resources: QFDataGrid.7427f315-d496-4602-9b01-450964324f4b.ColumnHeading %>"       SortExpression="item.LogMessage"    >
      </asp:BoundField>
 </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">


protected void QFDataGridpage_changing(object sender, GridViewPageEventArgs e)
{
 QFDataGrid.PageIndex = e.NewPageIndex;
 QFDataGrid.DataBind();
}
protected void QFDataGrid_Sorting(object sender, GridViewSortEventArgs e) { }
protected void QFDataGrid_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        hqlDtsLogItems.SelectedIndex = rowIndex;
        object currentEntity = hqlDtsLogItems.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
        string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
            if (QFDataGrid.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in QFDataGrid.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        ViewState["datakeyfield"] = val.Key;
                        Guid instanceId = (Guid)val.Value;
                        hqlDtsLogItems.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
                        currentEntity = hqlDtsLogItems.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }
            }
        }
        else
        {
            foreach (DictionaryEntry val in QFDataGrid.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                    ViewState["datakeyfield"] = val.Key;
                }
            }
        }
        ViewState["selectedid"] = id;
    }
    QFDataGrid_refresh();
}
protected void QFDataGrid_PreRender(object sender, EventArgs e)
{
    if (ViewState["selectedid"] != null)
    {
        QFDataGrid.SelectedIndex = -1;
        string selectedId = ViewState["selectedid"].ToString();
        string datakeyfield = ViewState["datakeyfield"].ToString();
        foreach (GridViewRow row in QFDataGrid.Rows)
        {
            if (QFDataGrid.DataKeys[row.RowIndex].Values[datakeyfield].ToString() == selectedId)
            {
                QFDataGrid.SelectedIndex = row.RowIndex;
                break;
            }
        }
    }
}


    protected void QFDataGrid_refresh()
    {
        if (PageWorkItem != null) {
            Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
            if (refresher != null)
            {
                refresher.RefreshAll();
            }
            else
            {
                Response.Redirect(Request.Url.ToString());
            }
        }
    }

        </script>

      </td>
            </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="txtCallStack_lbl" AssociatedControlID="txtCallStack" runat="server" Text="<%$ resources: txtCallStack.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtCallStack" ReadOnly="true"  Rows="11" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea"  />
  </div>

      </td>
            </tr>
<tr>
            <td></td>
                <td></td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="LogItems_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="btnRefresh"
 ToolTip="<%$ resources: btnRefresh.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=refresh"  />
 
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=LogItems&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkLogItemsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="LogItems" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.ISyncJob); }
}

 private Sage.Platform.WebPortal.Binding.WebHqlListBindingSource _hqlDtsLogItems;
public Sage.Platform.WebPortal.Binding.WebHqlListBindingSource hqlDtsLogItems
{
    get
    {
        if (_hqlDtsLogItems == null)
        {
            _hqlDtsLogItems = new Sage.Platform.WebPortal.Binding.WebHqlListBindingSource();
            var selectFieldList = new System.Collections.Generic.List<Sage.Platform.WebPortal.Binding.HqlSelectField>();
    		    selectFieldList.Add(new Sage.Platform.WebPortal.Binding.HqlSelectField("item.Id", "item.Id"));						
        		    selectFieldList.Add(new Sage.Platform.WebPortal.Binding.HqlSelectField("item.LogLevel", "item.LogLevel"));						
        		    selectFieldList.Add(new Sage.Platform.WebPortal.Binding.HqlSelectField("item.ResourceKind", "item.ResourceKind"));						
        		    selectFieldList.Add(new Sage.Platform.WebPortal.Binding.HqlSelectField("item.CreateDate", "item.CreateDate"));						
        		    selectFieldList.Add(new Sage.Platform.WebPortal.Binding.HqlSelectField("item.LogMessage", "item.LogMessage"));						
        		    selectFieldList.Add(new Sage.Platform.WebPortal.Binding.HqlSelectField("item.CallStack", "item.CallStack"));						
        		    selectFieldList.Add(new Sage.Platform.WebPortal.Binding.HqlSelectField("item.EntityId", "item.EntityId"));						
                _hqlDtsLogItems.Select = selectFieldList;
            var parameterList = new System.Collections.Generic.List<Sage.Platform.WebPortal.Binding.HqlParameter>();
            parameterList.Add(new Sage.Platform.WebPortal.Binding.HqlParameter("jobId", "EntityId"));
            _hqlDtsLogItems.Parameters = parameterList;
            _hqlDtsLogItems.From = "SlxLogItem item";
            _hqlDtsLogItems.Where = "item.EntityId = :jobId";
            _hqlDtsLogItems.OrderBy = "item.LogLevel";
        }
        return _hqlDtsLogItems;
    }
}

void hqlDtsLogItems_OnCurrentEntitySet(object sender, EventArgs e)
{
    if (Visible)
    {
        if (BindingSource.Current != null)
        {
            hqlDtsLogItems.SourceObject = BindingSource.Current;
        }
        else
        {
            var entityContextService = PageWorkItem.Services.Get<Sage.Platform.Application.IEntityContextService>();
            if (entityContextService != null)
            {
                hqlDtsLogItems.SourceObject = entityContextService;
            }
        }
		
		
		
        _hqlDtsLogItems.BoundGrid = QFDataGrid;
    }
}
 

protected override void OnAddEntityBindings() {
             hqlDtsLogItems.Bindings.Add(new Sage.Platform.Mashups.Web.WebMashupBinding(QFDataGrid));
                     // txtCallStack.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtCallStackTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("item.CallStack", txtCallStack, "Text");
        hqlDtsLogItems.Bindings.Add(txtCallStackTextBinding);
    
     BindingSource.OnCurrentEntitySet += new EventHandler(hqlDtsLogItems_OnCurrentEntitySet);
    
    }
                            
protected void btnRefresh_ClickAction(object sender, EventArgs e) {
string where = hqlDtsLogItems.Where;
if (!String.IsNullOrEmpty(cboFilterLogType.Text))
{
    if (!String.IsNullOrEmpty(cboFilterResource.Text))
    {
        hqlDtsLogItems.Where = String.Format("item.LogLevel = '{0}' and item.ResourceKind = '{1}' and {2}",
                                             cboFilterLogType.SelectedValue, cboFilterResource.SelectedValue, where);
    }
    else
    {
        hqlDtsLogItems.Where = String.Format("item.LogLevel = '{0}' and {1}", cboFilterLogType.SelectedValue, where);
    }
}
else if (!String.IsNullOrEmpty(cboFilterResource.Text))
{
    hqlDtsLogItems.Where = String.Format("item.ResourceKind = '{0}' and {1}", cboFilterResource.SelectedValue, where);
}

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 btnRefresh.Click += new ImageClickEventHandler(btnRefresh_ClickAction);


}

protected override void OnFormBound()
{
if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
if (hqlDtsLogItems.Current != null) { hqlDtsLogItems.Bind(); }
 QFDataGrid.DataBind(); 
 RegisterBindingsWithClient(hqlDtsLogItems); 



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new LogItemsAdapter(this)); }
}

public class LogItemsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.ILogItems
{
    public LogItemsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.IListBoxControl _cboFilterLogType;
    public  Sage.Platform.Controls.IListBoxControl cboFilterLogType
    {
        get { return FindControl(ref _cboFilterLogType, "cboFilterLogType"); }
    }
    private Sage.Platform.Controls.IDataGridControl _QFDataGrid;
    public  Sage.Platform.Controls.IDataGridControl QFDataGrid
    {
        get { return FindControl(ref _QFDataGrid, "QFDataGrid"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtCallStack;
    public  Sage.Platform.Controls.ITextBoxControl txtCallStack
    {
        get { return FindControl(ref _txtCallStack, "txtCallStack"); }
    }
    private Sage.Platform.Controls.IListBoxControl _cboFilterResource;
    public  Sage.Platform.Controls.IListBoxControl cboFilterResource
    {
        get { return FindControl(ref _cboFilterResource, "cboFilterResource"); }
    }
    private Sage.Platform.Controls.IDataSourceControl _hqlDtsLogItems;
    public  Sage.Platform.Controls.IDataSourceControl hqlDtsLogItems
    {
        get { return FindControl(ref _hqlDtsLogItems, "hqlDtsLogItems"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnRefresh;
    public  Sage.Platform.Controls.IButtonControl btnRefresh
    {
        get { return FindControl(ref _btnRefresh, "btnRefresh"); }
    }

}

</script>

<script type="text/javascript">
</script>
