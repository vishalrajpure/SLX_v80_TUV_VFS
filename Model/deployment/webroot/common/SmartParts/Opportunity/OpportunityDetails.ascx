<%@ Control Language="C#" ClassName="OpportunityDetails" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="33%" />
            <col width="33%" />
            <col width="33%" />
     <tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtDescription_lbl" AssociatedControlID="txtDescription" runat="server" Text="<%$ resources: txtDescription.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtDescription"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueAccount_lbl" AssociatedControlID="lueAccount" runat="server" Text="<%$ resources: lueAccount.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lueAccount" ButtonToolTip="<%$ resources: lueAccount.ButtonToolTip %>" LookupEntityName="Account" LookupEntityTypeName="Sage.Entity.Interfaces.IAccount, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" EnableHyperLinking="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Address.City.PropertyHeader %>" PropertyName="Address.City" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Address.State.PropertyHeader %>" PropertyName="Address.State" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.MainPhone.PropertyHeader %>" PropertyName="MainPhone" PropertyType="" PropertyFormat="Phone" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Type.PropertyHeader %>" PropertyName="Type" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.SubType.PropertyHeader %>" PropertyName="SubType" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.AccountManager.UserInfo.UserName.PropertyHeader %>" PropertyName="AccountManager.UserInfo.UserName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Owner.OwnerDescription.PropertyHeader %>" PropertyName="Owner.OwnerDescription" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td rowspan="8"  >
<%@ Register tagPrefix="SalesLogix" tagName="wbrOpportunitySnapShot" src="~/SmartParts/Opportunity/OpportunitySnapShot.ascx" %>
<SalesLogix:wbrOpportunitySnapShot id="wbrOpportunitySnapShot" runat="server" OnInit="setwbrOpportunitySnapShotContext" ></SalesLogix:wbrOpportunitySnapShot>
<script runat="server" type="text/C#">
	protected void setwbrOpportunitySnapShotContext(object sender, EventArgs e)
	{
		Sage.Platform.WebPortal.SmartParts.SmartPart sp = wbrOpportunitySnapShot as Sage.Platform.WebPortal.SmartParts.SmartPart;
		if (sp != null)
		{
			sp.InitSmartPart(ParentWorkItem, PageWorkItem.Services.Get<Sage.Platform.Application.UI.Web.IPageWorkItemLocator>());
			sp.DialogService = DialogService;
			Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPart esp = sp as Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPart;
			if (esp != null)
			{
                esp.InitEntityBoundSmartPart(PageWorkItem.Services.Get<Sage.Platform.Application.IEntityContextService>());
			}
		}
	}
</script>
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="usrUser_lbl" AssociatedControlID="usrUser" runat="server" Text="<%$ resources: usrUser.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol"  > 
    <SalesLogix:SlxUserControl runat="server" ID="usrUser" ButtonToolTip="<%$ resources: usrUser.ButtonToolTip %>"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpBranch_lbl" AssociatedControlID="lkpBranch" runat="server" Text="<%$ resources: lkpBranch.Caption %>" ></asp:Label>
 </div>   
  <div    >
<SalesLogix:LookupControl runat="server" ID="lkpBranch" ReadOnly="true" EnableLookup="false" LookupEntityName="Branch" LookupEntityTypeName="Sage.Entity.Interfaces.IBranch, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="DropDownList" LookupBindingMode="String" DropDownDisplayProperty="BranchName"  >
<LookupProperties>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
            </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpEndCustomer_lbl" AssociatedControlID="lkpEndCustomer" runat="server" Text="<%$ resources: lkpEndCustomer.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lkpEndCustomer" LookupEntityName="Account" LookupEntityTypeName="Sage.Entity.Interfaces.IAccount, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupBindingMode="String"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpEndCustomer.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpEndCustomer.LookupProperties.Description.PropertyHeader %>" PropertyName="Description" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpEndCustomer.LookupProperties.Division.PropertyHeader %>" PropertyName="Division" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpEndCustomer.LookupProperties.Industry.PropertyHeader %>" PropertyName="Industry" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklOppType_lbl" AssociatedControlID="pklOppType" runat="server" Text="<%$ resources: pklOppType.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklOppType" ReadOnly="true" PickListName="TypeProduct" MustExistInList="false" MaxLength="64"  />
  </div>

      </td>
            </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtInspectionStartDate_lbl" AssociatedControlID="dtInspectionStartDate" runat="server" Text="<%$ resources: dtInspectionStartDate.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtInspectionStartDate" DisplayTime="false" />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="InspectionEndDate_lbl" AssociatedControlID="InspectionEndDate" runat="server" Text="<%$ resources: InspectionEndDate.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="InspectionEndDate" DisplayTime="false" />
  </div>

      </td>
            </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklFeeType_lbl" AssociatedControlID="pklFeeType" runat="server" Text="<%$ resources: pklFeeType.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklFeeType" PickListName="FeeType" MustExistInList="false" MaxLength="32"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="CustomerProjectNo_lbl" AssociatedControlID="CustomerProjectNo" runat="server" Text="<%$ resources: CustomerProjectNo.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="CustomerProjectNo"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
            </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="ReferenceNo_lbl" AssociatedControlID="ReferenceNo" runat="server" Text="<%$ resources: ReferenceNo.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="ReferenceNo"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtpEstimatedClose_lbl" AssociatedControlID="dtpEstimatedClose" runat="server" Text="<%$ resources: dtpEstimatedClose.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtpEstimatedClose" ButtonToolTip="<%$ resources: dtpEstimatedClose.ButtonToolTip %>" DisplayTime="false" Timeless="true" />
  </div>

      </td>
            </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklCloseProbability_lbl" AssociatedControlID="pklCloseProbability" runat="server" Text="<%$ resources: pklCloseProbability.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklCloseProbability" PickListName="Opportunity Probability" MustExistInList="false" NoneEditable="true"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklStatus_lbl" AssociatedControlID="pklStatus" runat="server" Text="<%$ resources: pklStatus.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklStatus" PickListName="Opportunity Status" AutoPostBack="true" NoneEditable="true"  />
  </div>

      </td>
            </tr>
<tr>
            <td  >
<div class="slxlabel  alignleft checkboxRight">

  <SalesLogix:SLXCheckBox runat="server" ID="chkAddToForecast"  Text="<%$ resources: chkAddToForecast.Caption %>"  CssClass=""
LabelPlacement="left"  />
</div>
      </td>
                <td></td>
            </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="txtComments_lbl" AssociatedControlID="txtComments" runat="server" Text="<%$ resources: txtComments.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtComments"  Rows="3" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea"  />
  </div>

      </td>
                      <td  >
 <asp:ImageButton runat="server" ID="btnGenerateQuatation"
 AlternateText="<%$ resources: btnGenerateQuatation.Caption %>"  ToolTip="<%$ resources: btnGenerateQuatation.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Literature_Item_New_32x32"  />
 
      </td>
      </tr>
<tr>
            <td rowspan="2"  >
<asp:Panel runat="server" ID="clIntegrationContract" CssClass="controlslist "
>
   <div class=" lbl alignleft">
   <asp:Label ID="lueERPApplication_lbl" AssociatedControlID="lueERPApplication" runat="server" Text="<%$ resources: lueERPApplication.Caption %>" ></asp:Label>
 </div>   
  <div    >
<SalesLogix:LookupControl runat="server" ID="lueERPApplication" ButtonToolTip="<%$ resources: lueERPApplication.ButtonToolTip %>" LookupEntityName="AppIdMapping" LookupEntityTypeName="Sage.Entity.Interfaces.IAppIdMapping, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="DropDownList" DropDownDisplayProperty="Name" InitializeLookup="true" AutoPostBack="true" AddEmptyListItem="false" DialogTitle="<%$ resources: lueERPApplication.LookupDialogTitle %>"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueERPApplication.LookupProperties.Name.PropertyHeader %>" PropertyName="Name" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
<SalesLogix:LookupPreFilter PropertyName="Enabled" PropertyType="System.Boolean" OperatorCode="=" Visible="False"
 FilterValue="True"
 ></SalesLogix:LookupPreFilter>
<SalesLogix:LookupPreFilter PropertyName="IsSystemEndPoint" PropertyType="System.Boolean" OperatorCode="!=" Visible="False"
 FilterValue="true"
 ></SalesLogix:LookupPreFilter>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

   <div class=" lbl alignleft">
   <asp:Label ID="luePriceList_lbl" AssociatedControlID="luePriceList" runat="server" Text="<%$ resources: luePriceList.Caption %>" ></asp:Label>
 </div>   
  <div    >
<SalesLogix:LookupControl runat="server" ID="luePriceList" ButtonToolTip="<%$ resources: luePriceList.ButtonToolTip %>" Enabled="false" LookupEntityName="SlxPriceList" LookupEntityTypeName="Sage.Entity.Interfaces.ISlxPriceList, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="DropDownList" SeedProperty="AppId" DropDownDisplayProperty="Name" InitializeLookup="true" DialogTitle="<%$ resources: luePriceList.LookupDialogTitle %>"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: luePriceList.LookupProperties.Name.PropertyHeader %>" PropertyName="Name" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
<SalesLogix:LookupPreFilter PropertyName="ActiveFlag" PropertyType="System.Boolean" OperatorCode="=" Visible="False"
 FilterValue="True"
 ></SalesLogix:LookupPreFilter>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

</asp:Panel>
      </td>
                <td></td>
                <td></td>
      </tr>
<tr>
                  <td></td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueReseller_lbl" AssociatedControlID="lueReseller" runat="server" Text="<%$ resources: lueReseller.Caption %>" Visible="false" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lueReseller" ButtonToolTip="<%$ resources: lueReseller.ButtonToolTip %>" LookupEntityName="Account" LookupEntityTypeName="Sage.Entity.Interfaces.IAccount, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" Visible="false"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReseller.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReseller.LookupProperties.Address.City.PropertyHeader %>" PropertyName="Address.City" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReseller.LookupProperties.Address.State.PropertyHeader %>" PropertyName="Address.State" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReseller.LookupProperties.MainPhone.PropertyHeader %>" PropertyName="MainPhone" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReseller.LookupProperties.Type.PropertyHeader %>" PropertyName="Type" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReseller.LookupProperties.SubType.PropertyHeader %>" PropertyName="SubType" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReseller.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReseller.LookupProperties.AccountManager.UserInfo.UserName.PropertyHeader %>" PropertyName="AccountManager.UserInfo.UserName" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueReseller.LookupProperties.Owner.OwnerDescription.PropertyHeader %>" PropertyName="Owner.OwnerDescription" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
<SalesLogix:LookupPreFilter PropertyName="SubType" PropertyType="System.String" OperatorCode="=" Visible="False"
 FilterValue="<%$ resources: lueReseller.LUPF.SubType %>"
 ></SalesLogix:LookupPreFilter>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td></td>
                <td></td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="OpportunityDetails_RTools" ToolbarLocation="right">
   <SalesLogix:GroupNavigator runat="server" ID="grnDetails" ></SalesLogix:GroupNavigator>
    <asp:ImageButton runat="server" ID="cmdSave"
 AlternateText="<%$ resources: cmdSave.Caption %>"  ToolTip="<%$ resources: cmdSave.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
   
    <asp:ImageButton runat="server" ID="cmdCopyOpportunity"
 AlternateText="<%$ resources: cmdCopyOpportunity.Caption %>"  ToolTip="<%$ resources: cmdCopyOpportunity.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Copy_16x16"  />
 
    <asp:ImageButton runat="server" ID="cmdReset"
 AlternateText="<%$ resources: cmdReset.Caption %>"  ToolTip="<%$ resources: cmdReset.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Reset_16x16"  />
 
    <asp:ImageButton runat="server" ID="cmdDelete"
 AlternateText="<%$ resources: cmdDelete.Caption %>"  ToolTip="<%$ resources: cmdDelete.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Delete_16x16" 
 />
 
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=OpportunityDetails&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkOpportunityDetailsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="OpportunityDetails" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IOpportunity); }
}

 

protected override void OnAddEntityBindings() {
                 // txtDescription.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtDescriptionTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Description", txtDescription, "Text");
        BindingSource.Bindings.Add(txtDescriptionTextBinding);
                    // lueAccount.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueAccountLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Account", lueAccount, "LookupResultValue");
        BindingSource.Bindings.Add(lueAccountLookupResultValueBinding);
                       // usrUser.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding usrUserLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AccountManager", usrUser, "LookupResultValue");
        BindingSource.Bindings.Add(usrUserLookupResultValueBinding);
                    // lkpBranch.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpBranchLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("BranchId", lkpBranch, "LookupResultValue");
        BindingSource.Bindings.Add(lkpBranchLookupResultValueBinding);
                    // lkpEndCustomer.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpEndCustomerLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("EndCustomer", lkpEndCustomer, "LookupResultValue");
        BindingSource.Bindings.Add(lkpEndCustomerLookupResultValueBinding);
                    // pklOppType.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklOppTypePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Type", pklOppType, "PickListValue");
        BindingSource.Bindings.Add(pklOppTypePickListValueBinding);
                    // dtInspectionStartDate.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtInspectionStartDateDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("InspectionStartDate", dtInspectionStartDate, "DateTimeValue");
        BindingSource.Bindings.Add(dtInspectionStartDateDateTimeValueBinding);
                    // InspectionEndDate.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding InspectionEndDateDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("InspectionEndDate", InspectionEndDate, "DateTimeValue");
        BindingSource.Bindings.Add(InspectionEndDateDateTimeValueBinding);
                    // pklFeeType.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklFeeTypePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("FeeType", pklFeeType, "PickListValue");
        BindingSource.Bindings.Add(pklFeeTypePickListValueBinding);
                    // CustomerProjectNo.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding CustomerProjectNoTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("CustomerProjectNo", CustomerProjectNo, "Text");
        BindingSource.Bindings.Add(CustomerProjectNoTextBinding);
                    // ReferenceNo.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding ReferenceNoTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReferenceNo", ReferenceNo, "Text");
        BindingSource.Bindings.Add(ReferenceNoTextBinding);
                    // dtpEstimatedClose.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtpEstimatedCloseDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("EstimatedClose", dtpEstimatedClose, "DateTimeValue", "", null);
        BindingSource.Bindings.Add(dtpEstimatedCloseDateTimeValueBinding);
                    // pklCloseProbability.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklCloseProbabilityPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("CloseProbability", pklCloseProbability, "PickListValue");
        BindingSource.Bindings.Add(pklCloseProbabilityPickListValueBinding);
                    // pklStatus.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklStatusPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Status", pklStatus, "PickListValue");
        BindingSource.Bindings.Add(pklStatusPickListValueBinding);
                    // chkAddToForecast.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkAddToForecastCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AddToForecast", chkAddToForecast, "Checked");
        BindingSource.Bindings.Add(chkAddToForecastCheckedBinding);
                    // txtComments.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtCommentsTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Notes", txtComments, "Text");
        BindingSource.Bindings.Add(txtCommentsTextBinding);
                          // lueERPApplication.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueERPApplicationLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("OperatingCompany", lueERPApplication, "LookupResultValue");
        BindingSource.Bindings.Add(lueERPApplicationLookupResultValueBinding);
                    // luePriceList.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding luePriceListLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("SlxPriceList", luePriceList, "LookupResultValue");
        BindingSource.Bindings.Add(luePriceListLookupResultValueBinding);
                 // luePriceList.SeedValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding luePriceListSeedValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("OperatingCompany.Id", luePriceList, "SeedValue");
        luePriceListSeedValueBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(luePriceListSeedValueBinding);
                    // lueReseller.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueResellerLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Reseller", lueReseller, "LookupResultValue");
        BindingSource.Bindings.Add(lueResellerLookupResultValueBinding);
    
   
             
      
      
      
             
      
      
      
                 
      
      
      
    }
                                                                                                                                                          
protected void pklStatus_ChangeAction(object sender, EventArgs e) {

                Sage.Entity.Interfaces.IOpportunity opportunity = BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
                opportunity.OnStatusChanged();
                string dialog = "";
                if (opportunity.StatusChangeWon())
                {
                dialog = "OpportunityClosedWon";
                }
                else if (opportunity.StatusChangeLost())
                {
                dialog = "OpportunityClosedLost";
                }
                if (!String.IsNullOrEmpty(dialog))
                {
                if (DialogService != null)
                {
                DialogService.SetSpecs(380, 600, dialog, "");
                DialogService.EntityType = typeof(Sage.Entity.Interfaces.IOpportunity);
                DialogService.ShowDialog();
                }
                }

              

}
protected void btnGenerateQuatation_ClickAction(object sender, EventArgs e) {
Sage.Platform.WebPortal.EntityPage page = (Sage.Platform.WebPortal.EntityPage)Page;
  
    Sage.Entity.Interfaces.IQuotation objQuotation = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IQuotation>();
    Sage.Platform.Data.IDataService service = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
    System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service.GetConnectionString());

    Sage.Entity.Interfaces.IOpportunity _entity = BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;

 
    
    
    
    if (_entity != null)
    {
        try
        {

            objQuotation.OPPORTUNITYID = page.EntityContext.EntityID.ToString();

            objQuotation.DESCRIPTION = page.EntityContext.Description.ToString();
            objQuotation.ACCOUNTID = _entity.Account.Id.ToString();
            if (_entity.Closed != null)
            {
                if ( _entity.Closed.ToString () == "T")
                {
                    objQuotation.CLOSED =true;
                }
                else
                {
                    objQuotation.CLOSED = false;
                }
                
            }
            if (!string.IsNullOrEmpty(_entity.Type))
            {
                objQuotation.TYPE = _entity.Type.ToString();
            }
            if (!string.IsNullOrEmpty(_entity.Stage))
            {
                objQuotation.STAGE = _entity.Stage.ToString();
            }


            if ((_entity.FeeType) != null)
            {
                objQuotation.FEETYPE = _entity.FeeType.ToString();
            }
            if ((_entity.InspectionStartDate) != null)
            {
                objQuotation.INSPECTIONSTARTDATE = _entity.InspectionStartDate;
            }
            if ((_entity.InspectionEndDate) != null)
            {
                objQuotation.INSPECTIONENDDATE = _entity.InspectionEndDate;
            }
            if ((_entity.BranchId) != null)
            {
                objQuotation.BRANCHID = _entity.BranchId.ToString();
            }
            if ((_entity.CustomerProjectNo) != null)
            {
                objQuotation.CUSTOMERPROJECTNO = _entity.CustomerProjectNo.ToString();
            }
            if ((_entity.ReferenceNo) != null)
            {
                objQuotation.REFERENCENO = _entity.ReferenceNo.ToString();
            }
            if ((_entity.EndCustomer) != null)
            {

                objQuotation.ENDCUSTOMER = _entity.EndCustomer.ToString();
            }
            if (!string.IsNullOrEmpty(_entity.SalesCycle))
            {
                objQuotation.SALESCYCLE = _entity.SalesCycle.ToString();
            }
            if ((_entity.CreateSource) != null)
            {
                objQuotation.CREATESOURCE = _entity.CreateSource.ToString();
            }


            if ((_entity.Summary) != null)
            {
                objQuotation.SUMMARY = _entity.Summary.ToString();
            }
            if ((_entity.Notes) != null)
            {
                objQuotation.NOTES = _entity.Notes.ToString();
            }
            if ((_entity.AccountManager) != null)
            {
                objQuotation.ACCOUNTMANAGERID = _entity.AccountManager.Id.ToString();
            }
            if ((_entity.RegionalManager) != null)
            {
                objQuotation.REGIONALMANAGERID = _entity.RegionalManager.ToString();
            }
            if ((_entity.DivisionalManager) != null)
            {
                objQuotation.DIVISIONALMANAGERID = _entity.DivisionalManager.ToString();
            }
            if ((_entity.Status) != null)
            {
                objQuotation.STATUS = _entity.Status.ToString();
            }
            if ((_entity.Reason) != null)
            {
                objQuotation.REASON = _entity.Reason.ToString();
            }
            if ((_entity.LeadSource) != null)
            {
                objQuotation.LEADSOURCEID = _entity.LeadSource.Id.ToString();
            }
            if ((_entity.Reseller) != null)
            {
                // objQuotation.RESELLERID = _entity.Reseller.ToString();
            }

            if ((_entity.SubType) != null)
            {
                objQuotation.SUBTYPE = _entity.SubType.ToString();
            }

            if ((_entity.ExchangeRateCode) != null)
            {
                objQuotation.EXCHANGERATECODE = _entity.ExchangeRateCode.ToString();
            }
            if ((_entity.AddToForecast) != null)
            {
                objQuotation.ADDTOFORECAST = _entity.AddToForecast;
            }

            if ((_entity.SalesPotential) != null)
            {
             objQuotation.SALESPOTENTIAL = Convert.ToDecimal(_entity.SalesPotential);
            }
            if ((_entity.CloseProbability) != null)
            {
                objQuotation.CLOSEPROBABILITY = Convert.ToInt16(_entity.CloseProbability);
            }
            if ((_entity.SalesAmount) != null)
            {
                 objQuotation.SALESAMOUNT = Convert.ToDecimal(_entity.SalesAmount);
            }
            if ((_entity.ActualAmount) != null)
            {
                objQuotation.ACTUALAMOUNT = Convert.ToDecimal(_entity.ActualAmount);
            }

            if ((_entity.ExchangeRate) != null)
            {
                objQuotation.EXCHANGERATE = Convert.ToDecimal(_entity.ExchangeRate);
            }

            //datesd

            if ((_entity.EstimatedClose) != null)
            {
                objQuotation.ESTIMATEDCLOSE = (_entity.EstimatedClose);
            }
            if ((_entity.ActualClose) != null)
            {
                objQuotation.ACTUALCLOSE = _entity.ActualClose;
            }
            if ((_entity.EstimatedCloseDateProbability) != null)
            {
                objQuotation.ESTCLOSEDATEPROBABILITY = Convert.ToInt16(_entity.EstimatedCloseDateProbability);

            }

            if ((_entity.ExchangeRateDate) != null)
            {
                objQuotation.EXCHANGERATEDATE = _entity.ExchangeRateDate;
            }


            if ((_entity.DateOpened) != null)
            {
                objQuotation.DATEOPENED = _entity.DateOpened;

            }
            if ((_entity.LastHistoryDate) != null)
            {
                objQuotation.LASTHISTORYDATE = _entity.LastHistoryDate;
            }

            // if ((_entity.Campaigns) != null)
            // {
            objQuotation.CAMPAIGNID = "0";// _entity.Campaigns.ToString();
            // }
           /* if ((_entity.ExchangeRateLocked ) != null)
				
            {
				
				 
               objQuotation.EXCHANGERATELOCKED = _entity.ExchangeRateLocked;
            }*/
            if ((_entity.LastHistoryBy) != null)
            {
                //objQuotation.LASTHISTORYBY = Convert.ToChar(_entity.LastHistoryBy.ToString());
            }
          /*  if ((_entity.OverrideSalesPotential) != null)
            {
             objQuotation.OVERRIDESALESPOTENTIAL = _entity.OverrideSalesPotential;
            }
			*/
            // if (( _entity.Products )!=null)
            // {
            objQuotation.PRODUCTID = "0";// _entity.Products.ToString();
            // }




            string tbranchid = "0";
            if ((_entity.BranchId) != null)
            {
                tbranchid = _entity.BranchId.ToString();
            }

            string tBranchcode = "";
            string tOppoType = "";
            if (!string.IsNullOrEmpty(tbranchid))
            {
                string Query2 = " select Branchcode from branch where branchid='" + tbranchid + "'";
                System.Data.OleDb.OleDbDataAdapter dataAdapterObj2 = new System.Data.OleDb.OleDbDataAdapter(Query2, conObj);
                System.Data.DataTable dt2 = new System.Data.DataTable();

                dataAdapterObj2.Fill(dt2);
                if (dt2.Rows.Count > 0)
                {
                    tBranchcode = dt2.Rows[0][0].ToString();
                }
            }
            string Query = "select yearname,LASTNUMBERUSED  from  sysdba.codemaster where   tablename='Quotation' and YEARname =YEAR(getdate()) ";

            System.Data.OleDb.OleDbDataAdapter dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(Query, conObj);
            System.Data.DataTable dt = new System.Data.DataTable();

            dataAdapterObj.Fill(dt);



            string tQuotationcode = "";
            int tLastNumber = 0;
            if (!string.IsNullOrEmpty(_entity.Type))
            {
                tOppoType = _entity.Type.ToString();
            }

            if (dt.Rows.Count > 0)
            {
                if (String.IsNullOrEmpty(objQuotation.QuotationNumber))
                {
                    tLastNumber = Convert.ToInt32(dt.Rows[0][1].ToString()) + 1;
                    tQuotationcode = tBranchcode + "/" + tOppoType + "/" + dt.Rows[0][0].ToString() + "/" + tLastNumber;
                    objQuotation.QuotationNumber = tQuotationcode;

                }
            }
            else
            {
                //not exist record for year insert new record 

                Sage.Entity.Interfaces.ICodeMaster objcodemaster = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.ICodeMaster>();

                objcodemaster.LastNumberUsed = "0";
                objcodemaster.YearName = Convert.ToString(DateTime.Today.Year);
                objcodemaster.TableName = "Quotation";
                objcodemaster.Save();
                string Query1 = "select yearname,LASTNUMBERUSED  from  sysdba.codemaster where   tablename='Quotation' and   YEARName =YEAR(getdate())";

                System.Data.OleDb.OleDbDataAdapter dataAdapterObj1 = new System.Data.OleDb.OleDbDataAdapter(Query1, conObj);
                System.Data.DataTable dt1 = new System.Data.DataTable();
                dataAdapterObj1.Fill(dt1);
                tLastNumber = Convert.ToInt32(dt1.Rows[0][1].ToString()) + 1;
                tQuotationcode = tBranchcode + "/" + tOppoType + "/" + dt1.Rows[0][0].ToString() + "/" + tLastNumber;
                objQuotation.QuotationNumber = tQuotationcode;

            }
			
			objQuotation.Owner = _entity.Owner;

            objQuotation.Save();

            //*************************  Quotation product *******************

            Sage.Entity.Interfaces.IQuotationProduct objQuotationProduct = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IQuotationProduct>();

            string QryProduct = "select  * from OPPORTUNITY_PRODUCT where opportunityid ='" + page.EntityContext.EntityID.ToString() + "'";

            System.Data.OleDb.OleDbDataAdapter da = new System.Data.OleDb.OleDbDataAdapter(QryProduct, conObj);
            System.Data.DataTable dtproduct = new System.Data.DataTable();
            da.Fill(dtproduct);
            if (dtproduct.Rows.Count > 0)
            {

                for (int i = 0; i <= dtproduct.Rows.Count - 1; i++)
                {

                    //'objQuotationProduct.PRODUCTID = !string.IsNullOrEmpty(dtproduct.Rows[i][2].ToString()) ? dtproduct.Rows[i][2].ToString() : string.Empty;

                    objQuotationProduct.QuotationId = objQuotation.Id.ToString();
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][2].ToString()))
                    {
                        objQuotationProduct.PRODUCTID = dtproduct.Rows[i][2].ToString();
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][3].ToString()))
                    {
                        objQuotationProduct.QUANTITY = Convert.ToDouble(dtproduct.Rows[i][3].ToString());
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][4].ToString()))
                    {
                        objQuotationProduct.DISCOUNT = Convert.ToDecimal(dtproduct.Rows[i][4].ToString());
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][5].ToString()))
                    {

                        objQuotationProduct.PRICE = Convert.ToDecimal(dtproduct.Rows[i][5].ToString());
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][6].ToString()))
                    {
                        objQuotationProduct.NOTES = dtproduct.Rows[i][6].ToString();
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][9].ToString()))
                    {
                        objQuotationProduct.EXTENDEDPRICE = Convert.ToDecimal(dtproduct.Rows[i][9].ToString());
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][10].ToString()))
                    {
                        objQuotationProduct.STATUS = dtproduct.Rows[i][10].ToString();
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][11].ToString()))
                    {
                        objQuotationProduct.CALCPRICE = Convert.ToDecimal(dtproduct.Rows[i][11].ToString());
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][12].ToString()))
                    {
                        objQuotationProduct.UNIT = dtproduct.Rows[i][12].ToString();
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][13].ToString()))
                    {
                        objQuotationProduct.PROGRAM = dtproduct.Rows[i][13].ToString();
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][14].ToString()))
                    {
                        objQuotationProduct.PRICEEFFDATE = Convert.ToDateTime(dtproduct.Rows[i][14].ToString());
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][15].ToString()))
                    {
                        objQuotationProduct.PRICEADJUSTED = Convert.ToBoolean(dtproduct.Rows[i][15].ToString());
                    }



                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][16].ToString()))
                    {
                        objQuotationProduct.ESTIMATEDCLOSE = Convert.ToDateTime(dtproduct.Rows[i][16].ToString());
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][17].ToString()))
                    {
                        objQuotationProduct.ACTUALCLOSE = Convert.ToDateTime(dtproduct.Rows[i][17].ToString());
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][18].ToString()))
                    {
                        objQuotationProduct.CLOSEPROBABILITY = Convert.ToDecimal(dtproduct.Rows[i][18].ToString());
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][21].ToString()))
                    {
                        objQuotationProduct.SORT = Convert.ToInt16(dtproduct.Rows[i][19].ToString());
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][22].ToString()))
                    {
                        objQuotationProduct.CREATESOURCE = dtproduct.Rows[i][22].ToString();
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][23].ToString()))
                    {
                        objQuotationProduct.INSPECTIONTYPE = dtproduct.Rows[i][23].ToString();
                    }
                    if (!string.IsNullOrEmpty(dtproduct.Rows[i][24].ToString()))
                    {
                        objQuotationProduct.MANDAYREQUIRED = Convert.ToInt32(dtproduct.Rows[i][24].ToString());
                    }
                    objQuotationProduct.Save();

                }

            }

            
            //'*********** quotation contact
           


            Sage.Entity.Interfaces.IQuotationContact objQuotationcontact = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IQuotationContact>();

            string Qrycontact = "select  * from OPPORTUNITY_CONTACT where opportunityid ='" + page.EntityContext.EntityID.ToString() + "'";

            System.Data.OleDb.OleDbDataAdapter dacontact = new System.Data.OleDb.OleDbDataAdapter(Qrycontact, conObj);
            System.Data.DataTable dtcontact = new System.Data.DataTable();
            dacontact.Fill(dtcontact);
            if (dtcontact.Rows.Count > 0)
            {

                for (int i = 0; i <= dtcontact.Rows.Count - 1; i++)
                {

                    //'objQuotationProduct.PRODUCTID = !string.IsNullOrEmpty(dtproduct.Rows[i][2].ToString()) ? dtproduct.Rows[i][2].ToString() : string.Empty;

                    
					objQuotationcontact.QuotationId = objQuotation.Id.ToString();
                   
					
					if (!string.IsNullOrEmpty(dtcontact.Rows[i][1].ToString()))
                    {
                        objQuotationcontact.CONTACTID  = dtcontact.Rows[i][1].ToString();
                    }
                    if (!string.IsNullOrEmpty(dtcontact.Rows[i][3].ToString()))
                    {
                        if (dtcontact.Rows[i][3].ToString() == "T")
                        {
                            objQuotationcontact.ISPRIMARY = true;
                        }
                        else
                        {
                            objQuotationcontact.ISPRIMARY = false;
                        }
                            
                              
                    }
                    
                    if (!string.IsNullOrEmpty(dtcontact.Rows[i][4].ToString()))
                    {
                        objQuotationcontact.Influence  = dtcontact.Rows[i][4].ToString();
                    }
                    if (!string.IsNullOrEmpty(dtcontact.Rows[i][5].ToString()))
                    {
                        objQuotationcontact.Issues  = dtcontact.Rows[i][5].ToString();
                    }

                    if (!string.IsNullOrEmpty(dtcontact.Rows[i][8].ToString()))
                    {
                        objQuotationcontact.CompetitorId = dtcontact.Rows[i][8].ToString();
                    }
                    if (!string.IsNullOrEmpty(dtcontact.Rows[i][9].ToString()))
                    {
                        objQuotationcontact.Strategy = dtcontact.Rows[i][9].ToString();
                    }
                    if (!string.IsNullOrEmpty(dtcontact.Rows[i][10].ToString()))
                    {
                        objQuotationcontact.Standing = dtcontact.Rows[i][10].ToString();
                    }
                    if (!string.IsNullOrEmpty(dtcontact.Rows[i][11].ToString()))
                    {
                        objQuotationcontact.PersonalBenifits = dtcontact.Rows[i][11].ToString();
                    }
                                           

                    objQuotationcontact.Save();
                }
            }


            //'****************** quotation scope of  work ****



            Sage.Entity.Interfaces.IQuotationScopeOfWork objQuotationscope = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IQuotationScopeOfWork>();

            string Qryscope = "select  * from OPPORTUNITYSCOPEOFWORK where opportunityid ='" + page.EntityContext.EntityID.ToString() + "'";

            System.Data.OleDb.OleDbDataAdapter dascope = new System.Data.OleDb.OleDbDataAdapter(Qryscope, conObj);
            System.Data.DataTable dtscope = new System.Data.DataTable();
            dascope.Fill(dtscope);
            if (dtscope.Rows.Count > 0)
            {

                for (int i = 0; i <= dtscope.Rows.Count - 1; i++)
                {

                    //'objQuotationProduct.PRODUCTID = !string.IsNullOrEmpty(dtproduct.Rows[i][2].ToString()) ? dtproduct.Rows[i][2].ToString() : string.Empty;

                    objQuotationscope.QuotationId = objQuotation.Id.ToString();
                    if (!string.IsNullOrEmpty(dtscope.Rows[i][6].ToString()))
                    {
                        objQuotationscope.ScopeName = dtscope.Rows[i][6].ToString();
                    }
                    if (!string.IsNullOrEmpty(dtscope.Rows[i][7].ToString()))
                    {
                        objQuotationscope.Description = dtscope.Rows[i][7].ToString();
                    }

                    objQuotationscope.Save();
                }
            }

            //***** fee structure *** OPPORTUNITYFEESTRUCTURE

            Sage.Entity.Interfaces.IQuotationFeeStructure objQuotationfee = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IQuotationFeeStructure>();

            string Qryfee = "select  * from OPPORTUNITYFEESTRUCTURE where opportunityid ='" + page.EntityContext.EntityID.ToString() + "'";

            System.Data.OleDb.OleDbDataAdapter dafee = new System.Data.OleDb.OleDbDataAdapter(Qryfee, conObj);
            System.Data.DataTable dtfee = new System.Data.DataTable();
            dafee.Fill(dtfee);
            if (dtfee.Rows.Count > 0)
            {

                for (int i = 0; i <= dtfee.Rows.Count - 1; i++)
                {

                    //'objQuotationProduct.PRODUCTID = !string.IsNullOrEmpty(dtproduct.Rows[i][2].ToString()) ? dtproduct.Rows[i][2].ToString() : string.Empty;

                    objQuotationfee.QuotationId = objQuotation.Id.ToString();
                    if (!string.IsNullOrEmpty(dtfee.Rows[i][6].ToString()))
                    {
                        objQuotationfee.Description  = dtfee.Rows[i][6].ToString();
                    }

                    objQuotationfee.Save();
                }
            }

            //*****  validity

            Sage.Entity.Interfaces.IQuotationValidity objQuotationvalidity = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IQuotationValidity>();

            string Qryvalidity = "select  * from OPPORTUNITYVALIDITY where opportunityid ='" + page.EntityContext.EntityID.ToString() + "'";

            System.Data.OleDb.OleDbDataAdapter davalidity = new System.Data.OleDb.OleDbDataAdapter(Qryvalidity, conObj);
            System.Data.DataTable dtvalidity = new System.Data.DataTable();
            davalidity.Fill(dtvalidity);
            if (dtvalidity.Rows.Count > 0)
            {

                for (int i = 0; i <= dtvalidity.Rows.Count - 1; i++)
                {

                    //'objQuotationProduct.PRODUCTID = !string.IsNullOrEmpty(dtproduct.Rows[i][2].ToString()) ? dtproduct.Rows[i][2].ToString() : string.Empty;

                    objQuotationvalidity.QuotationId = objQuotation.Id.ToString();
                    if (!string.IsNullOrEmpty(dtvalidity.Rows[i][6].ToString()))
                    {
                        objQuotationvalidity.Description = dtvalidity.Rows[i][6].ToString();
                    }

                    objQuotationvalidity.Save();
                }
            }
            //**** payment terms


            Sage.Entity.Interfaces.IQuotationPaymentTerm objQuotationpayment = Sage.Platform.EntityFactory.Create<Sage.Entity.Interfaces.IQuotationPaymentTerm>();

            string Qrypayment = "select  * from OPPORTUNITYPAYMENTTERMS where opportunityid ='" + page.EntityContext.EntityID.ToString() + "'";

            System.Data.OleDb.OleDbDataAdapter dapayment = new System.Data.OleDb.OleDbDataAdapter(Qrypayment, conObj);
            System.Data.DataTable dtpayment = new System.Data.DataTable();
            dapayment.Fill(dtpayment);
            if (dtpayment.Rows.Count > 0)
            {

                for (int i = 0; i <= dtpayment.Rows.Count - 1; i++)
                {

                 

                    objQuotationpayment.QuotationId = objQuotation.Id.ToString();
                    if (!string.IsNullOrEmpty(dtpayment.Rows[i][6].ToString()))
                    {
                        objQuotationpayment.Description = dtpayment.Rows[i][6].ToString();
                    }

                    objQuotationpayment.Save();
                }
            }


            string tno = "0";
            if (!string.IsNullOrEmpty(objQuotation.QuotationNumber.ToString()))
            {
                tno = objQuotation.QuotationNumber.ToString();
                string[] tno1 = tno.Split('/');

                tno = tno1[3];

                System.Data.OleDb.OleDbConnection conObj1 = new System.Data.OleDb.OleDbConnection(service.GetConnectionString());
                conObj1.Open();
                string query1 = "Update sysdba.codemaster set LASTNUMBERUSED ='" + tno + "' where tablename='Quotation' and  yearname=YEAR(getdate())";
                System.Data.OleDb.OleDbCommand cmd = new System.Data.OleDb.OleDbCommand(query1, conObj1);
                cmd.ExecuteNonQuery();

            }


            Response.Redirect(string.Format("Quotation.aspx?entityId=" + objQuotation.Id.ToString(), "&modeid=Detail"));
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            conObj.Dispose ();
        }

  }

}
protected void lueERPApplication_ChangeAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.IOpportunity opportunity = BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
if (opportunity.OperatingCompany != null)
{
	luePriceList.SeedValue = opportunity.OperatingCompany.Id.ToString();
	luePriceList.ResetDropDownListItems();
}
luePriceList.Enabled = (opportunity.OperatingCompany != null);
  Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
    if (refresher != null) {
      refresher.RefreshAll();
    }
    else {  
      Response.Redirect(Request.Url.ToString());
    }

}
protected void cmdSave_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.IOpportunity _entity = BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
  if (_entity != null)
  {
    object _parent = GetParentEntity();
    if (DialogService.ChildInsertInfo != null)
    {
        if (_parent != null)
        {
            if (DialogService.ChildInsertInfo.ParentReferenceProperty != null)
            {
                DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
            }
        }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
    if (page != null)
    {
        if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
        {
            shouldSave = false;
        }
    }

    if(shouldSave)
    {
       _entity.Save();
    }

    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null)
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }
  }

  
}
protected void cmdCopyOpportunity_ClickAction(object sender, EventArgs e) {
      Response.Redirect(string.Format("InsertOpportunity.aspx?modeid=Insert&copyopportunity=true&entityId={0}", (BindingSource.Current as Sage.Platform.ComponentModel.IComponentReference).Id));
   
}
protected void cmdReset_ClickAction(object sender, EventArgs e) {
  
}
protected void cmdDelete_ClickAction(object sender, EventArgs e) {
  Sage.Platform.Orm.Interfaces.IPersistentEntity persistentEntity = this.BindingSource.Current as Sage.Platform.Orm.Interfaces.IPersistentEntity;
  if (persistentEntity != null) {
    persistentEntity.Delete();
  }

          cmdDelete_ClickActionBRC(sender, e);
    
  
}
protected void cmdDelete_ClickActionBRC(object sender, EventArgs e) {
      Response.Redirect("Opportunity.aspx");
  
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 pklStatus.PickListValueChanged += new EventHandler(pklStatus_ChangeAction);
btnGenerateQuatation.Click += new ImageClickEventHandler(btnGenerateQuatation_ClickAction);
lueERPApplication.LookupResultValueChanged += new EventHandler(lueERPApplication_ChangeAction);
if (RoleSecurityService != null)
{
if (RoleSecurityService.HasAccess("ENTITIES/OPPORTUNITY/EDIT"))
{
cmdSave.Click += new ImageClickEventHandler(cmdSave_ClickAction);
}
}
if (RoleSecurityService != null)
{
if (RoleSecurityService.HasAccess("ENTITIES/OPPORTUNITY/ADD"))
{
cmdCopyOpportunity.Click += new ImageClickEventHandler(cmdCopyOpportunity_ClickAction);
}
}
cmdReset.Click += new ImageClickEventHandler(cmdReset_ClickAction);
if (RoleSecurityService != null)
{
if (RoleSecurityService.HasAccess("ENTITIES/OPPORTUNITY/DELETE"))
{
cmdDelete.Click += new ImageClickEventHandler(cmdDelete_ClickAction);
}
}


}

protected void quickformload0(object sender, EventArgs e) {
lueReseller.SeedValue = GetLocalResourceObject("Reseller_rsc").ToString();

}
protected void quickformload1(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("OpportunityDetails.SetupIntegrationContract", methodArgs);

}
protected void quickformload2(object sender, EventArgs e) {

Sage.Entity.Interfaces.IOpportunity objopp = this.BindingSource.Current as  Sage.Entity.Interfaces.IOpportunity ;

if (objopp.Status == "Closed - Won")
{
	btnGenerateQuatation.Enabled =true ;
}
else
{
	btnGenerateQuatation.Enabled =true ;
}


}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);
quickformload2(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ClientBindingMgr.RegisterSaveButton(cmdSave);

cmdDelete.OnClientClick = string.Format("return confirm('{0}');", Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("cmdDelete.ActionConfirmationMessage").ToString()));

if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
if (!RoleSecurityService.HasAccess("ENTITIES/OPPORTUNITY/EDIT"))
{
cmdSave.Visible = false;
}
if (!RoleSecurityService.HasAccess("ENTITIES/OPPORTUNITY/ADD"))
{
cmdCopyOpportunity.Visible = false;
}
if (!RoleSecurityService.HasAccess("ENTITIES/OPPORTUNITY/DELETE"))
{
cmdDelete.Visible = false;
}
if (ClientBindingMgr != null) { ClientBindingMgr.RegisterResetButton(cmdReset); }
quickformload1(this, EventArgs.Empty);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new OpportunityDetailsAdapter(this)); }
}

public class OpportunityDetailsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IOpportunityDetails
{
    public OpportunityDetailsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.ITextBoxControl _txtDescription;
    public  Sage.Platform.Controls.ITextBoxControl txtDescription
    {
        get { return FindControl(ref _txtDescription, "txtDescription"); }
    }
    private Sage.Platform.Controls.IUserControl _usrUser;
    public  Sage.Platform.Controls.IUserControl usrUser
    {
        get { return FindControl(ref _usrUser, "usrUser"); }
    }
    private Sage.Platform.Controls.ILookupControl _lkpEndCustomer;
    public  Sage.Platform.Controls.ILookupControl lkpEndCustomer
    {
        get { return FindControl(ref _lkpEndCustomer, "lkpEndCustomer"); }
    }
    private Sage.Platform.Controls.IDateTimePickerControl _dtInspectionStartDate;
    public  Sage.Platform.Controls.IDateTimePickerControl dtInspectionStartDate
    {
        get { return FindControl(ref _dtInspectionStartDate, "dtInspectionStartDate"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklFeeType;
    public  Sage.Platform.Controls.IPickListControl pklFeeType
    {
        get { return FindControl(ref _pklFeeType, "pklFeeType"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _ReferenceNo;
    public  Sage.Platform.Controls.ITextBoxControl ReferenceNo
    {
        get { return FindControl(ref _ReferenceNo, "ReferenceNo"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklCloseProbability;
    public  Sage.Platform.Controls.IPickListControl pklCloseProbability
    {
        get { return FindControl(ref _pklCloseProbability, "pklCloseProbability"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkAddToForecast;
    public  Sage.Platform.Controls.ICheckBoxControl chkAddToForecast
    {
        get { return FindControl(ref _chkAddToForecast, "chkAddToForecast"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtComments;
    public  Sage.Platform.Controls.ITextBoxControl txtComments
    {
        get { return FindControl(ref _txtComments, "txtComments"); }
    }
    private Sage.Platform.Controls.IControlsListControl _clIntegrationContract;
    public  Sage.Platform.Controls.IControlsListControl clIntegrationContract
    {
        get { return FindControl(ref _clIntegrationContract, "clIntegrationContract"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueERPApplication;
    public  Sage.Platform.Controls.ILookupControl lueERPApplication
    {
        get { return FindControl(ref _lueERPApplication, "lueERPApplication"); }
    }
    private Sage.Platform.Controls.ILookupControl _luePriceList;
    public  Sage.Platform.Controls.ILookupControl luePriceList
    {
        get { return FindControl(ref _luePriceList, "luePriceList"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueReseller;
    public  Sage.Platform.Controls.ILookupControl lueReseller
    {
        get { return FindControl(ref _lueReseller, "lueReseller"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueAccount;
    public  Sage.Platform.Controls.ILookupControl lueAccount
    {
        get { return FindControl(ref _lueAccount, "lueAccount"); }
    }
    private Sage.Platform.Controls.ILookupControl _lkpBranch;
    public  Sage.Platform.Controls.ILookupControl lkpBranch
    {
        get { return FindControl(ref _lkpBranch, "lkpBranch"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklOppType;
    public  Sage.Platform.Controls.IPickListControl pklOppType
    {
        get { return FindControl(ref _pklOppType, "pklOppType"); }
    }
    private Sage.Platform.Controls.IDateTimePickerControl _InspectionEndDate;
    public  Sage.Platform.Controls.IDateTimePickerControl InspectionEndDate
    {
        get { return FindControl(ref _InspectionEndDate, "InspectionEndDate"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _CustomerProjectNo;
    public  Sage.Platform.Controls.ITextBoxControl CustomerProjectNo
    {
        get { return FindControl(ref _CustomerProjectNo, "CustomerProjectNo"); }
    }
    private Sage.Platform.Controls.IDateTimePickerControl _dtpEstimatedClose;
    public  Sage.Platform.Controls.IDateTimePickerControl dtpEstimatedClose
    {
        get { return FindControl(ref _dtpEstimatedClose, "dtpEstimatedClose"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklStatus;
    public  Sage.Platform.Controls.IPickListControl pklStatus
    {
        get { return FindControl(ref _pklStatus, "pklStatus"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnGenerateQuatation;
    public  Sage.Platform.Controls.IButtonControl btnGenerateQuatation
    {
        get { return FindControl(ref _btnGenerateQuatation, "btnGenerateQuatation"); }
    }
    private Sage.Platform.Controls.IGroupNavigatorControl _grnDetails;
    public  Sage.Platform.Controls.IGroupNavigatorControl grnDetails
    {
        get { return FindControl(ref _grnDetails, "grnDetails"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdSave;
    public  Sage.Platform.Controls.IButtonControl cmdSave
    {
        get { return FindControl(ref _cmdSave, "cmdSave"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdCopyOpportunity;
    public  Sage.Platform.Controls.IButtonControl cmdCopyOpportunity
    {
        get { return FindControl(ref _cmdCopyOpportunity, "cmdCopyOpportunity"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdReset;
    public  Sage.Platform.Controls.IButtonControl cmdReset
    {
        get { return FindControl(ref _cmdReset, "cmdReset"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdDelete;
    public  Sage.Platform.Controls.IButtonControl cmdDelete
    {
        get { return FindControl(ref _cmdDelete, "cmdDelete"); }
    }

    public  void SetupIntegrationContract(System.EventArgs e)
    {
        Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
        Object[] methodArgs = new Object[] { this, e };
        lib.Execute("OpportunityDetails.SetupIntegrationContract", methodArgs);
    }
}

</script>

<script type="text/javascript">
</script>
