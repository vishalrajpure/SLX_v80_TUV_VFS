<%@ Control Language="C#" ClassName="InsertOpportunity" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="25%" />
            <col width="25%" />
     <tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtDescription_lbl" AssociatedControlID="txtDescription" runat="server" Text="<%$ resources: txtDescription.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtDescription"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklStatus_lbl" AssociatedControlID="pklStatus" runat="server" Text="<%$ resources: pklStatus.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklStatus" PickListName="Opportunity Status" NoneEditable="true"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueAccount_lbl" AssociatedControlID="lueAccount" runat="server" Text="<%$ resources: lueAccount.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lueAccount" ButtonToolTip="<%$ resources: lueAccount.ButtonToolTip %>" LookupEntityName="Account" LookupEntityTypeName="Sage.SalesLogix.Entities.Account, Sage.SalesLogix.Entities" AutoPostBack="true" Required="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Address.City.PropertyHeader %>" PropertyName="Address.City" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Address.State.PropertyHeader %>" PropertyName="Address.State" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.MainPhone.PropertyHeader %>" PropertyName="MainPhone" PropertyType="System.String" PropertyFormat="Phone" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Type.PropertyHeader %>" PropertyName="Type" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.SubType.PropertyHeader %>" PropertyName="SubType" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.AccountManager.UserInfo.UserName.PropertyHeader %>" PropertyName="AccountManager.UserInfo.UserName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueAccount.LookupProperties.Owner.OwnerDescription.PropertyHeader %>" PropertyName="Owner.OwnerDescription" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklType_lbl" AssociatedControlID="pklType" runat="server" Text="<%$ resources: pklType.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklType" PickListName="TypeProduct" NoneEditable="true" AlphaSort="true" Required="true"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="usrUser_lbl" AssociatedControlID="usrUser" runat="server" Text="<%$ resources: usrUser.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol"  > 
    <SalesLogix:SlxUserControl runat="server" ID="usrUser" ButtonToolTip="<%$ resources: usrUser.ButtonToolTip %>"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueLeadSource_lbl" AssociatedControlID="lueLeadSource" runat="server" Text="<%$ resources: lueLeadSource.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lueLeadSource" ButtonToolTip="<%$ resources: lueLeadSource.ButtonToolTip %>" LookupEntityName="LeadSource" LookupEntityTypeName="Sage.SalesLogix.Entities.LeadSource, Sage.SalesLogix.Entities"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueLeadSource.LookupProperties.Type.PropertyHeader %>" PropertyName="Type" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueLeadSource.LookupProperties.Description.PropertyHeader %>" PropertyName="Description" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueLeadSource.LookupProperties.AbbrevDescription.PropertyHeader %>" PropertyName="AbbrevDescription" PropertyType="" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueLeadSource.LookupProperties.Status.PropertyHeader %>" PropertyName="Status" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
<SalesLogix:LookupPreFilter PropertyName="Status" PropertyType="System.String" OperatorCode="=" Visible="False"
 FilterValue="<%$ resources: lueLeadSource.LUPF.Status %>"
 ></SalesLogix:LookupPreFilter>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpBranch_lbl" AssociatedControlID="lkpBranch" runat="server" Text="<%$ resources: lkpBranch.Caption %>" ></asp:Label>
 </div>   
  <div    >
<SalesLogix:LookupControl runat="server" ID="lkpBranch" ReadOnly="true" EnableLookup="false" LookupEntityName="Branch" LookupEntityTypeName="Sage.Entity.Interfaces.IBranch, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="DropDownList" LookupBindingMode="String" DropDownDisplayProperty="BranchName" Required="true"  >
<LookupProperties>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpEndCustomer_lbl" AssociatedControlID="lkpEndCustomer" runat="server" Text="<%$ resources: lkpEndCustomer.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lkpEndCustomer" LookupEntityName="Account" LookupEntityTypeName="Sage.Entity.Interfaces.IAccount, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupBindingMode="String"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpEndCustomer.LookupProperties.AccountName.PropertyHeader %>" PropertyName="AccountName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpEndCustomer.LookupProperties.Description.PropertyHeader %>" PropertyName="Description" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpEndCustomer.LookupProperties.Division.PropertyHeader %>" PropertyName="Division" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpEndCustomer.LookupProperties.Industry.PropertyHeader %>" PropertyName="Industry" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklFeeType_lbl" AssociatedControlID="pklFeeType" runat="server" Text="<%$ resources: pklFeeType.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklFeeType" PickListName="FeeType" MustExistInList="false" MaxLength="32"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtInspectionStartDate_lbl" AssociatedControlID="dtInspectionStartDate" runat="server" Text="<%$ resources: dtInspectionStartDate.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtInspectionStartDate" DisplayTime="false" />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtInspectionEndDate_lbl" AssociatedControlID="dtInspectionEndDate" runat="server" Text="<%$ resources: dtInspectionEndDate.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtInspectionEndDate" DisplayTime="false" />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="CustomerProjectNo_lbl" AssociatedControlID="CustomerProjectNo" runat="server" Text="<%$ resources: CustomerProjectNo.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="CustomerProjectNo"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="ReferenceNo_lbl" AssociatedControlID="ReferenceNo" runat="server" Text="<%$ resources: ReferenceNo.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="ReferenceNo"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtpEstimatedClose_lbl" AssociatedControlID="dtpEstimatedClose" runat="server" Text="<%$ resources: dtpEstimatedClose.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtpEstimatedClose" ButtonToolTip="<%$ resources: dtpEstimatedClose.ButtonToolTip %>" DisplayTime="false" Timeless="true" />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklCloseProbability_lbl" AssociatedControlID="pklCloseProbability" runat="server" Text="<%$ resources: pklCloseProbability.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklCloseProbability" PickListName="Opportunity Probability" MustExistInList="false" NoneEditable="true"  />
  </div>

      </td>
                <td></td>
      </tr>
<tr>
            <td rowspan="2"  >
<asp:Panel runat="server" ID="clIntegrationContract" CssClass="controlslist "
>
   <div class=" lbl alignleft">
   <asp:Label ID="lueERPApplication_lbl" AssociatedControlID="lueERPApplication" runat="server" Text="<%$ resources: lueERPApplication.Caption %>" ></asp:Label>
 </div>   
  <div    >
<SalesLogix:LookupControl runat="server" ID="lueERPApplication" ButtonToolTip="<%$ resources: lueERPApplication.ButtonToolTip %>" LookupEntityName="AppIdMapping" LookupEntityTypeName="Sage.Entity.Interfaces.IAppIdMapping, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="DropDownList" DropDownDisplayProperty="Name" InitializeLookup="true" AutoPostBack="true" DialogTitle="<%$ resources: lueERPApplication.LookupDialogTitle %>"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueERPApplication.LookupProperties.Name.PropertyHeader %>" PropertyName="Name" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
<SalesLogix:LookupPreFilter PropertyName="Enabled" PropertyType="System.Boolean" OperatorCode="=" Visible="False"
 FilterValue="True"
 ></SalesLogix:LookupPreFilter>
<SalesLogix:LookupPreFilter PropertyName="IsSystemEndPoint" PropertyType="System.Boolean" OperatorCode="!=" Visible="False"
 FilterValue="true"
 ></SalesLogix:LookupPreFilter>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

   <div class=" lbl alignleft">
   <asp:Label ID="luePriceList_lbl" AssociatedControlID="luePriceList" runat="server" Text="<%$ resources: luePriceList.Caption %>" ></asp:Label>
 </div>   
  <div    >
<SalesLogix:LookupControl runat="server" ID="luePriceList" ButtonToolTip="<%$ resources: luePriceList.ButtonToolTip %>" Enabled="false" LookupEntityName="SlxPriceList" LookupEntityTypeName="Sage.Entity.Interfaces.ISlxPriceList, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="DropDownList" SeedProperty="AppId" DropDownDisplayProperty="Name" InitializeLookup="true" AutoPostBack="true" DialogTitle="<%$ resources: luePriceList.LookupDialogTitle %>"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: luePriceList.LookupProperties.Name.PropertyHeader %>" PropertyName="Name" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
<SalesLogix:LookupPreFilter PropertyName="ActiveFlag" PropertyType="System.Boolean" OperatorCode="=" Visible="False"
 FilterValue="True"
 ></SalesLogix:LookupPreFilter>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

</asp:Panel>
      </td>
                <td></td>
      </tr>
<tr>
                  <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="lueReseller_lbl" AssociatedControlID="lueReseller" runat="server" Text="<%$ resources: lueReseller.Caption %>" Visible="false" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="lueReseller"  dojoType="Sage.UI.Controls.TextBox" Visible="false"  />
  </div>

      </td>
                <td></td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="InsertOpportunity_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="cmdSave"
 AlternateText="<%$ resources: cmdSave.Caption %>"  ToolTip="<%$ resources: cmdSave.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
   
    <asp:ImageButton runat="server" ID="cmdSaveNew"
 AlternateText="<%$ resources: cmdSaveNew.Caption %>"  ToolTip="<%$ resources: cmdSaveNew.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_New16x16"  />
   
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=InsertOpportunity&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkInsertOpportunityHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="InsertOpportunity" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IOpportunity); }
}

 

protected override void OnAddEntityBindings() {
                 // txtDescription.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtDescriptionTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Description", txtDescription, "Text");
        BindingSource.Bindings.Add(txtDescriptionTextBinding);
                    // pklStatus.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklStatusPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Status", pklStatus, "PickListValue");
        BindingSource.Bindings.Add(pklStatusPickListValueBinding);
                    // lueAccount.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueAccountLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Account", lueAccount, "LookupResultValue");
        BindingSource.Bindings.Add(lueAccountLookupResultValueBinding);
                    // pklType.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklTypePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Type", pklType, "PickListValue");
        BindingSource.Bindings.Add(pklTypePickListValueBinding);
                    // usrUser.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding usrUserLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("AccountManager", usrUser, "LookupResultValue");
        BindingSource.Bindings.Add(usrUserLookupResultValueBinding);
                    // lueLeadSource.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueLeadSourceLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("LeadSource", lueLeadSource, "LookupResultValue");
        BindingSource.Bindings.Add(lueLeadSourceLookupResultValueBinding);
                    // lkpBranch.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpBranchLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("BranchId", lkpBranch, "LookupResultValue");
        BindingSource.Bindings.Add(lkpBranchLookupResultValueBinding);
                    // lkpEndCustomer.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpEndCustomerLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("EndCustomer", lkpEndCustomer, "LookupResultValue");
        BindingSource.Bindings.Add(lkpEndCustomerLookupResultValueBinding);
                    // pklFeeType.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklFeeTypePickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("FeeType", pklFeeType, "PickListValue");
        BindingSource.Bindings.Add(pklFeeTypePickListValueBinding);
                    // dtInspectionStartDate.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtInspectionStartDateDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("InspectionStartDate", dtInspectionStartDate, "DateTimeValue");
        BindingSource.Bindings.Add(dtInspectionStartDateDateTimeValueBinding);
                    // dtInspectionEndDate.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtInspectionEndDateDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("InspectionEndDate", dtInspectionEndDate, "DateTimeValue");
        BindingSource.Bindings.Add(dtInspectionEndDateDateTimeValueBinding);
                    // CustomerProjectNo.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding CustomerProjectNoTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("CustomerProjectNo", CustomerProjectNo, "Text");
        BindingSource.Bindings.Add(CustomerProjectNoTextBinding);
                    // ReferenceNo.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding ReferenceNoTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ReferenceNo", ReferenceNo, "Text");
        BindingSource.Bindings.Add(ReferenceNoTextBinding);
                    // dtpEstimatedClose.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtpEstimatedCloseDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("EstimatedClose", dtpEstimatedClose, "DateTimeValue");
        BindingSource.Bindings.Add(dtpEstimatedCloseDateTimeValueBinding);
                    // pklCloseProbability.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklCloseProbabilityPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("CloseProbability", pklCloseProbability, "PickListValue");
        BindingSource.Bindings.Add(pklCloseProbabilityPickListValueBinding);
                       // lueERPApplication.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueERPApplicationLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("OperatingCompany", lueERPApplication, "LookupResultValue");
        BindingSource.Bindings.Add(lueERPApplicationLookupResultValueBinding);
                    // luePriceList.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding luePriceListLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("SlxPriceList", luePriceList, "LookupResultValue");
        BindingSource.Bindings.Add(luePriceListLookupResultValueBinding);
                 // luePriceList.SeedValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding luePriceListSeedValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("OperatingCompany.Id", luePriceList, "SeedValue");
        luePriceListSeedValueBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(luePriceListSeedValueBinding);
                    // lueReseller.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueResellerTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Reseller", lueReseller, "Text");
        BindingSource.Bindings.Add(lueResellerTextBinding);
    
   
        }
                                                                                                                                     
protected void lueAccount_ChangeAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.IOpportunity entity = (Sage.Entity.Interfaces.IOpportunity) this.BindingSource.Current;
if (entity.CheckOppAccount()) {
            lueAccount_ChangeActionS(sender, e);
      
      }
else {
            lueAccount_ChangeActionF(sender, e);
      
      }
}
protected void lueAccount_ChangeActionS(object sender, EventArgs e) {
 Sage.Entity.Interfaces.IOpportunity entity = (Sage.Entity.Interfaces.IOpportunity)this.BindingSource.Current;

txtDescription.Enabled = true;
usrUser.Enabled = true;
dtpEstimatedClose.Enabled = true;
pklCloseProbability.Enabled = true;
pklStatus.Enabled = true;
pklType.Enabled = true;
lueLeadSource.Enabled = true;
lueReseller.Enabled = true;
//entity.BranchId = entity.Account.BranchId.ToString();

if (entity.Account != null)
{
    entity.BranchId = entity.Account.BranchId.ToString();

}
else
{
    lkpBranch.Enabled = true;
    
        
}

}
protected void lueAccount_ChangeActionF(object sender, EventArgs e) {
txtDescription.Enabled = false;
usrUser.Enabled = false;
dtpEstimatedClose.Enabled = false;
pklCloseProbability.Enabled = false;
pklStatus.Enabled = false;
pklType.Enabled = false;
lueLeadSource.Enabled = false;
lueReseller.Enabled = false;

}
protected void lueERPApplication_ChangeAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.IOpportunity opportunity = BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
if (opportunity.OperatingCompany != null)
{
	luePriceList.SeedValue = opportunity.OperatingCompany.Id.ToString();
	luePriceList.ResetDropDownListItems();
}
luePriceList.Enabled = (opportunity.OperatingCompany != null);
  Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
    if (refresher != null) {
      refresher.RefreshAll();
    }
    else {  
      Response.Redirect(Request.Url.ToString());
    }

}
protected void luePriceList_ChangeAction(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}
protected void cmdSave_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.IOpportunity _entity = BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
  if (_entity != null)
  {
    object _parent = GetParentEntity();
    if (DialogService.ChildInsertInfo != null)
    {
        if (_parent != null)
        {
            if (DialogService.ChildInsertInfo.ParentReferenceProperty != null)
            {
                DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
            }
        }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
    if (page != null)
    {
        if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
        {
            shouldSave = false;
        }
    }

    if(shouldSave)
    {
       _entity.Save();
    }

    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null)
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }
  }

          cmdSave_ClickActionBRC(sender, e);
    
  
}
protected void cmdSave_ClickActionBRC(object sender, EventArgs e) {
      Response.Redirect(string.Format("Opportunity.aspx?entityId={0}", (this.BindingSource.Current as Sage.Platform.ComponentModel.IComponentReference).Id));
  
}
protected void cmdSaveNew_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.IOpportunity _entity = BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
  if (_entity != null)
  {
    object _parent = GetParentEntity();
    if (DialogService.ChildInsertInfo != null)
    {
        if (_parent != null)
        {
            if (DialogService.ChildInsertInfo.ParentReferenceProperty != null)
            {
                DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
            }
        }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
    if (page != null)
    {
        if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
        {
            shouldSave = false;
        }
    }

    if(shouldSave)
    {
       _entity.Save();
    }

    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null)
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }
  }

          cmdSaveNew_ClickActionBRC(sender, e);
    
  
}
protected void cmdSaveNew_ClickActionBRC(object sender, EventArgs e) {
      Response.Redirect(string.Format("InsertOpportunity.aspx?modeid=Insert&entityId={0}", (BindingSource.Current as Sage.Platform.ComponentModel.IComponentReference).Id));
   
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lueAccount.LookupResultValueChanged += new EventHandler(lueAccount_ChangeAction);
lueERPApplication.LookupResultValueChanged += new EventHandler(lueERPApplication_ChangeAction);
luePriceList.LookupResultValueChanged += new EventHandler(luePriceList_ChangeAction);
cmdSave.Click += new ImageClickEventHandler(cmdSave_ClickAction);
cmdSaveNew.Click += new ImageClickEventHandler(cmdSaveNew_ClickAction);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.Entity.Interfaces.IOpportunity entity = (Sage.Entity.Interfaces.IOpportunity) this.BindingSource.Current;
if (entity.CheckOppAccount()) {
            quickformload0S(sender, e);
      
      }
else {
            quickformload0F(sender, e);
      
      }
}
protected void quickformload0S(object sender, EventArgs e) {
txtDescription.Enabled = true;
usrUser.Enabled = true;
dtpEstimatedClose.Enabled = true;
pklCloseProbability.Enabled = true;
pklStatus.Enabled = true;
pklType.Enabled = true;
lueLeadSource.Enabled = true;

}
protected void quickformload0F(object sender, EventArgs e) {
txtDescription.Enabled = false;
usrUser.Enabled = false;
dtpEstimatedClose.Enabled = false;
pklCloseProbability.Enabled = false;
pklStatus.Enabled = false;
pklType.Enabled = false;
lueLeadSource.Enabled = false;

}
protected void quickformload1(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("InsertOpportunity.SetupIntegrationContract", methodArgs);

}
protected void quickformload2(object sender, EventArgs e) {
Sage.Entity.Interfaces.IOpportunity opportunity = BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
if (Request.QueryString["copyOpportunity"] != null && Request.QueryString["entityId"] != null &&
         Request.QueryString["copyOpportunity"].Equals("true"))
{
    Sage.Entity.Interfaces.IOpportunity copyFromOpportunity =
        Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IOpportunity>(Request.QueryString["entityId"]);
    opportunity.CopyOpportunity(copyFromOpportunity);
}

}
protected void quickformload3(object sender, EventArgs e) {

//comment by pallavi Reseller field remove 

/*Sage.SalesLogix.PickLists.PickList picklist = Sage.SalesLogix.PickLists.PickList.GetPickListItemByCode("kSYST0000346", "Reseller");
if (picklist != null) {
	lueReseller.SeedValue = picklist.Text;
}
else
{
	throw new ValidationException ("Account Partner PickList not Found");
}
Sage.Entity.Interfaces.IOpportunity opportunity = BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
opportunity.BranchId =opportunity.Account.BranchId.ToString();
*/
Sage.Entity.Interfaces.IOpportunity opportunity = BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
if (opportunity.Account != null)
    
    {
opportunity.BranchId =opportunity.Account.BranchId.ToString();

    }

}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);
quickformload3(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ClientBindingMgr.RegisterSaveButton(cmdSave);

ClientBindingMgr.RegisterSaveButton(cmdSaveNew);

if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
quickformload1(this, EventArgs.Empty);
quickformload2(this, EventArgs.Empty);
ClientBindingMgr.SetFocusTo(txtDescription);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new InsertOpportunityAdapter(this)); }
}

public class InsertOpportunityAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IInsertOpportunity
{
    public InsertOpportunityAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.ITextBoxControl _txtDescription;
    public  Sage.Platform.Controls.ITextBoxControl txtDescription
    {
        get { return FindControl(ref _txtDescription, "txtDescription"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueAccount;
    public  Sage.Platform.Controls.ILookupControl lueAccount
    {
        get { return FindControl(ref _lueAccount, "lueAccount"); }
    }
    private Sage.Platform.Controls.IUserControl _usrUser;
    public  Sage.Platform.Controls.IUserControl usrUser
    {
        get { return FindControl(ref _usrUser, "usrUser"); }
    }
    private Sage.Platform.Controls.ILookupControl _lkpBranch;
    public  Sage.Platform.Controls.ILookupControl lkpBranch
    {
        get { return FindControl(ref _lkpBranch, "lkpBranch"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklFeeType;
    public  Sage.Platform.Controls.IPickListControl pklFeeType
    {
        get { return FindControl(ref _pklFeeType, "pklFeeType"); }
    }
    private Sage.Platform.Controls.IDateTimePickerControl _dtInspectionEndDate;
    public  Sage.Platform.Controls.IDateTimePickerControl dtInspectionEndDate
    {
        get { return FindControl(ref _dtInspectionEndDate, "dtInspectionEndDate"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _ReferenceNo;
    public  Sage.Platform.Controls.ITextBoxControl ReferenceNo
    {
        get { return FindControl(ref _ReferenceNo, "ReferenceNo"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklCloseProbability;
    public  Sage.Platform.Controls.IPickListControl pklCloseProbability
    {
        get { return FindControl(ref _pklCloseProbability, "pklCloseProbability"); }
    }
    private Sage.Platform.Controls.IControlsListControl _clIntegrationContract;
    public  Sage.Platform.Controls.IControlsListControl clIntegrationContract
    {
        get { return FindControl(ref _clIntegrationContract, "clIntegrationContract"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueERPApplication;
    public  Sage.Platform.Controls.ILookupControl lueERPApplication
    {
        get { return FindControl(ref _lueERPApplication, "lueERPApplication"); }
    }
    private Sage.Platform.Controls.ILookupControl _luePriceList;
    public  Sage.Platform.Controls.ILookupControl luePriceList
    {
        get { return FindControl(ref _luePriceList, "luePriceList"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _lueReseller;
    public  Sage.Platform.Controls.ITextBoxControl lueReseller
    {
        get { return FindControl(ref _lueReseller, "lueReseller"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklStatus;
    public  Sage.Platform.Controls.IPickListControl pklStatus
    {
        get { return FindControl(ref _pklStatus, "pklStatus"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklType;
    public  Sage.Platform.Controls.IPickListControl pklType
    {
        get { return FindControl(ref _pklType, "pklType"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueLeadSource;
    public  Sage.Platform.Controls.ILookupControl lueLeadSource
    {
        get { return FindControl(ref _lueLeadSource, "lueLeadSource"); }
    }
    private Sage.Platform.Controls.ILookupControl _lkpEndCustomer;
    public  Sage.Platform.Controls.ILookupControl lkpEndCustomer
    {
        get { return FindControl(ref _lkpEndCustomer, "lkpEndCustomer"); }
    }
    private Sage.Platform.Controls.IDateTimePickerControl _dtInspectionStartDate;
    public  Sage.Platform.Controls.IDateTimePickerControl dtInspectionStartDate
    {
        get { return FindControl(ref _dtInspectionStartDate, "dtInspectionStartDate"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _CustomerProjectNo;
    public  Sage.Platform.Controls.ITextBoxControl CustomerProjectNo
    {
        get { return FindControl(ref _CustomerProjectNo, "CustomerProjectNo"); }
    }
    private Sage.Platform.Controls.IDateTimePickerControl _dtpEstimatedClose;
    public  Sage.Platform.Controls.IDateTimePickerControl dtpEstimatedClose
    {
        get { return FindControl(ref _dtpEstimatedClose, "dtpEstimatedClose"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdSave;
    public  Sage.Platform.Controls.IButtonControl cmdSave
    {
        get { return FindControl(ref _cmdSave, "cmdSave"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdSaveNew;
    public  Sage.Platform.Controls.IButtonControl cmdSaveNew
    {
        get { return FindControl(ref _cmdSaveNew, "cmdSaveNew"); }
    }

    public  void SetupIntegrationContract(System.EventArgs e)
    {
        Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
        Object[] methodArgs = new Object[] { this, e };
        lib.Execute("InsertOpportunity.SetupIntegrationContract", methodArgs);
    }
}

</script>

<script type="text/javascript">
</script>
