<%@ Control Language="C#" ClassName="EditSalesPotential" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="2%" />
            <col width="98%" />
     <tr>
            <td  colspan="2" >
<asp:Label runat="server" ID="lblSalesPotential" Text="<%$ resources: lblSalesPotential.Text %>"  CssClass="wizardsectiontitle padBottom"  />

      </td>
            </tr>
<tr>
            <td></td>
                <td  >
<div class="slxlabel  alignleft  checkbox ">

  <SalesLogix:SLXCheckBox runat="server" ID="chkbxOverrideSalesPotential"  Text="<%$ resources: chkbxOverrideSalesPotential.Caption %>"  CssClass=""
LabelPlacement="right" AutoPostBack="true"  />
</div>
      </td>
      </tr>
<tr>
            <td></td>
                <td  >
<div class=" lbl alignleft">
    <asp:Label ID="curSalesPotential_lbl" AssociatedControlID="curSalesPotential" runat="server" Text="<%$ resources: curSalesPotential.Caption %>" ></asp:Label>
</div>
 <div  class="textcontrol currency"  >
    <SalesLogix:Currency
    runat="server"
    ID="curSalesPotential" 
    ExchangeRateType="BaseRate"
     Required="false"
 DecimalDigits="-1"
 />
</div>

      </td>
      </tr>
<tr>
            <td></td>
                <td  >
<asp:Panel runat="server" ID="ctrlstButtons" CssClass="controlslist qfActionContainer"
>
   <asp:Button runat="server" ID="cmdOK"
 Text="<%$ resources: cmdOK.Caption %>" CssClass="slxbutton"  />
   
   <asp:Button runat="server" ID="cmdCancel"
 Text="<%$ resources: cmdCancel.Caption %>" CssClass="slxbutton"  />
 
</asp:Panel>
      </td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="EditSalesPotential_RTools" ToolbarLocation="right">
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=EditSalesPotential&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkEditSalesPotentialHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="EditSalesPotential" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IOpportunity); }
}

 

protected override void OnAddEntityBindings() {
                    // chkbxOverrideSalesPotential.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkbxOverrideSalesPotentialCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("OverrideSalesPotential", chkbxOverrideSalesPotential, "Checked");
        BindingSource.Bindings.Add(chkbxOverrideSalesPotentialCheckedBinding);
                    // curSalesPotential.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding curSalesPotentialTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("SalesPotential", curSalesPotential, "Text");
        BindingSource.Bindings.Add(curSalesPotentialTextBinding);
             
   
}
                                         
      
      
      
          
protected void chkbxOverrideSalesPotential_ChangeAction(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("EditSalesPotential.chkbxOverrideSalesPotential_OnChange", methodArgs);
  Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
    if (refresher != null) {
      refresher.RefreshAll();
    }
    else {  
      Response.Redirect(Request.Url.ToString());
    }

}
protected void cmdOK_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.IOpportunity opp = BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;        

if(DialogService.DialogParameters.ContainsKey("ExchangeRate"))
{
	double exchangeRate = System.Convert.ToDouble(DialogService.DialogParameters["ExchangeRate"]);
	curSalesPotential.ExchangeRate = exchangeRate;
}
opp.Save();
  Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
    if (refresher != null) {
      refresher.RefreshAll();
    }
    else {  
      Response.Redirect(Request.Url.ToString());
    }

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 chkbxOverrideSalesPotential.CheckedChanged += new EventHandler(chkbxOverrideSalesPotential_ChangeAction);
if (RoleSecurityService != null)
{
if (RoleSecurityService.HasAccess("ENTITIES/OPPORTUNITY/EDIT"))
{
cmdOK.Click += new EventHandler(cmdOK_ClickAction);
}
}
cmdOK.Click += new EventHandler(DialogService.CloseEventHappened);
cmdOK.Click += new EventHandler(Refresh);
cmdCancel.Click += new EventHandler(DialogService.CloseEventHappened);


}

protected void quickformload0(object sender, EventArgs e) {

 Sage.Entity.Interfaces.IOpportunity opp = BindingSource.Current as Sage.Entity.Interfaces.IOpportunity;
bool overrideSalesPotential = System.Convert.ToBoolean(opp.OverrideSalesPotential);
curSalesPotential.ReadOnly = !overrideSalesPotential; 

if (DialogService.DialogParameters.Count > 0 && (DialogService.DialogParameters.ContainsKey("ExchangeRateType")))
{
    Sage.Platform.Controls.ExchangeRateTypeEnum rateType  = (Sage.Platform.Controls.ExchangeRateTypeEnum)  Enum.Parse(typeof(Sage.Platform.Controls.ExchangeRateTypeEnum),  DialogService.DialogParameters["ExchangeRateType"].ToString());
	string exchangeRateCode = DialogService.DialogParameters["ExchangeRateCode"].ToString();
    double exchangeRate =System.Convert.ToDouble(DialogService.DialogParameters["ExchangeRate"]);
    curSalesPotential.ExchangeRate = exchangeRate;
    curSalesPotential.CurrentCode = exchangeRateCode;    
    curSalesPotential.ExchangeRateType = rateType;
    curSalesPotential.Text = System.Convert.ToString(opp.SalesPotential);
}     

}
protected override void OnFormBound()
{
ClientBindingMgr.RegisterSaveButton(cmdOK);

ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
if (!RoleSecurityService.HasAccess("ENTITIES/OPPORTUNITY/EDIT"))
{
cmdOK.Visible = false;
}
ClientBindingMgr.RegisterDialogCancelButton(cmdCancel);
quickformload0(this, EventArgs.Empty);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new EditSalesPotentialAdapter(this)); }
}

public class EditSalesPotentialAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IEditSalesPotential
{
    public EditSalesPotentialAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.ILabelControl _lblSalesPotential;
    public  Sage.Platform.Controls.ILabelControl lblSalesPotential
    {
        get { return FindControl(ref _lblSalesPotential, "lblSalesPotential"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkbxOverrideSalesPotential;
    public  Sage.Platform.Controls.ICheckBoxControl chkbxOverrideSalesPotential
    {
        get { return FindControl(ref _chkbxOverrideSalesPotential, "chkbxOverrideSalesPotential"); }
    }
    private Sage.Platform.Controls.ICurrencyControl _curSalesPotential;
    public  Sage.Platform.Controls.ICurrencyControl curSalesPotential
    {
        get { return FindControl(ref _curSalesPotential, "curSalesPotential"); }
    }
    private Sage.Platform.Controls.IControlsListControl _ctrlstButtons;
    public  Sage.Platform.Controls.IControlsListControl ctrlstButtons
    {
        get { return FindControl(ref _ctrlstButtons, "ctrlstButtons"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdOK;
    public  Sage.Platform.Controls.IButtonControl cmdOK
    {
        get { return FindControl(ref _cmdOK, "cmdOK"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdCancel;
    public  Sage.Platform.Controls.IButtonControl cmdCancel
    {
        get { return FindControl(ref _cmdCancel, "cmdCancel"); }
    }

    public  void chkbxOverrideSalesPotential_OnChange(System.EventArgs e)
    {
        Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
        Object[] methodArgs = new Object[] { this, e };
        lib.Execute("EditSalesPotential.chkbxOverrideSalesPotential_OnChange", methodArgs);
    }
}

</script>

<script type="text/javascript">
</script>
