<%@ Control Language="C#" ClassName="AddEditQualification" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="25%" />
            <col width="75%" />
     <tr>
            <td  >
 <div class="slxlabel"><asp:Label runat="server" ID="lblVisible" Text="<%$ resources: lblVisible.Text %>"  AssociatedControlID="chkVisible"  />
</div>
      </td>
                <td  >
<div class="slxlabel  alignleft  checkbox ">

  <SalesLogix:SLXCheckBox runat="server" ID="chkVisible"  CssClass=""
LabelPlacement="none"  />
</div>
      </td>
      </tr>
<tr>
            <td  >
 <div class="slxlabel"><asp:Label runat="server" ID="lblSortPosition" Text="<%$ resources: lblSortPosition.Text %>"  AssociatedControlID="txtSortPosition"  />
</div>
      </td>
                <td  >
  <div  class="textcontrol numeric"  > 
    <SalesLogix:NumericControl runat="server" ID="txtSortPosition"
Strict="False" 
 />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class="slxlabel"><asp:Label runat="server" ID="lblDescription" Text="<%$ resources: lblDescription.Text %>"  AssociatedControlID="txtDescription"  />
</div>
      </td>
                <td  >
 <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtDescription"  dojoType="Sage.UI.Controls.TextBox" MaxLength="64"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class="slxlabel"><asp:Label runat="server" ID="lblShowNotes" Text="<%$ resources: lblShowNotes.Text %>"  AssociatedControlID="chkShowNotes"  />
</div>
      </td>
                <td  >
<div class="slxlabel  alignleft  checkbox ">

  <SalesLogix:SLXCheckBox runat="server" ID="chkShowNotes"  CssClass=""
LabelPlacement="none"  />
</div>
      </td>
      </tr>
<tr>
            <td></td>
                <td  >
<asp:Panel runat="server" ID="QFControlsList" CssClass="controlslist qfActionContainer"
>
   <asp:Button runat="server" ID="btnOK"
 Text="<%$ resources: btnOK.Caption %>"  ToolTip="<%$ resources: btnOK.ToolTip %>" CssClass="slxbutton"  />
   
   <asp:Button runat="server" ID="btnCancel"
 Text="<%$ resources: btnCancel.Caption %>"  ToolTip="<%$ resources: btnCancel.ToolTip %>" TabIndex="1" CssClass="slxbutton"  />
 
</asp:Panel>
      </td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="AddEditQualification_RTools" ToolbarLocation="right">
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=AddEditQualification&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkAddEditQualificationHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="AddEditQualification" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IQualification); }
}

 

protected override void OnAddEntityBindings() {
                    // chkVisible.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkVisibleCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Visible", chkVisible, "Checked");
        BindingSource.Bindings.Add(chkVisibleCheckedBinding);
                       // txtSortPosition.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtSortPositionTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("SortPosition", txtSortPosition, "Text");
        BindingSource.Bindings.Add(txtSortPositionTextBinding);
                       // txtDescription.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtDescriptionTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Description", txtDescription, "Text");
        BindingSource.Bindings.Add(txtDescriptionTextBinding);
                       // chkShowNotes.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkShowNotesCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ShowNotes", chkShowNotes, "Checked");
        BindingSource.Bindings.Add(chkShowNotesCheckedBinding);
             
   
}
                                                                             
protected void btnOK_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.IQualification _entity = BindingSource.Current as Sage.Entity.Interfaces.IQualification;
  if (_entity != null)
  {
    object _parent = GetParentEntity();
    if (DialogService.ChildInsertInfo != null)
    {
        if (_parent != null)
        {
            if (DialogService.ChildInsertInfo.ParentReferenceProperty != null)
            {
                DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
            }
        }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
    if (page != null)
    {
        if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
        {
            shouldSave = false;
        }
    }

    if(shouldSave)
    {
       _entity.Save();
    }

    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null)
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }
  }

          btnOK_ClickActionBRC(sender, e);
    
  
}
protected void btnOK_ClickActionBRC(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 btnOK.Click += new EventHandler(btnOK_ClickAction);
btnOK.Click += new EventHandler(DialogService.CloseEventHappened);
btnOK.Click += new EventHandler(Refresh);
btnCancel.Click += new EventHandler(DialogService.CloseEventHappened);


}

protected void quickformload0(object sender, EventArgs e) {
if(DialogService.DialogParameters.ContainsKey("QualificationCategory"))
{
	Sage.Entity.Interfaces.IQualification _entity = BindingSource.Current as Sage.Entity.Interfaces.IQualification;
	_entity.QualificationCategory = DialogService.DialogParameters["QualificationCategory"] as Sage.Entity.Interfaces.IQualificationCategory;
	if(!_entity.SortPosition.HasValue)
		_entity.SortPosition = _entity.QualificationCategory.Qualifications.Count + 1;
}


}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ClientBindingMgr.RegisterSaveButton(btnOK);

ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
ClientBindingMgr.RegisterDialogCancelButton(btnCancel);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new AddEditQualificationAdapter(this)); }
}

public class AddEditQualificationAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IAddEditQualification
{
    public AddEditQualificationAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.ILabelControl _lblVisible;
    public  Sage.Platform.Controls.ILabelControl lblVisible
    {
        get { return FindControl(ref _lblVisible, "lblVisible"); }
    }
    private Sage.Platform.Controls.ILabelControl _lblSortPosition;
    public  Sage.Platform.Controls.ILabelControl lblSortPosition
    {
        get { return FindControl(ref _lblSortPosition, "lblSortPosition"); }
    }
    private Sage.Platform.Controls.ILabelControl _lblDescription;
    public  Sage.Platform.Controls.ILabelControl lblDescription
    {
        get { return FindControl(ref _lblDescription, "lblDescription"); }
    }
    private Sage.Platform.Controls.ILabelControl _lblShowNotes;
    public  Sage.Platform.Controls.ILabelControl lblShowNotes
    {
        get { return FindControl(ref _lblShowNotes, "lblShowNotes"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkVisible;
    public  Sage.Platform.Controls.ICheckBoxControl chkVisible
    {
        get { return FindControl(ref _chkVisible, "chkVisible"); }
    }
    private Sage.Platform.Controls.INumericControl _txtSortPosition;
    public  Sage.Platform.Controls.INumericControl txtSortPosition
    {
        get { return FindControl(ref _txtSortPosition, "txtSortPosition"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtDescription;
    public  Sage.Platform.Controls.ITextBoxControl txtDescription
    {
        get { return FindControl(ref _txtDescription, "txtDescription"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkShowNotes;
    public  Sage.Platform.Controls.ICheckBoxControl chkShowNotes
    {
        get { return FindControl(ref _chkShowNotes, "chkShowNotes"); }
    }
    private Sage.Platform.Controls.IControlsListControl _QFControlsList;
    public  Sage.Platform.Controls.IControlsListControl QFControlsList
    {
        get { return FindControl(ref _QFControlsList, "QFControlsList"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnOK;
    public  Sage.Platform.Controls.IButtonControl btnOK
    {
        get { return FindControl(ref _btnOK, "btnOK"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnCancel;
    public  Sage.Platform.Controls.IButtonControl btnCancel
    {
        get { return FindControl(ref _btnCancel, "btnCancel"); }
    }

}

</script>

<script type="text/javascript">
</script>
