<%@ Control Language="C#" ClassName="AddEditCallsInspectors" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="100%" />
     <tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpSurveyor_lbl" AssociatedControlID="lkpSurveyor" runat="server" Text="<%$ resources: lkpSurveyor.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lkpSurveyor" LookupEntityName="Surveyor" LookupEntityTypeName="Sage.Entity.Interfaces.ISurveyor, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpSurveyor.LookupProperties.Branch.PropertyHeader %>" PropertyName="Branch" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpSurveyor.LookupProperties.FirstName.PropertyHeader %>" PropertyName="FirstName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpSurveyor.LookupProperties.LastName.PropertyHeader %>" PropertyName="LastName" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpSurveyor.LookupProperties.MobileNo.PropertyHeader %>" PropertyName="MobileNo" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpSurveyor.LookupProperties.SurveyorType.PropertyHeader %>" PropertyName="SurveyorType" PropertyType="SalesLogix.PickList" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
      </tr>
<tr>
            <td  >
<div class="slxlabel  alignleft checkboxRight">

  <SalesLogix:SLXCheckBox runat="server" ID="chkIsPrimary"  Text="<%$ resources: chkIsPrimary.Caption %>"  CssClass=""
LabelPlacement="left" AutoPostBack="true"  />
</div>
      </td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="AddEditCallsInspectors_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="QFButton"
ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16" 
 />
 
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=AddEditCallsInspectors&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkAddEditCallsInspectorsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="AddEditCallsInspectors" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.ITicketSurveyor); }
}

 

protected override void OnAddEntityBindings() {
                 // lkpSurveyor.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpSurveyorLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Surveyor", lkpSurveyor, "LookupResultValue");
        BindingSource.Bindings.Add(lkpSurveyorLookupResultValueBinding);
                    // chkIsPrimary.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkIsPrimaryCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("IsPrimary", chkIsPrimary, "Checked");
        BindingSource.Bindings.Add(chkIsPrimaryCheckedBinding);
    
   
    }
              
protected void chkIsPrimary_ChangeAction(object sender, EventArgs e) {
 Sage.Entity.Interfaces.ITicketSurveyor tktser = BindingSource.Current as Sage.Entity.Interfaces.ITicketSurveyor;
if(chkIsPrimary.Checked==false)
{	tktser.IsPrimary=true;    
	DialogService.ShowMessage("Please assign primary to another Inspector");
}

}
protected void QFButton_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.ITicket tkt= this.GetParentEntity() as Sage.Entity.Interfaces.ITicket;
Sage.Entity.Interfaces.ITicketSurveyor tkts = this.BindingSource.Current as Sage.Entity.Interfaces.ITicketSurveyor;

//tkts.Surveyor.Id
if (chkIsPrimary.Checked==true)
{
Sage.Platform.Data.IDataService service = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
System.Data.OleDb.OleDbConnection conObj1 = new System.Data.OleDb.OleDbConnection(service.GetConnectionString());
conObj1.Open();
string query1 = "Update sysdba.TICKETSURVEYOR set ISPRIMARY ='F' where TICKETID='"+ tkt.Id +"'";
System.Data.OleDb.OleDbCommand cmd = new System.Data.OleDb.OleDbCommand(query1, conObj1);
cmd.ExecuteNonQuery();
}
    
//Sage.Entity.Interfaces.ISurveyor ser = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.ISurveyor>(lkpSurveyor.LookupResultValue.ToString());
tkts.Surveyor = lkpSurveyor.LookupResultValue as Sage.Entity.Interfaces.ISurveyor;
//tkts.SurveyorID = ser.Id.ToString();
tkts.Ticket = tkt;
tkts.IsPrimary = chkIsPrimary.Checked;
tkts.Save();
System.Web.HttpContext.Current.Response.Redirect(string.Format("Ticket.aspx?entityId={1}", "Ticket", tkt.Id.ToString()));

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 chkIsPrimary.CheckedChanged += new EventHandler(chkIsPrimary_ChangeAction);
QFButton.Click += new ImageClickEventHandler(QFButton_ClickAction);


}

protected void quickformload0(object sender, EventArgs e) {
 Sage.Entity.Interfaces.ITicket tkt = this.GetParentEntity() as Sage.Entity.Interfaces.ITicket;
    
    if (lkpSurveyor.LookupResultValue==null)
    {
        lkpSurveyor.Enabled = true;

        if (tkt.CompetencyCheck == true)
        {
            string qry = "Select distinct SURVEYORID From SURVEYORCOMPETENCYITEM where SCOPEOFACTIVITY in (select FAMILY from ContractProductItem where ContractID='"+ tkt.Contract.Id +"')";
          
            string sId1 = "'";
            Sage.Platform.Data.IDataService service1 = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
            System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service1.GetConnectionString());
            System.Data.OleDb.OleDbDataAdapter dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
            System.Data.DataTable dt = new System.Data.DataTable();
            dataAdapterObj.Fill(dt);
            foreach (System.Data.DataRow dr in dt.Rows)
            {
                sId1 = sId1 + dr["SURVEYORID"].ToString() + "','";
            }
            if (sId1.Length > 1)
            {
                sId1 = sId1.Remove(sId1.Length - 2, 2);
            }
            else
            {
                sId1 = "''";
            }
            string Accmgr = "Id in (" + sId1 + ") AND Contract.Id";
			lkpSurveyor.SeedProperty = Accmgr;//"Contract.Id";
    		lkpSurveyor.SeedValue = tkt.Contract.Id.ToString();
    		lkpSurveyor.InitializeLookup = true;
			lkpSurveyor.Enabled = true;
        }
    }
    else
    {
        lkpSurveyor.Enabled = false;
    }





}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
QFButton.OnClientClick = string.Format("return confirm('{0}');", Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("QFButton.ActionConfirmationMessage").ToString()));

if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new AddEditCallsInspectorsAdapter(this)); }
}

public class AddEditCallsInspectorsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IAddEditCallsInspectors
{
    public AddEditCallsInspectorsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.ILookupControl _lkpSurveyor;
    public  Sage.Platform.Controls.ILookupControl lkpSurveyor
    {
        get { return FindControl(ref _lkpSurveyor, "lkpSurveyor"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkIsPrimary;
    public  Sage.Platform.Controls.ICheckBoxControl chkIsPrimary
    {
        get { return FindControl(ref _chkIsPrimary, "chkIsPrimary"); }
    }
    private Sage.Platform.Controls.IButtonControl _QFButton;
    public  Sage.Platform.Controls.IButtonControl QFButton
    {
        get { return FindControl(ref _QFButton, "QFButton"); }
    }

}

</script>

<script type="text/javascript">
</script>
