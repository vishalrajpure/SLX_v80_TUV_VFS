<%@ Control Language="C#" ClassName="AddEditProduct" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="50%" />
            <col width="50%" />
     <tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lkpProduct_lbl" AssociatedControlID="lkpProduct" runat="server" Text="<%$ resources: lkpProduct.Caption %>" ></asp:Label>
 </div>   
  <div   class="textcontrol lookup"   >
<SalesLogix:LookupControl runat="server" ID="lkpProduct" LookupEntityName="ContractProductItem" LookupEntityTypeName="Sage.Entity.Interfaces.IContractProductItem, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupBindingMode="String" AutoPostBack="true"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpProduct.LookupProperties.Family.PropertyHeader %>" PropertyName="Family" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpProduct.LookupProperties.Product.PropertyHeader %>" PropertyName="Product" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpProduct.LookupProperties.Program.PropertyHeader %>" PropertyName="Program" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lkpProduct.LookupProperties.Quantity.PropertyHeader %>" PropertyName="Quantity" PropertyType="System.Int32" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="txtTotalQuantity_lbl" AssociatedControlID="txtTotalQuantity" runat="server" Text="<%$ resources: txtTotalQuantity.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol numeric"  > 
    <SalesLogix:NumericControl runat="server" ID="txtTotalQuantity"
ReadOnly="true" Strict="False" 
 />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="txtQuantity_lbl" AssociatedControlID="txtQuantity" runat="server" Text="<%$ resources: txtQuantity.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol numeric"  > 
    <SalesLogix:NumericControl runat="server" ID="txtQuantity"
Required="true" Strict="False" 
 />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="txtUserQuantity_lbl" AssociatedControlID="txtUserQuantity" runat="server" Text="<%$ resources: txtUserQuantity.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol numeric"  > 
    <SalesLogix:NumericControl runat="server" ID="txtUserQuantity"
ReadOnly="true" Strict="False" 
 />
  </div>

      </td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="AddEditProduct_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="cmdSave"
 AlternateText="<%$ resources: cmdSave.Caption %>"  ToolTip="<%$ resources: cmdSave.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Save_16x16"  />
 
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=AddEditProduct&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkAddEditProductHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="AddEditProduct" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.ITicketProduct); }
}

 

protected override void OnAddEntityBindings() {
                 // lkpProduct.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpProductLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ContractProductItem", lkpProduct, "LookupResultValue");
        BindingSource.Bindings.Add(lkpProductLookupResultValueBinding);
                 // lkpProduct.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lkpProductTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Product", lkpProduct, "Text");
        lkpProductTextBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(lkpProductTextBinding);
                       // txtQuantity.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtQuantityTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Quantity", txtQuantity, "Text");
        BindingSource.Bindings.Add(txtQuantityTextBinding);
       
   
    }
                            
protected void lkpProduct_ChangeAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.ITicket tkt = this.GetParentEntity() as Sage.Entity.Interfaces.ITicket;
Sage.Entity.Interfaces.ITicketProduct objprod = this.BindingSource.Current as Sage.Entity.Interfaces.ITicketProduct;

txtTotalQuantity.Text= objprod.ContractProductItem.Quantity.ToString();
foreach(Sage.Entity.Interfaces.ITicket ticket in tkt.Contract.Tickets)
{
	foreach(Sage.Entity.Interfaces.ITicketProduct tktp in ticket.TicketProducts)
	{
		if(tktp.ContractProductItem.Id == objprod.ContractProductItem.Id)
		{
			txtUserQuantity.Text = Convert.ToString(Convert.ToInt32(txtUserQuantity.Text) + Convert.ToInt32(tktp.Quantity));
		}
	}
}

}
protected void cmdSave_ClickAction(object sender, EventArgs e) {
Sage.Entity.Interfaces.ITicket ticket = this.GetParentEntity() as Sage.Entity.Interfaces.ITicket;
Sage.Entity.Interfaces.ITicketProduct ticketproduct = BindingSource.Current as Sage.Entity.Interfaces.ITicketProduct;
if (Convert.ToInt32(ticketproduct.Quantity) <= 0)
{
	throw new Sage.Platform.Application.ValidationException("Enter Quantity of selected product...");
}
if (EntityContext.EntityID.ToString().ToUpper().Equals("INSERT") == true)
{
	if (ticket.TicketProducts.Count > 0)
	{
	    foreach (Sage.Entity.Interfaces.ITicketProduct tktproduct in ticket.TicketProducts)
	    {
	        if (tktproduct.ContractProductItem.Id == ticketproduct.ContractProductItem.Id)
	        {
	            throw new Sage.Platform.Application.ValidationException("product already Exist...");
	        }
	    }
	}
}
if(Convert.ToInt32(txtQuantity.Text) > (Convert.ToInt32(txtTotalQuantity.Text)-Convert.ToInt32(txtUserQuantity.Text)))
{
	throw new Sage.Platform.Application.ValidationException("Quantity exeeded the limit ...");
}
/*
//if (EntityContext.EntityID.ToString().ToUpper().Equals("INSERT") == true)
//{


Sage.Platform.Data.IDataService service = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
System.Data.OleDb.OleDbConnection conObj1 = new System.Data.OleDb.OleDbConnection(service.GetConnectionString());
conObj1.Open();
string query1 = "Select isnull(SUM(isnull(TP.Quantity,0)),0) Qty From TICKETPRODUCT TP " +                       
                "where TP.ContractProductItemID	= '" + ticketproduct.ContractProductItem.Id + "'";

System.Data.OleDb.OleDbCommand cmd = new System.Data.OleDb.OleDbCommand(query1, conObj1);
System.Data.OleDb.OleDbDataAdapter da = new System.Data.OleDb.OleDbDataAdapter(cmd);
System.Data.DataSet ds = new System.Data.DataSet();
da.Fill(ds);

//dr = cmd.ExecuteReader();
if (ds.Tables[0].Rows.Count > 0)
{
    
    if (Convert.ToInt32(ds.Tables[0].Rows[0][0]) + Convert.ToInt32(ticketproduct.Quantity) > Convert.ToInt32(ticketproduct.ContractProductItem.Quantity))
    {
		Int32 exqty = (Convert.ToInt32(ds.Tables[0].Rows[0][0])+Convert.ToInt32(ticketproduct.Quantity)) - Convert.ToInt32(ticketproduct.ContractProductItem.Quantity);
        throw new ApplicationException("Quantity is exeeded the limit with " + exqty.ToString());
    }
}
ticketproduct.TicketId = ticket.Id.ToString();
ticketproduct.ProductID = ticketproduct.ContractProductItem.ProductId.ToString();
//ticketproduct.Description = ticketproduct.ContractProductItem.Product.ToString(); 
//  }*/
ticketproduct.TicketId = ticket.Id.ToString();
ticketproduct.ProductID = string.IsNullOrEmpty(ticketproduct.ContractProductItem.ProductId) ? "" : ticketproduct.ContractProductItem.ProductId.ToString();
ticketproduct.Description = string.IsNullOrEmpty(ticketproduct.ContractProductItem.Description) ? "" : ticketproduct.ContractProductItem.Description.ToString();
ticketproduct.PoNumber= string.IsNullOrEmpty(ticketproduct.ContractProductItem.POItemNo) ? "" : ticketproduct.ContractProductItem.POItemNo.ToString();

ticketproduct.Save();

System.Web.HttpContext.Current.Response.Redirect(string.Format("~/{0}.aspx?entityId={1}", "Ticket", ticketproduct.TicketId.ToString()));

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lkpProduct.LookupResultValueChanged += new EventHandler(lkpProduct_ChangeAction);
cmdSave.Click += new ImageClickEventHandler(cmdSave_ClickAction);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.Entity.Interfaces.ITicket tkt = this.GetParentEntity() as Sage.Entity.Interfaces.ITicket;
txtTotalQuantity.Text = "0";
txtUserQuantity.Text = "0";
if (EntityContext.EntityID.ToString().ToUpper().Equals("INSERT") == true)
{
    
	
	string qry = "Select CONTRACTPRODUCTITEMID From CONTRACTPRODUCTITEM where CONTRACTID = '" + tkt.Contract.Id + "' AND CONTRACTPRODUCTITEMID NOT IN (Select CONTRACTPRODUCTITEMID From TicketProduct where TicketID='" +tkt.Id + "')";

	string sId1 = "'";
	Sage.Platform.Data.IDataService service1 = Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.Data.IDataService>();
	System.Data.OleDb.OleDbConnection conObj = new System.Data.OleDb.OleDbConnection(service1.GetConnectionString());
	System.Data.OleDb.OleDbDataAdapter dataAdapterObj = new System.Data.OleDb.OleDbDataAdapter(qry, conObj);
	System.Data.DataTable dt = new System.Data.DataTable();
	dataAdapterObj.Fill(dt);
	foreach (System.Data.DataRow dr in dt.Rows)
	{
		sId1 = sId1 + dr["CONTRACTPRODUCTITEMID"].ToString() + "','";
	}
	if(sId1.Length > 1)
	{
		sId1 = sId1.Remove(sId1.Length - 2, 2);
	}
	else
	{
		sId1 = "''";
	}
	//string Accmgr = "xxx' AND Id in (" + sId1 + ") AND 'A' != 'B";
	
	string Accmgr = "Id in (" + sId1 + ") and Contract.Id";

	
	lkpProduct.SeedProperty = Accmgr;//"Contract.Id";
    lkpProduct.SeedValue = tkt.Contract.Id.ToString();
    lkpProduct.InitializeLookup = true;
	lkpProduct.Enabled = true;
}
else
{
	
	Sage.Entity.Interfaces.ITicketProduct objprod = this.BindingSource.Current as Sage.Entity.Interfaces.ITicketProduct;

	txtTotalQuantity.Text= objprod.ContractProductItem.Quantity.ToString();
	foreach(Sage.Entity.Interfaces.ITicket ticket in tkt.Contract.Tickets)
	{
		foreach(Sage.Entity.Interfaces.ITicketProduct tktp in ticket.TicketProducts)
		{
			if(tktp.ContractProductItem.Id == objprod.ContractProductItem.Id)
			{
				txtUserQuantity.Text = Convert.ToString(Convert.ToInt32(txtUserQuantity.Text) + Convert.ToInt32(tktp.Quantity));
			}
		}
	}
	txtUserQuantity.Text = Convert.ToString(Convert.ToInt32(txtUserQuantity.Text) - Convert.ToInt32(objprod.Quantity));
	lkpProduct.Enabled = false;
}

}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new AddEditProductAdapter(this)); }
}

public class AddEditProductAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IAddEditProduct
{
    public AddEditProductAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.ILookupControl _lkpProduct;
    public  Sage.Platform.Controls.ILookupControl lkpProduct
    {
        get { return FindControl(ref _lkpProduct, "lkpProduct"); }
    }
    private Sage.Platform.Controls.INumericControl _txtQuantity;
    public  Sage.Platform.Controls.INumericControl txtQuantity
    {
        get { return FindControl(ref _txtQuantity, "txtQuantity"); }
    }
    private Sage.Platform.Controls.INumericControl _txtTotalQuantity;
    public  Sage.Platform.Controls.INumericControl txtTotalQuantity
    {
        get { return FindControl(ref _txtTotalQuantity, "txtTotalQuantity"); }
    }
    private Sage.Platform.Controls.INumericControl _txtUserQuantity;
    public  Sage.Platform.Controls.INumericControl txtUserQuantity
    {
        get { return FindControl(ref _txtUserQuantity, "txtUserQuantity"); }
    }
    private Sage.Platform.Controls.IButtonControl _cmdSave;
    public  Sage.Platform.Controls.IButtonControl cmdSave
    {
        get { return FindControl(ref _cmdSave, "cmdSave"); }
    }

}

</script>

<script type="text/javascript">
</script>
