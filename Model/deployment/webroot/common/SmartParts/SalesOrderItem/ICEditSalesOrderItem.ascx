<%@ Control Language="C#" ClassName="ICEditSalesOrderItem" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="50%" />
            <col width="50%" />
     <tr>
            <td  >
<asp:Panel runat="server" ID="ctrlstLineNumber" CssClass="controlslist "
>
   <div class=" lbl alignleft" >
   <asp:Label ID="txtLineNumber_lbl" AssociatedControlID="txtLineNumber" runat="server" Text="<%$ resources: txtLineNumber.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtLineNumber" Enabled="false" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox"  />
  </div>

</asp:Panel>
      </td>
                <td></td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtProduct_lbl" AssociatedControlID="txtProduct" runat="server" Text="<%$ resources: txtProduct.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtProduct" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox" TabIndex="1"  />
  </div>

      </td>
                <td  >
<div class=" lbl alignleft">
    <asp:Label ID="curPrice_lbl" AssociatedControlID="curPrice" runat="server" Text="<%$ resources: curPrice.Caption %>" ></asp:Label>
</div>
 <div  class="textcontrol currency"  >
    <SalesLogix:Currency
    runat="server"
    ID="curPrice" 
    ExchangeRateType="BaseRate"
    ReadOnly="true"  Required="false"
 DecimalDigits="-1"
TabIndex="6" AutoPostBack="true"  />
</div>

      </td>
      </tr>
<tr>
            <td rowspan="3"  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtDescription_lbl" AssociatedControlID="txtDescription" runat="server" Text="<%$ resources: txtDescription.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtDescription"  Rows="2" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea" TabIndex="2"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="numDiscount_lbl" AssociatedControlID="numDiscount" runat="server" Text="<%$ resources: numDiscount.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol numeric"  > 
    <SalesLogix:NumericControl runat="server" ID="numDiscount"
TabIndex="7" FormatType="Percent" Strict="False" 
AutoPostBack="true"  />
  </div>

      </td>
      </tr>
<tr>
                  <td  >
<div class=" lbl alignleft">
    <asp:Label ID="currCalculatedPrice_lbl" AssociatedControlID="currCalculatedPrice" runat="server" Text="<%$ resources: currCalculatedPrice.Caption %>" ></asp:Label>
</div>
 <div  class="textcontrol currency"  >
    <SalesLogix:Currency
    runat="server"
    ID="currCalculatedPrice" 
    ExchangeRateType="BaseRate"
     Required="false"
 DecimalDigits="-1"
TabIndex="8" AutoPostBack="true"  />
</div>

      </td>
      </tr>
<tr>
                  <td  >
<asp:Panel runat="server" ID="ctrlstMCPrice" CssClass="controlslist "
>
  <div class=" lbl alignleft">
    <asp:Label ID="curMCCalcPrice_lbl" AssociatedControlID="curMCCalcPrice" runat="server" Text="<%$ resources: curMCCalcPrice.Caption %>" ></asp:Label>
</div>
 <div  class="textcontrol currency"  >
    <SalesLogix:Currency
    runat="server"
    ID="curMCCalcPrice" 
    ExchangeRateType="EntityRate"
     Required="false"
 DecimalDigits="-1"
TabIndex="9" AutoPostBack="true"  />
</div>

</asp:Panel>
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtSKU_lbl" AssociatedControlID="txtSKU" runat="server" Text="<%$ resources: txtSKU.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtSKU" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox" TabIndex="3"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="numQuantity_lbl" AssociatedControlID="numQuantity" runat="server" Text="<%$ resources: numQuantity.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol numeric"  > 
    <SalesLogix:NumericControl runat="server" ID="numQuantity"
TabIndex="10" Strict="False" 
AutoPostBack="true"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="txtFamily_lbl" AssociatedControlID="txtFamily" runat="server" Text="<%$ resources: txtFamily.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="txtFamily" PickListName="Product Family" MustExistInList="false" TabIndex="4"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lueUnitOfMeasure_lbl" AssociatedControlID="lueUnitOfMeasure" runat="server" Text="<%$ resources: lueUnitOfMeasure.Caption %>" ></asp:Label>
 </div>   
  <div    >
<SalesLogix:LookupControl runat="server" ID="lueUnitOfMeasure" ButtonToolTip="<%$ resources: lueUnitOfMeasure.ButtonToolTip %>" LookupEntityName="UnitOfMeasure" LookupEntityTypeName="Sage.Entity.Interfaces.IUnitOfMeasure, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="DropDownList" DropDownDisplayProperty="Name" TabIndex="11"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueUnitOfMeasure.LookupProperties.Name.PropertyHeader %>" PropertyName="Name" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueUnitOfMeasure.LookupProperties.UOMType.PropertyHeader %>" PropertyName="UOMType" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueUnitOfMeasure.LookupProperties.ActiveFlag.PropertyHeader %>" PropertyName="ActiveFlag" PropertyType="System.Boolean" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
<SalesLogix:LookupPreFilter PropertyName="ActiveFlag" PropertyType="System.Boolean" OperatorCode="=" Visible="False"
 FilterValue="True"
 ></SalesLogix:LookupPreFilter>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

      </td>
      </tr>
<tr>
            <td  >
<asp:Panel runat="server" ID="ctrlstWarehouse" CssClass="controlslist "
>
   <div class=" lbl alignleft">
   <asp:Label ID="lueLocation_lbl" AssociatedControlID="lueLocation" runat="server" Text="<%$ resources: lueLocation.Caption %>" ></asp:Label>
 </div>   
  <div    >
<SalesLogix:LookupControl runat="server" ID="lueLocation" ButtonToolTip="<%$ resources: lueLocation.ButtonToolTip %>" LookupEntityName="SlxLocation" LookupEntityTypeName="Sage.Entity.Interfaces.ISlxLocation, Sage.Entity.Interfaces, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null" LookupDisplayMode="DropDownList" DropDownDisplayProperty="Name" TabIndex="5"  >
<LookupProperties>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueLocation.LookupProperties.Name.PropertyHeader %>" PropertyName="Name" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
<SalesLogix:LookupProperty PropertyHeader="<%$ resources: lueLocation.LookupProperties.Description.PropertyHeader %>" PropertyName="Description" PropertyType="System.String" PropertyFormat="None" PropertyFormatString="" UseAsResult="True" ExcludeFromFilters="False"></SalesLogix:LookupProperty>
</LookupProperties>
<LookupPreFilters>
<SalesLogix:LookupPreFilter PropertyName="ActiveFlag" PropertyType="System.Boolean" OperatorCode="=" Visible="False"
 FilterValue="True"
 ></SalesLogix:LookupPreFilter>
</LookupPreFilters>
</SalesLogix:LookupControl>
  </div>

</asp:Panel>
      </td>
                <td  >
<div class=" lbl alignleft">
    <asp:Label ID="curExtendedPrice_lbl" AssociatedControlID="curExtendedPrice" runat="server" Text="<%$ resources: curExtendedPrice.Caption %>" ></asp:Label>
</div>
 <div  class="textcontrol currency"  >
    <SalesLogix:Currency
    runat="server"
    ID="curExtendedPrice" 
    ExchangeRateType="BaseRate"
    ReadOnly="true"  Required="false"
 DecimalDigits="-1"
TabIndex="12" AutoPostBack="true"  />
</div>

      </td>
      </tr>
<tr>
            <td></td>
                <td  >
<div class="slxlabel  alignleft checkboxRight">

  <SalesLogix:SLXCheckBox runat="server" ID="chkPriceLocked"  Text="<%$ resources: chkPriceLocked.Caption %>"  CssClass=""
TabIndex="13" LabelPlacement="left"  />
</div>
      </td>
      </tr>
<tr>
            <td  colspan="2" >
  <hr />
 

      </td>
            </tr>
<tr>
            <td  colspan="2" >
 <div class="twocollbl alignleft" >
   <asp:Label ID="txtComments_lbl" AssociatedControlID="txtComments" runat="server" Text="<%$ resources: txtComments.Caption %>" ></asp:Label>
 </div>
  <div  class="twocoltextcontrol"   >
<asp:TextBox runat="server" ID="txtComments"  Rows="2" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea" MultiLineMaxLength="255" TabIndex="14"  />
  </div>

      </td>
            </tr>
<tr>
            <td  colspan="2" >
  <hr />
 

      </td>
            </tr>
<tr>
            <td  colspan="2" >
<asp:Panel runat="server" ID="ctrlstWarehouses" CssClass="controlslist "
>
   <%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.ScriptResourceProvider" TagPrefix="SalesLogix" %>
  <%--Grid style overrides for quickform configurations and textbox compatibility with IE7.--%>
<style 
type="text/css">     
    .alignleft { text-align : left; }
    .alignright { text-align : right; }
    .aligncenter { text-align : center; }
	.dijitTextBox { width: auto; }
	.ISOSpace {width: 75% !important; }
</style>

 

<SalesLogix:ScriptResourceProvider ID="ICEditSalesOrderItemgrdWarehouses_Strings" runat="server">
    <Keys>
          <SalesLogix:ResourceKeyName Key="grdWarehouses.49800e87-d0d1-4d40-ad6e-514d1e8e9ff5.ColumnHeading" />
       <SalesLogix:ResourceKeyName Key="grdWarehouses.281d6953-be65-4149-a88a-d26a11947904.ColumnHeading" />
       <SalesLogix:ResourceKeyName Key="grdWarehouses.3381d323-7851-43d5-9cac-76d152f17685.ColumnHeading" />
       <SalesLogix:ResourceKeyName Key="grdWarehouses.446128f8-42dc-4691-a432-b4a09da1d58d.ColumnHeading" />
            </Keys>
</SalesLogix:ScriptResourceProvider>

				 
  <div id="ICEditSalesOrderItemgrdWarehouses_Container" style="width:100%;height:100%;" class="">
    <div id="ICEditSalesOrderItemgrdWarehouses_Grid" style="width:100%;height:100%;"
     data-dojo-type="dijit.layout.BorderContainer"
></div>
</div>



</asp:Panel>
      </td>
            </tr>
<tr>
            <td></td>
                <td  >
<asp:Panel runat="server" ID="cntButtons" CssClass="controlslist qfActionContainer"
>
   <asp:Button runat="server" ID="btnOk"
 Text="<%$ resources: btnOk.Caption %>" TabIndex="16" CssClass="slxbutton"  />
   
   <asp:Button runat="server" ID="btnCancel"
 Text="<%$ resources: btnCancel.Caption %>" TabIndex="17" CssClass="slxbutton"  />
 
</asp:Panel>
      </td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="ICEditSalesOrderItem_RTools" ToolbarLocation="right">
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=ICEditSalesOrderItem&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkICEditSalesOrderItemHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="ICEditSalesOrderItem" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.ISalesOrderItem); }
}

 

protected override void OnAddEntityBindings() {
                    // txtLineNumber.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtLineNumberTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("LineNumber", txtLineNumber, "Text");
        BindingSource.Bindings.Add(txtLineNumberTextBinding);
                    // txtProduct.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtProductTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ProductName", txtProduct, "Text");
        BindingSource.Bindings.Add(txtProductTextBinding);
                    // curPrice.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding curPriceTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Price", curPrice, "Text");
        BindingSource.Bindings.Add(curPriceTextBinding);
                    // txtDescription.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtDescriptionTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Description", txtDescription, "Text");
        BindingSource.Bindings.Add(txtDescriptionTextBinding);
                    // numDiscount.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding numDiscountTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Discount", numDiscount, "Text");
        BindingSource.Bindings.Add(numDiscountTextBinding);
                    // currCalculatedPrice.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding currCalculatedPriceTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("CalculatedPrice", currCalculatedPrice, "Text");
        BindingSource.Bindings.Add(currCalculatedPriceTextBinding);
                       // curMCCalcPrice.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding curMCCalcPriceTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("CalculatedPrice", curMCCalcPrice, "Text");
        BindingSource.Bindings.Add(curMCCalcPriceTextBinding);
                    // txtSKU.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtSKUTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ActualID", txtSKU, "Text");
        BindingSource.Bindings.Add(txtSKUTextBinding);
                    // numQuantity.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding numQuantityTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Quantity", numQuantity, "Text");
        BindingSource.Bindings.Add(numQuantityTextBinding);
                    // txtFamily.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtFamilyPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Family", txtFamily, "PickListValue");
        BindingSource.Bindings.Add(txtFamilyPickListValueBinding);
                    // lueUnitOfMeasure.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueUnitOfMeasureLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("UnitOfMeasure", lueUnitOfMeasure, "LookupResultValue");
        BindingSource.Bindings.Add(lueUnitOfMeasureLookupResultValueBinding);
                       // lueLocation.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lueLocationLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("SlxLocation", lueLocation, "LookupResultValue");
        BindingSource.Bindings.Add(lueLocationLookupResultValueBinding);
                    // curExtendedPrice.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding curExtendedPriceTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ExtendedPrice", curExtendedPrice, "Text");
        BindingSource.Bindings.Add(curExtendedPriceTextBinding);
                    // chkPriceLocked.Checked Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding chkPriceLockedCheckedBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ItemLocked", chkPriceLocked, "Checked");
        BindingSource.Bindings.Add(chkPriceLockedCheckedBinding);
                       // txtComments.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtCommentsTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("PriceDetailDescription", txtComments, "Text");
        BindingSource.Bindings.Add(txtCommentsTextBinding);
                      
   
}
                                                                                                                                                                               
protected void curPrice_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ISalesOrderItem>("SalesOrderItem.CalculatePriceChange", objarray);

  
}
protected void numDiscount_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ISalesOrderItem>("SalesOrderItem.CalculateDiscount", objarray);

          numDiscount_ChangeActionBRC(sender, e);
    
  
}
protected void numDiscount_ChangeActionBRC(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}
protected void currCalculatedPrice_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ISalesOrderItem>("SalesOrderItem.CalculateCalcPrice", objarray);

          currCalculatedPrice_ChangeActionBRC(sender, e);
    
  
}
protected void currCalculatedPrice_ChangeActionBRC(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}
protected void curMCCalcPrice_ChangeAction(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("ICEditSalesOrderItem.curMCCalcPrice_OnChange", methodArgs);

}
protected void numQuantity_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ISalesOrderItem>("SalesOrderItem.CalculateExtendedPrice", objarray);

  
}
protected void curExtendedPrice_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ISalesOrderItem>("SalesOrderItem.CalculateUnitOfMeasureChange", objarray);

    Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
    if (refresher != null) {
      refresher.RefreshAll();
    }
    else {  
      Response.Redirect(Request.Url.ToString());
    }

}
protected void btnOk_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.ISalesOrderItem _entity = BindingSource.Current as Sage.Entity.Interfaces.ISalesOrderItem;
  if (_entity != null)
  {
    object _parent = GetParentEntity();
    if (DialogService.ChildInsertInfo != null)
    {
        if (_parent != null)
        {
            if (DialogService.ChildInsertInfo.ParentReferenceProperty != null)
            {
                DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
            }
        }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
    if (page != null)
    {
        if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
        {
            shouldSave = false;
        }
    }

    if(shouldSave)
    {
       _entity.Save();
    }

    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null)
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }
  }

    Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
    if (refresher != null) {
      refresher.RefreshAll();
    }
    else {  
      Response.Redirect(Request.Url.ToString());
    }

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 curPrice.TextChanged += new EventHandler(curPrice_ChangeAction);
numDiscount.TextChanged += new EventHandler(numDiscount_ChangeAction);
currCalculatedPrice.TextChanged += new EventHandler(currCalculatedPrice_ChangeAction);
curMCCalcPrice.TextChanged += new EventHandler(curMCCalcPrice_ChangeAction);
numQuantity.TextChanged += new EventHandler(numQuantity_ChangeAction);
curExtendedPrice.TextChanged += new EventHandler(curExtendedPrice_ChangeAction);
btnOk.Click += new EventHandler(btnOk_ClickAction);
btnOk.Click += new EventHandler(DialogService.CloseEventHappened);
btnOk.Click += new EventHandler(Refresh);
btnCancel.Click += new EventHandler(DialogService.CloseEventHappened);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("ICEditSalesOrderItem.OnLoad1", methodArgs);

}
protected void quickformload1(object sender, EventArgs e) {
Sage.Entity.Interfaces.ISalesOrderItem salesOrderItem = this.BindingSource.Current as Sage.Entity.Interfaces.ISalesOrderItem;
if (salesOrderItem != null)
{
    Sage.Platform.SData.IAppIdMappingService mappingService =
        Sage.Platform.Application.ApplicationContext.Current.Services.Get<Sage.Platform.SData.IAppIdMappingService>(
            true);
	bool isIntegrated = mappingService.IsIntegrationEnabled();
	if (isIntegrated)
	{
		var clientContextService = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.ClientContextService>();
		if (clientContextService != null)
		{
			if (clientContextService.CurrentContext.ContainsKey("CommodityId"))
            {
                if (salesOrderItem.Product != null && salesOrderItem.Product.GlobalSyncId != null)
                {
                    clientContextService.CurrentContext["CommodityId"] = salesOrderItem.Product.GlobalSyncId.ToString();
                }
                else
                {
                    clientContextService.CurrentContext.Remove("CommodityId");
                }
            }
            else
            {
                if (salesOrderItem.Product != null)
                {
                    if (salesOrderItem.Product.GlobalSyncId != null)
                    {
                        clientContextService.CurrentContext.Add("CommodityId", salesOrderItem.Product.GlobalSyncId.ToString());
                    }
                    else
                    {
                        clientContextService.CurrentContext.Add("CommodityId", String.Empty);
                    }
                }
            }
		}
	}
}

}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload1(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ClientBindingMgr.RegisterSaveButton(btnOk);

ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
ClientBindingMgr.RegisterDialogCancelButton(btnCancel);

                                var script = new StringBuilder();
                                script.AppendLine("require(['" + Page.ResolveUrl("~/SmartParts/SalesOrderItem/ICEditSalesOrderItem.js") + "'], function () {");
                                if (Page.IsPostBack)
                                {
                                    script.Append(" Sage.UI.Forms.ICEditSalesOrderItem.init({workspace: '" + getMyWorkspace() + "'} );");
                                }
                                else 
                                {
                                    script.AppendLine("require(['dojo/ready'], function(ready) {");
                                    script.Append("ready(function () {Sage.UI.Forms.ICEditSalesOrderItem.init({workspace: '" + getMyWorkspace() + "'} ); });");
                                    script.AppendLine("});");//end ready require
                                }

                                script.AppendLine("});");// end require
                                ScriptManager.RegisterStartupScript(this, GetType(), "initialize_ICEditSalesOrderItem", script.ToString(), true);
quickformload0(this, EventArgs.Empty);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new ICEditSalesOrderItemAdapter(this)); }
}

public class ICEditSalesOrderItemAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IICEditSalesOrderItem
{
    public ICEditSalesOrderItemAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.IControlsListControl _ctrlstLineNumber;
    public  Sage.Platform.Controls.IControlsListControl ctrlstLineNumber
    {
        get { return FindControl(ref _ctrlstLineNumber, "ctrlstLineNumber"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtLineNumber;
    public  Sage.Platform.Controls.ITextBoxControl txtLineNumber
    {
        get { return FindControl(ref _txtLineNumber, "txtLineNumber"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtProduct;
    public  Sage.Platform.Controls.ITextBoxControl txtProduct
    {
        get { return FindControl(ref _txtProduct, "txtProduct"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtDescription;
    public  Sage.Platform.Controls.ITextBoxControl txtDescription
    {
        get { return FindControl(ref _txtDescription, "txtDescription"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtSKU;
    public  Sage.Platform.Controls.ITextBoxControl txtSKU
    {
        get { return FindControl(ref _txtSKU, "txtSKU"); }
    }
    private Sage.Platform.Controls.IPickListControl _txtFamily;
    public  Sage.Platform.Controls.IPickListControl txtFamily
    {
        get { return FindControl(ref _txtFamily, "txtFamily"); }
    }
    private Sage.Platform.Controls.IControlsListControl _ctrlstWarehouse;
    public  Sage.Platform.Controls.IControlsListControl ctrlstWarehouse
    {
        get { return FindControl(ref _ctrlstWarehouse, "ctrlstWarehouse"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueLocation;
    public  Sage.Platform.Controls.ILookupControl lueLocation
    {
        get { return FindControl(ref _lueLocation, "lueLocation"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtComments;
    public  Sage.Platform.Controls.ITextBoxControl txtComments
    {
        get { return FindControl(ref _txtComments, "txtComments"); }
    }
    private Sage.Platform.Controls.IControlsListControl _ctrlstWarehouses;
    public  Sage.Platform.Controls.IControlsListControl ctrlstWarehouses
    {
        get { return FindControl(ref _ctrlstWarehouses, "ctrlstWarehouses"); }
    }
    private Sage.Platform.Controls.ICurrencyControl _curPrice;
    public  Sage.Platform.Controls.ICurrencyControl curPrice
    {
        get { return FindControl(ref _curPrice, "curPrice"); }
    }
    private Sage.Platform.Controls.INumericControl _numDiscount;
    public  Sage.Platform.Controls.INumericControl numDiscount
    {
        get { return FindControl(ref _numDiscount, "numDiscount"); }
    }
    private Sage.Platform.Controls.ICurrencyControl _currCalculatedPrice;
    public  Sage.Platform.Controls.ICurrencyControl currCalculatedPrice
    {
        get { return FindControl(ref _currCalculatedPrice, "currCalculatedPrice"); }
    }
    private Sage.Platform.Controls.IControlsListControl _ctrlstMCPrice;
    public  Sage.Platform.Controls.IControlsListControl ctrlstMCPrice
    {
        get { return FindControl(ref _ctrlstMCPrice, "ctrlstMCPrice"); }
    }
    private Sage.Platform.Controls.ICurrencyControl _curMCCalcPrice;
    public  Sage.Platform.Controls.ICurrencyControl curMCCalcPrice
    {
        get { return FindControl(ref _curMCCalcPrice, "curMCCalcPrice"); }
    }
    private Sage.Platform.Controls.INumericControl _numQuantity;
    public  Sage.Platform.Controls.INumericControl numQuantity
    {
        get { return FindControl(ref _numQuantity, "numQuantity"); }
    }
    private Sage.Platform.Controls.ILookupControl _lueUnitOfMeasure;
    public  Sage.Platform.Controls.ILookupControl lueUnitOfMeasure
    {
        get { return FindControl(ref _lueUnitOfMeasure, "lueUnitOfMeasure"); }
    }
    private Sage.Platform.Controls.ICurrencyControl _curExtendedPrice;
    public  Sage.Platform.Controls.ICurrencyControl curExtendedPrice
    {
        get { return FindControl(ref _curExtendedPrice, "curExtendedPrice"); }
    }
    private Sage.Platform.Controls.ICheckBoxControl _chkPriceLocked;
    public  Sage.Platform.Controls.ICheckBoxControl chkPriceLocked
    {
        get { return FindControl(ref _chkPriceLocked, "chkPriceLocked"); }
    }
    private Sage.Platform.Controls.IControlsListControl _cntButtons;
    public  Sage.Platform.Controls.IControlsListControl cntButtons
    {
        get { return FindControl(ref _cntButtons, "cntButtons"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnOk;
    public  Sage.Platform.Controls.IButtonControl btnOk
    {
        get { return FindControl(ref _btnOk, "btnOk"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnCancel;
    public  Sage.Platform.Controls.IButtonControl btnCancel
    {
        get { return FindControl(ref _btnCancel, "btnCancel"); }
    }

    public  void OnLoad1(System.EventArgs e)
    {
        Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
        Object[] methodArgs = new Object[] { this, e };
        lib.Execute("ICEditSalesOrderItem.OnLoad1", methodArgs);
    }
    public  void curMCCalcPrice_OnChange(System.EventArgs e)
    {
        Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
        Object[] methodArgs = new Object[] { this, e };
        lib.Execute("ICEditSalesOrderItem.curMCCalcPrice_OnChange", methodArgs);
    }
}

</script>

<script type="text/javascript">
</script>
