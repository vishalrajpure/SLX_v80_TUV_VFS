<%@ Control Language="C#" ClassName="EditSalesOrderItem" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="50%" />
            <col width="50%" />
     <tr>
            <td  >
<asp:Panel runat="server" ID="ctrlstLineNumber" CssClass="controlslist "
>
   <div class=" lbl alignleft" >
   <asp:Label ID="txtLineNumber_lbl" AssociatedControlID="txtLineNumber" runat="server" Text="<%$ resources: txtLineNumber.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtLineNumber" Enabled="false" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox"  />
  </div>

</asp:Panel>
      </td>
                <td  >
<asp:Panel runat="server" ID="ctrlstPriceLevel" CssClass="controlslist "
>
   <div class=" lbl alignleft">
   <asp:Label ID="lstbxPriceLevel_lbl" AssociatedControlID="lstbxPriceLevel" runat="server" Text="<%$ resources: lstbxPriceLevel.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol select"  > 
<asp:ListBox runat="server" ID="lstbxPriceLevel"  SelectionMode="Single" Rows="1" data-dojo-type="dijit.form.Select"  CssClass="select-control " TabIndex="5" AutoPostBack="true"  >
</asp:ListBox>
  </div>

</asp:Panel>
      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtProductName_lbl" AssociatedControlID="txtProductName" runat="server" Text="<%$ resources: txtProductName.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtProductName" ReadOnly="true" Text="<%$ resources: txtProductName.Text %>"  dojoType="Sage.UI.Controls.TextBox" TabIndex="1"  />
  </div>

      </td>
                <td  >
<div class=" lbl alignleft">
    <asp:Label ID="curPrice_lbl" AssociatedControlID="curPrice" runat="server" Text="<%$ resources: curPrice.Caption %>" ></asp:Label>
</div>
 <div  class="textcontrol currency"  >
    <SalesLogix:Currency
    runat="server"
    ID="curPrice" 
    ExchangeRateType="BaseRate"
    ReadOnly="true"  Required="false"
 DisplayCurrencyCode="false" DecimalDigits="-1"
TabIndex="6" AutoPostBack="true"  />
</div>

      </td>
      </tr>
<tr>
            <td rowspan="4"  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtDescription_lbl" AssociatedControlID="txtDescription" runat="server" Text="<%$ resources: txtDescription.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtDescription"  Rows="2" TextMode="MultiLine" Columns="40" dojoType="Sage.UI.Controls.SimpleTextarea" TabIndex="2"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="txtDiscount_lbl" AssociatedControlID="txtDiscount" runat="server" Text="<%$ resources: txtDiscount.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol numeric"  > 
    <SalesLogix:NumericControl runat="server" ID="txtDiscount"
TabIndex="7" FormatType="Percent" Strict="False" 
AutoPostBack="true"  />
  </div>

      </td>
      </tr>
<tr>
                  <td  >
<div class=" lbl alignleft">
    <asp:Label ID="curCalculatedPrice_lbl" AssociatedControlID="curCalculatedPrice" runat="server" Text="<%$ resources: curCalculatedPrice.Caption %>" ></asp:Label>
</div>
 <div  class="textcontrol currency"  >
    <SalesLogix:Currency
    runat="server"
    ID="curCalculatedPrice" 
    ExchangeRateType="BaseRate"
     Required="false"
 DisplayCurrencyCode="false" DecimalDigits="-1"
TabIndex="8" AutoPostBack="true"  />
</div>

      </td>
      </tr>
<tr>
                  <td  >
<asp:Panel runat="server" ID="ctrlstMCPrice" CssClass="controlslist "
>
  <div class=" lbl alignleft">
    <asp:Label ID="curMCCalcPrice_lbl" AssociatedControlID="curMCCalcPrice" runat="server" Text="<%$ resources: curMCCalcPrice.Caption %>" ></asp:Label>
</div>
 <div  class="textcontrol currency"  >
    <SalesLogix:Currency
    runat="server"
    ID="curMCCalcPrice" 
    ExchangeRateType="EntityRate"
     Required="false"
 DecimalDigits="-1"
TabIndex="9" AutoPostBack="true"  />
</div>

</asp:Panel>
      </td>
      </tr>
<tr>
                  <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="numQuantity_lbl" AssociatedControlID="numQuantity" runat="server" Text="<%$ resources: numQuantity.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol numeric"  > 
    <SalesLogix:NumericControl runat="server" ID="numQuantity"
TabIndex="10" Strict="False" 
AutoPostBack="true"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtSKU_lbl" AssociatedControlID="txtSKU" runat="server" Text="<%$ resources: txtSKU.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtSKU" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox" TabIndex="3"  />
  </div>

      </td>
                <td  >
<div class=" lbl alignleft">
    <asp:Label ID="curExtendedPrice_lbl" AssociatedControlID="curExtendedPrice" runat="server" Text="<%$ resources: curExtendedPrice.Caption %>" ></asp:Label>
</div>
 <div  class="textcontrol currency"  >
    <SalesLogix:Currency
    runat="server"
    ID="curExtendedPrice" 
    ExchangeRateType="BaseRate"
    ReadOnly="true"  Required="false"
 DisplayCurrencyCode="false" DecimalDigits="-1"
TabIndex="11"  />
</div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="pklFamily_lbl" AssociatedControlID="pklFamily" runat="server" Text="<%$ resources: pklFamily.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol picklist"  > 
    <SalesLogix:PickListControl runat="server" ID="pklFamily" PickListName="Product Family" MustExistInList="false" TabIndex="4"  />
  </div>

      </td>
                <td></td>
      </tr>
<tr>
            <td></td>
                <td  >
<asp:Panel runat="server" ID="QFControlsList" CssClass="controlslist qfActionContainer"
>
   <asp:Button runat="server" ID="btnOK"
 Text="<%$ resources: btnOK.Caption %>" TabIndex="12" CssClass="slxbutton"  />
   
   <asp:Button runat="server" ID="btnCancel"
 Text="<%$ resources: btnCancel.Caption %>" TabIndex="13" CssClass="slxbutton"  />
 
</asp:Panel>
      </td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="EditSalesOrderItem_RTools" ToolbarLocation="right">
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=EditSalesOrderItem&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkEditSalesOrderItemHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="EditSalesOrderItem" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.ISalesOrderItem); }
}

 

protected override void OnAddEntityBindings() {
                    // txtLineNumber.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtLineNumberTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("LineNumber", txtLineNumber, "Text");
        BindingSource.Bindings.Add(txtLineNumberTextBinding);
                       // lstbxPriceLevel.SelectedValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lstbxPriceLevelSelectedValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Program", lstbxPriceLevel, "SelectedValue");
        lstbxPriceLevelSelectedValueBinding.ChangeNotificationEventName = "TextChanged";
        lstbxPriceLevelSelectedValueBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(lstbxPriceLevelSelectedValueBinding);
                    // txtProductName.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtProductNameTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ProductName", txtProductName, "Text");
        BindingSource.Bindings.Add(txtProductNameTextBinding);
                    // curPrice.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding curPriceTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Price", curPrice, "Text");
        BindingSource.Bindings.Add(curPriceTextBinding);
                    // txtDescription.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtDescriptionTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Description", txtDescription, "Text");
        BindingSource.Bindings.Add(txtDescriptionTextBinding);
                    // txtDiscount.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtDiscountTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Discount", txtDiscount, "Text");
        BindingSource.Bindings.Add(txtDiscountTextBinding);
                    // curCalculatedPrice.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding curCalculatedPriceTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("CalculatedPrice", curCalculatedPrice, "Text");
        BindingSource.Bindings.Add(curCalculatedPriceTextBinding);
                       // curMCCalcPrice.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding curMCCalcPriceTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("CalculatedPrice", curMCCalcPrice, "Text");
        BindingSource.Bindings.Add(curMCCalcPriceTextBinding);
                    // numQuantity.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding numQuantityTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Quantity", numQuantity, "Text");
        BindingSource.Bindings.Add(numQuantityTextBinding);
                    // txtSKU.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtSKUTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ActualID", txtSKU, "Text");
        BindingSource.Bindings.Add(txtSKUTextBinding);
                    // curExtendedPrice.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding curExtendedPriceTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ExtendedPrice", curExtendedPrice, "Text");
        BindingSource.Bindings.Add(curExtendedPriceTextBinding);
                    // pklFamily.PickListValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding pklFamilyPickListValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("Family", pklFamily, "PickListValue");
        BindingSource.Bindings.Add(pklFamilyPickListValueBinding);
             
   
}
                                                                                                                              
protected void lstbxPriceLevel_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ISalesOrderItem>("SalesOrderItem.CalcPriceFromProgramPrice", objarray);

          lstbxPriceLevel_ChangeActionBRC(sender, e);
    
  
}
protected void lstbxPriceLevel_ChangeActionBRC(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}
protected void curPrice_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ISalesOrderItem>("SalesOrderItem.CalculatePriceChange", objarray);

  
}
protected void txtDiscount_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ISalesOrderItem>("SalesOrderItem.CalculateDiscount", objarray);

          txtDiscount_ChangeActionBRC(sender, e);
    
  
}
protected void txtDiscount_ChangeActionBRC(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}
protected void curCalculatedPrice_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ISalesOrderItem>("SalesOrderItem.CalculateCalcPrice", objarray);

          curCalculatedPrice_ChangeActionBRC(sender, e);
    
  
}
protected void curCalculatedPrice_ChangeActionBRC(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}
protected void curMCCalcPrice_ChangeAction(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("EditSalesOrderItem.curMCCalcPrice_OnChange", methodArgs);

}
protected void numQuantity_ChangeAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.ISalesOrderItem>("SalesOrderItem.CalculateExtendedPrice", objarray);

  
}
protected void btnOK_ClickAction(object sender, EventArgs e) {
  Sage.Entity.Interfaces.ISalesOrderItem _entity = BindingSource.Current as Sage.Entity.Interfaces.ISalesOrderItem;
  if (_entity != null)
  {
    object _parent = GetParentEntity();
    if (DialogService.ChildInsertInfo != null)
    {
        if (_parent != null)
        {
            if (DialogService.ChildInsertInfo.ParentReferenceProperty != null)
            {
                DialogService.ChildInsertInfo.ParentReferenceProperty.SetValue(_entity, _parent, null);
            }
        }
    }
    bool shouldSave = true;
    Sage.Platform.WebPortal.EntityPage page = Page as Sage.Platform.WebPortal.EntityPage;
    if (page != null)
    {
        if(IsInDialog() && page.ModeId.ToUpper() == "INSERT")
        {
            shouldSave = false;
        }
    }

    if(shouldSave)
    {
       _entity.Save();
    }

    if (_parent != null)
    {
        if (DialogService.ChildInsertInfo != null)
        {
           if (DialogService.ChildInsertInfo.ParentsCollectionProperty != null)
           {
              System.Reflection.MethodInfo _add = DialogService.ChildInsertInfo.ParentsCollectionProperty.PropertyType.GetMethod("Add");
              _add.Invoke(DialogService.ChildInsertInfo.ParentsCollectionProperty.GetValue(_parent, null), new object[] { _entity });
           }
        }
     }
  }

          btnOK_ClickActionBRC(sender, e);
    
    Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
    if (refresher != null) {
      refresher.RefreshAll();
    }
    else {  
      Response.Redirect(Request.Url.ToString());
    }

}
protected void btnOK_ClickActionBRC(object sender, EventArgs e) {
Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
if (refresher != null) {
  refresher.RefreshAll();
}
else {  
  Response.Redirect(Request.Url.ToString());
}
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 lstbxPriceLevel.TextChanged += new EventHandler(lstbxPriceLevel_ChangeAction);
curPrice.TextChanged += new EventHandler(curPrice_ChangeAction);
txtDiscount.TextChanged += new EventHandler(txtDiscount_ChangeAction);
curCalculatedPrice.TextChanged += new EventHandler(curCalculatedPrice_ChangeAction);
curMCCalcPrice.TextChanged += new EventHandler(curMCCalcPrice_ChangeAction);
numQuantity.TextChanged += new EventHandler(numQuantity_ChangeAction);
btnOK.Click += new EventHandler(btnOK_ClickAction);
btnOK.Click += new EventHandler(DialogService.CloseEventHappened);
btnOK.Click += new EventHandler(Refresh);
btnCancel.Click += new EventHandler(DialogService.CloseEventHappened);


}

protected void quickformload0(object sender, EventArgs e) {
Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
Object[] methodArgs = new Object[] { FormAdapter, e };
lib.Execute("EditSalesOrderItem.OnFormLoad", methodArgs);

}
protected void quickformload1(object sender, EventArgs e) {
Sage.Entity.Interfaces.ISalesOrderItem salesOrderItem = BindingSource.Current as Sage.Entity.Interfaces.ISalesOrderItem;
lstbxPriceLevel.Items.Clear();
if (salesOrderItem.Product != null)
{
	ListItem item;
	foreach (Sage.Entity.Interfaces.IProductProgram priceLevel in salesOrderItem.Product.ProductProgram)
	{
		item = new ListItem();
		item.Text = priceLevel.Program;
		item.Value = priceLevel.Program;
		lstbxPriceLevel.Items.Add(item);
	}
	lstbxPriceLevel.SelectedValue = salesOrderItem.Program;
}

}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);
quickformload1(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
ClientBindingMgr.RegisterSaveButton(btnOK);

ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
ClientBindingMgr.RegisterDialogCancelButton(btnCancel);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new EditSalesOrderItemAdapter(this)); }
}

public class EditSalesOrderItemAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IEditSalesOrderItem
{
    public EditSalesOrderItemAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.IControlsListControl _ctrlstLineNumber;
    public  Sage.Platform.Controls.IControlsListControl ctrlstLineNumber
    {
        get { return FindControl(ref _ctrlstLineNumber, "ctrlstLineNumber"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtLineNumber;
    public  Sage.Platform.Controls.ITextBoxControl txtLineNumber
    {
        get { return FindControl(ref _txtLineNumber, "txtLineNumber"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtProductName;
    public  Sage.Platform.Controls.ITextBoxControl txtProductName
    {
        get { return FindControl(ref _txtProductName, "txtProductName"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtDescription;
    public  Sage.Platform.Controls.ITextBoxControl txtDescription
    {
        get { return FindControl(ref _txtDescription, "txtDescription"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtSKU;
    public  Sage.Platform.Controls.ITextBoxControl txtSKU
    {
        get { return FindControl(ref _txtSKU, "txtSKU"); }
    }
    private Sage.Platform.Controls.IPickListControl _pklFamily;
    public  Sage.Platform.Controls.IPickListControl pklFamily
    {
        get { return FindControl(ref _pklFamily, "pklFamily"); }
    }
    private Sage.Platform.Controls.IControlsListControl _ctrlstPriceLevel;
    public  Sage.Platform.Controls.IControlsListControl ctrlstPriceLevel
    {
        get { return FindControl(ref _ctrlstPriceLevel, "ctrlstPriceLevel"); }
    }
    private Sage.Platform.Controls.IListBoxControl _lstbxPriceLevel;
    public  Sage.Platform.Controls.IListBoxControl lstbxPriceLevel
    {
        get { return FindControl(ref _lstbxPriceLevel, "lstbxPriceLevel"); }
    }
    private Sage.Platform.Controls.ICurrencyControl _curPrice;
    public  Sage.Platform.Controls.ICurrencyControl curPrice
    {
        get { return FindControl(ref _curPrice, "curPrice"); }
    }
    private Sage.Platform.Controls.INumericControl _txtDiscount;
    public  Sage.Platform.Controls.INumericControl txtDiscount
    {
        get { return FindControl(ref _txtDiscount, "txtDiscount"); }
    }
    private Sage.Platform.Controls.ICurrencyControl _curCalculatedPrice;
    public  Sage.Platform.Controls.ICurrencyControl curCalculatedPrice
    {
        get { return FindControl(ref _curCalculatedPrice, "curCalculatedPrice"); }
    }
    private Sage.Platform.Controls.IControlsListControl _ctrlstMCPrice;
    public  Sage.Platform.Controls.IControlsListControl ctrlstMCPrice
    {
        get { return FindControl(ref _ctrlstMCPrice, "ctrlstMCPrice"); }
    }
    private Sage.Platform.Controls.ICurrencyControl _curMCCalcPrice;
    public  Sage.Platform.Controls.ICurrencyControl curMCCalcPrice
    {
        get { return FindControl(ref _curMCCalcPrice, "curMCCalcPrice"); }
    }
    private Sage.Platform.Controls.INumericControl _numQuantity;
    public  Sage.Platform.Controls.INumericControl numQuantity
    {
        get { return FindControl(ref _numQuantity, "numQuantity"); }
    }
    private Sage.Platform.Controls.ICurrencyControl _curExtendedPrice;
    public  Sage.Platform.Controls.ICurrencyControl curExtendedPrice
    {
        get { return FindControl(ref _curExtendedPrice, "curExtendedPrice"); }
    }
    private Sage.Platform.Controls.IControlsListControl _QFControlsList;
    public  Sage.Platform.Controls.IControlsListControl QFControlsList
    {
        get { return FindControl(ref _QFControlsList, "QFControlsList"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnOK;
    public  Sage.Platform.Controls.IButtonControl btnOK
    {
        get { return FindControl(ref _btnOK, "btnOK"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnCancel;
    public  Sage.Platform.Controls.IButtonControl btnCancel
    {
        get { return FindControl(ref _btnCancel, "btnCancel"); }
    }

    public  void OnFormLoad(System.EventArgs e)
    {
        Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
        Object[] methodArgs = new Object[] { this, e };
        lib.Execute("EditSalesOrderItem.OnFormLoad", methodArgs);
    }
    public  void curMCCalcPrice_OnChange(System.EventArgs e)
    {
        Sage.Platform.DynamicMethod.DynamicMethodLibrary lib = Sage.Platform.Orm.DynamicMethodLibraryHelper.Instance;
        Object[] methodArgs = new Object[] { this, e };
        lib.Execute("EditSalesOrderItem.curMCCalcPrice_OnChange", methodArgs);
    }
}

</script>

<script type="text/javascript">
</script>
