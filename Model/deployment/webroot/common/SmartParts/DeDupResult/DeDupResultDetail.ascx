<%@ Control Language="C#" ClassName="DeDupResultDetail" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
<table border="0" cellpadding="1" cellspacing="0" class="formtable">
         <col width="50%" />
            <col width="50%" />
     <tr>
            <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="lnkDeDupJob_lbl" AssociatedControlID="lnkDeDupJob" runat="server" Text="<%$ resources: lnkDeDupJob.Caption %>" ></asp:Label>
 </div>
  <SalesLogix:PageLink runat="server" ID="lnkDeDupJob" NavigateUrl="DeDupJob"         LinkType="EntityAlias"></SalesLogix:PageLink>

      </td>
                <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtStatus_lbl" AssociatedControlID="txtStatus" runat="server" Text="<%$ resources: txtStatus.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtStatus" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtSource_lbl" AssociatedControlID="txtSource" runat="server" Text="<%$ resources: txtSource.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtSource" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="ownResolvedBy_lbl" AssociatedControlID="ownResolvedBy" runat="server" Text="<%$ resources: ownResolvedBy.Caption %>" ></asp:Label>
 </div>   
   <div  class="textcontrol"  > 
<SalesLogix:OwnerControl runat="server" ID="ownResolvedBy" ReadOnly="true" Types="$qfcontrol.Types"  />
  </div>

      </td>
      </tr>
<tr>
            <td  >
 <div class=" lbl alignleft" >
   <asp:Label ID="txtSourceType_lbl" AssociatedControlID="txtSourceType" runat="server" Text="<%$ resources: txtSourceType.Caption %>" ></asp:Label>
 </div>
  <div  class="textcontrol"   >
<asp:TextBox runat="server" ID="txtSourceType" ReadOnly="true"  dojoType="Sage.UI.Controls.TextBox"  />
  </div>

      </td>
                <td  >
 <div class=" lbl alignleft">
   <asp:Label ID="dtpResolvedDate_lbl" AssociatedControlID="dtpResolvedDate" runat="server" Text="<%$ resources: dtpResolvedDate.Caption %>" ></asp:Label>
 </div>
   <div  class="textcontrol datepicker"  >
    <SalesLogix:DateTimePicker runat="server" ID="dtpResolvedDate" ReadOnly="true" DisplayTime="false" />
  </div>

      </td>
      </tr>
<tr>
            <td  colspan="2" >
<div class="mainContentHeader2"><span id="QFHorizontalSeparator2" 	>
<asp:Localize runat="server" Text="<%$ resources: QFHorizontalSeparator2.Caption %>"   >Search Filters</asp:Localize></span></div>


      </td>
            </tr>
<tr>
            <td  colspan="2" >
<SalesLogix:SlxGridView runat="server" ID="dgFilters" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 ExpandableRows="True" ResizableColumns="True" >
<Columns>
   <asp:CheckBoxField DataField="Enabled" ReadOnly="True"
      HeaderText="<%$ resources: dgFilters.0aa6360b-3cda-461b-8131-e2a7ed7d3afd.ColumnHeading %>"        >
          </asp:CheckBoxField>
    <asp:BoundField DataField="FilterDisplayName"
      HeaderText="<%$ resources: dgFilters.eaf9638a-d7cf-4804-a029-bd386082b353.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="FilterValue"
      HeaderText="<%$ resources: dgFilters.cf498714-dc19-451d-971f-4c15f7b79bd6.ColumnHeading %>"          >
      </asp:BoundField>
 </Columns>
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">


</script>

      </td>
            </tr>
<tr>
            <td  colspan="2" >
<div class="mainContentHeader2"><span id="QFHorizontalSeparator" 	>
<asp:Localize runat="server" Text="<%$ resources: QFHorizontalSeparator.Caption %>"   >Unresolved Duplicates</asp:Localize></span></div>


      </td>
            </tr>
<tr>
            <td  colspan="2" >
<SalesLogix:SlxGridView runat="server" ID="grdDupMatches" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdDupMatches_RowCommand"
 DataKeyNames="EntityId"
>
<Columns>
 <asp:CommandField ShowSelectButton="true"
  SelectText="<%$ resources: grdDupMatches.0cc2e5a5-e289-49d3-b885-2e565fafef20.Text %>" ButtonType="link"
             >
          </asp:CommandField>
    <asp:BoundField DataField="Score"
      HeaderText="<%$ resources: grdDupMatches.d61962df-7a76-42c1-b677-2a20f0b51367.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="EntityDescription"
      HeaderText="<%$ resources: grdDupMatches.25547e45-355d-4ce2-a7cc-4cb200357891.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:BoundField DataField="EntityTypeName"
      HeaderText="<%$ resources: grdDupMatches.1138735b-4440-4de2-ba40-218f4d6642a8.ColumnHeading %>"          >
      </asp:BoundField>
 </Columns>
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">


protected void grdDupMatches_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dsDupMatches.SelectedIndex = rowIndex;
        object currentEntity = dsDupMatches.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
        string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
            if (grdDupMatches.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdDupMatches.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dsDupMatches.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
                        currentEntity = dsDupMatches.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdDupMatches.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }
    }
    grdDupMatches_refresh();
}
    protected void grdDupMatches_refresh()
    {
        if (PageWorkItem != null) {
            Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
            if (refresher != null)
            {
                refresher.RefreshAll();
            }
            else
            {
                Response.Redirect(Request.Url.ToString());
            }
        }
    }

        </script>

      </td>
            </tr>
<tr>
            <td></td>
                <td  >
<asp:Panel runat="server" ID="ctrlstButtons" CssClass="controlslist qfActionContainer"
>
   <asp:Button runat="server" ID="btnNoDuplicate"
 Text="<%$ resources: btnNoDuplicate.Caption %>"  />
   
   <asp:Button runat="server" ID="btnCancel"
 Text="<%$ resources: btnCancel.Caption %>"  />
 
</asp:Panel>
      </td>
      </tr>
<tr>
            <td></td>
                <td></td>
      </tr>
</table>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="DeDupResultDetail_RTools" ToolbarLocation="right">
   <SalesLogix:GroupNavigator runat="server" ID="grpNavDeDupResults" ></SalesLogix:GroupNavigator>
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=DeDupResultDetail&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkDeDupResultDetailHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="DeDupResultDetail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IDeDupResult); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dsDupMatches;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dsDupMatches
{ 
  get 
  {
    if (_dsDupMatches == null)
    {
             _dsDupMatches = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Platform.ComponentModel.ComponentView), 
	    EntityType                     ,"GetMatchResults", System.Reflection.MemberTypes.Method);
            	   	}
 	return _dsDupMatches;
  }
}

void dsDupMatches_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dsDupMatches.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dsDupMatches);
   }
}

 



 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dsFilters;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dsFilters
{ 
  get 
  {
    if (_dsFilters == null)
    {
             _dsFilters = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Platform.ComponentModel.ComponentView), 
	    EntityType                     ,"GetSearchFilters", System.Reflection.MemberTypes.Method);
            	   	}
 	return _dsFilters;
  }
}

void dsFilters_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dsFilters.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dsFilters);
   }
}

 



 

protected override void OnAddEntityBindings() {
                 // lnkDeDupJob.EntityId Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lnkDeDupJobEntityIdBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("DeDupJob.Id", lnkDeDupJob, "EntityId");
        BindingSource.Bindings.Add(lnkDeDupJobEntityIdBinding);
                 // lnkDeDupJob.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding lnkDeDupJobTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("DeDupJob.JobNumber", lnkDeDupJob, "Text");
        lnkDeDupJobTextBinding.IgnoreFLSDisabling = true;
        BindingSource.Bindings.Add(lnkDeDupJobTextBinding);
                    // txtStatus.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtStatusTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ResultDescription", txtStatus, "Text");
        BindingSource.Bindings.Add(txtStatusTextBinding);
                    // txtSource.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtSourceTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("SourceEntityDescription", txtSource, "Text");
        BindingSource.Bindings.Add(txtSourceTextBinding);
                    // ownResolvedBy.LookupResultValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding ownResolvedByLookupResultValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ResolvedBy", ownResolvedBy, "LookupResultValue");
        BindingSource.Bindings.Add(ownResolvedByLookupResultValueBinding);
                    // txtSourceType.Text Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding txtSourceTypeTextBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("SourceEntityTypeName", txtSourceType, "Text");
        BindingSource.Bindings.Add(txtSourceTypeTextBinding);
                    // dtpResolvedDate.DateTimeValue Binding
        Sage.Platform.WebPortal.Binding.WebEntityBinding dtpResolvedDateDateTimeValueBinding = new Sage.Platform.WebPortal.Binding.WebEntityBinding("ResolvedDate", dtpResolvedDate, "DateTimeValue");
        BindingSource.Bindings.Add(dtpResolvedDateDateTimeValueBinding);
             dsFilters.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("GetSearchFilters()", dgFilters ));
   dsFilters.BindFieldNames = new String[] { "Id","Enabled","FilterDisplayName","FilterValue" };
              dsDupMatches.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("GetMatchResults()", grdDupMatches ));
   dsDupMatches.BindFieldNames = new String[] { "EntityId","Score","EntityDescription","EntityTypeName" };
              
     BindingSource.OnCurrentEntitySet += new EventHandler(dsDupMatches_OnCurrentEntitySet);
      BindingSource.OnCurrentEntitySet += new EventHandler(dsFilters_OnCurrentEntitySet);
    
    }
                                                                                           
protected void grdDupMatches_RowSelectedAction(object sender, EventArgs e) {
if (DialogService != null)
{
    DialogService.SetSpecs(20, 20, 750, 850, "MergeRecords", "", true);
    Sage.Entity.Interfaces.IDeDupResult dupResult = BindingSource.Current as Sage.Entity.Interfaces.IDeDupResult;
    	  	
	Sage.SalesLogix.Web.Controls.SlxGridView grd = sender as Sage.SalesLogix.Web.Controls.SlxGridView;
	string selectedTargetEntityId = grd.SelectedDataKey.Value.ToString();
	object mergeAguments =  dupResult.GetMergeArguments(selectedTargetEntityId);
    
    if (DialogService.DialogParameters.ContainsKey("mergeArguments"))
    {
        DialogService.DialogParameters.Remove("mergeArguments");
    }
   
    DialogService.DialogParameters.Add("mergeArguments", mergeAguments);
    DialogService.ShowDialog();
}	

}
protected void btnNoDuplicate_ClickAction(object sender, EventArgs e) {
      object[] objarray = new object[] { this.BindingSource.Current };
     Sage.Platform.EntityFactory.Execute<Sage.Entity.Interfaces.IDeDupResult>("DeDupResult.UpdateStatusNoDuplicate", objarray);

  
}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 grdDupMatches.SelectedIndexChanged += new EventHandler(grdDupMatches_RowSelectedAction);
btnNoDuplicate.Click += new EventHandler(btnNoDuplicate_ClickAction);
btnNoDuplicate.Click += new EventHandler(DialogService.CloseEventHappened);
btnNoDuplicate.Click += new EventHandler(Refresh);
btnCancel.Click += new EventHandler(DialogService.CloseEventHappened);


}

protected void quickformload0(object sender, EventArgs e) {
// Handle if the smart part is hosted either as a main view or dialog and show
// buttons as appropiate
Sage.Platform.Application.UI.IWorkspace wkspace = getMyWorkspace();
if (wkspace is Sage.Platform.WebPortal.Workspaces.MainContentWorkspace)
{
    btnCancel.Visible = false;
    lnkDeDupResultDetailHelp.Visible = true;
}
else
{
    grpNavDeDupResults.Visible = false;
    lnkDeDupResultDetailHelp.Visible = false;
    
}

// If the record is merged we will hide some UI elements
Sage.Entity.Interfaces.IDeDupResult deDupResult = BindingSource.Current as Sage.Entity.Interfaces.IDeDupResult;
if (!String.IsNullOrEmpty(deDupResult.ResultStatus) && deDupResult.ResultStatus.Equals("Merged"))
{
    grdDupMatches.Columns[0].Visible = false;
    btnNoDuplicate.Visible = false;
}
else
{
    btnNoDuplicate.Visible = true;
}


}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
ClientBindingMgr.RegisterSaveButton(btnNoDuplicate);

ScriptManager.RegisterStartupScript(Page, GetType(), "cleanupcontainer", "jQuery(\".controlslist > div:empty\").remove();", true);
if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
if (dsDupMatches.SourceObject == null) { dsDupMatches.SourceObject = BindingSource.Current; }
if (dsDupMatches.SourceObject == null) { RegisterBindingsWithClient(dsDupMatches); }
dsDupMatches.Bind();

if (dsFilters.SourceObject == null) { dsFilters.SourceObject = BindingSource.Current; }
if (dsFilters.SourceObject == null) { RegisterBindingsWithClient(dsFilters); }
dsFilters.Bind();

ClientBindingMgr.RegisterDialogCancelButton(btnCancel);


}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new DeDupResultDetailAdapter(this)); }
}

public class DeDupResultDetailAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IDeDupResultDetail
{
    public DeDupResultDetailAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.ILinkControl _lnkDeDupJob;
    public  Sage.Platform.Controls.ILinkControl lnkDeDupJob
    {
        get { return FindControl(ref _lnkDeDupJob, "lnkDeDupJob"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtSource;
    public  Sage.Platform.Controls.ITextBoxControl txtSource
    {
        get { return FindControl(ref _txtSource, "txtSource"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtSourceType;
    public  Sage.Platform.Controls.ITextBoxControl txtSourceType
    {
        get { return FindControl(ref _txtSourceType, "txtSourceType"); }
    }
    private Sage.Platform.Controls.IDataGridControl _dgFilters;
    public  Sage.Platform.Controls.IDataGridControl dgFilters
    {
        get { return FindControl(ref _dgFilters, "dgFilters"); }
    }
    private Sage.Platform.Controls.IDataGridControl _grdDupMatches;
    public  Sage.Platform.Controls.IDataGridControl grdDupMatches
    {
        get { return FindControl(ref _grdDupMatches, "grdDupMatches"); }
    }
    private Sage.Platform.Controls.ITextBoxControl _txtStatus;
    public  Sage.Platform.Controls.ITextBoxControl txtStatus
    {
        get { return FindControl(ref _txtStatus, "txtStatus"); }
    }
    private Sage.Platform.Controls.IOwnerControl _ownResolvedBy;
    public  Sage.Platform.Controls.IOwnerControl ownResolvedBy
    {
        get { return FindControl(ref _ownResolvedBy, "ownResolvedBy"); }
    }
    private Sage.Platform.Controls.IDateTimePickerControl _dtpResolvedDate;
    public  Sage.Platform.Controls.IDateTimePickerControl dtpResolvedDate
    {
        get { return FindControl(ref _dtpResolvedDate, "dtpResolvedDate"); }
    }
    private Sage.Platform.Controls.IControlsListControl _ctrlstButtons;
    public  Sage.Platform.Controls.IControlsListControl ctrlstButtons
    {
        get { return FindControl(ref _ctrlstButtons, "ctrlstButtons"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnNoDuplicate;
    public  Sage.Platform.Controls.IButtonControl btnNoDuplicate
    {
        get { return FindControl(ref _btnNoDuplicate, "btnNoDuplicate"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnCancel;
    public  Sage.Platform.Controls.IButtonControl btnCancel
    {
        get { return FindControl(ref _btnCancel, "btnCancel"); }
    }
    private Sage.Platform.Controls.IDataSourceControl _dsDupMatches;
    public  Sage.Platform.Controls.IDataSourceControl dsDupMatches
    {
        get { return FindControl(ref _dsDupMatches, "dsDupMatches"); }
    }
    private Sage.Platform.Controls.IDataSourceControl _dsFilters;
    public  Sage.Platform.Controls.IDataSourceControl dsFilters
    {
        get { return FindControl(ref _dsFilters, "dsFilters"); }
    }
    private Sage.Platform.Controls.IGroupNavigatorControl _grpNavDeDupResults;
    public  Sage.Platform.Controls.IGroupNavigatorControl grpNavDeDupResults
    {
        get { return FindControl(ref _grpNavDeDupResults, "grpNavDeDupResults"); }
    }

}

</script>

<script type="text/javascript">
</script>
