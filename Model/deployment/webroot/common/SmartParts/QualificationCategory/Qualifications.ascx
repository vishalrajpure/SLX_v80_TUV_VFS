<%@ Control Language="C#" ClassName="Qualifications" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="grdQualifications" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="20" OnPageIndexChanging="grdQualificationspage_changing" EmptyTableRowText="<%$ resources: grdQualifications.EmptyTableRowText %>"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="grdQualifications_RowCommand"
 DataKeyNames="InstanceId,Id"
 AllowSorting="true" OnSorting="grdQualifications_Sorting"  OnRowEditing="grdQualifications_RowEditing"  OnRowDeleting="grdQualifications_RowDeleting" OnRowDataBound="grdQualifications_RowDataBound" >
<Columns>
   <asp:CheckBoxField DataField="Visible" ReadOnly="True"
      HeaderText="<%$ resources: grdQualifications.eff22f22-906e-42e5-8412-4fb5b0495c33.ColumnHeading %>"        >
          </asp:CheckBoxField>
    <asp:BoundField DataField="SortPosition"
      HeaderText="<%$ resources: grdQualifications.44f24285-2f0f-473e-924f-878aa0a5f963.ColumnHeading %>"       SortExpression="SortPosition"    >
      </asp:BoundField>
    <asp:BoundField DataField="Description"
      HeaderText="<%$ resources: grdQualifications.74252684-d5dd-4e11-8e60-7893d5da4c75.ColumnHeading %>"          >
      </asp:BoundField>
    <asp:CheckBoxField DataField="ShowNotes" ReadOnly="True"
      HeaderText="<%$ resources: grdQualifications.3164c29c-094b-4b00-b5c2-3339b40a32e5.ColumnHeading %>"        >
          </asp:CheckBoxField>
  <asp:ButtonField CommandName="Edit"
  Text="<%$ resources: grdQualifications.1ab88551-2063-470e-b81e-8a684983ce12.Text %>"               >
          </asp:ButtonField>
     <asp:ButtonField CommandName="Delete"
  Text="<%$ resources: grdQualifications.775d332e-5718-4821-94c0-fc2835e1d374.Text %>"                >
          </asp:ButtonField>
   </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">

                  private int _grdQualificationsdeleteColumnIndex = -2;
protected int grdQualificationsDeleteColumnIndex
{
    get
    {
        if (_grdQualificationsdeleteColumnIndex == -2)
        {
            int bias = (grdQualifications.ExpandableRows) ? 1 : 0;
            _grdQualificationsdeleteColumnIndex = -1;
            int colcount = 0;
            foreach (DataControlField col in grdQualifications.Columns)
            {
                ButtonField btn = col as ButtonField;
                if (btn != null)
                {
                    if (btn.CommandName == "Delete")
                    {
                        _grdQualificationsdeleteColumnIndex = colcount + bias;
                        break;
                    }
                }
                colcount++;
            }
        }
        return _grdQualificationsdeleteColumnIndex;
    }
}

protected void grdQualifications_RowDataBound(object sender, GridViewRowEventArgs e)
{
    if (e.Row.RowType == DataControlRowType.DataRow)
    {
        if ((grdQualificationsDeleteColumnIndex >= 0) && (grdQualificationsDeleteColumnIndex < e.Row.Cells.Count))
        {
            TableCell cell = e.Row.Cells[grdQualificationsDeleteColumnIndex];
            foreach (Control c in cell.Controls)
            {
                LinkButton btn = c as LinkButton;
                if (btn != null)
                {
                    btn.Attributes.Add("onclick", "javascript: return confirm('" + Sage.Platform.WebPortal.PortalUtil.JavaScriptEncode(GetLocalResourceObject("grdQualifications.775d332e-5718-4821-94c0-fc2835e1d374.ConfirmationMessage").ToString()) + "');");
                    return;
                }
            }
        }
    }
}
   
protected void grdQualificationspage_changing(object sender, GridViewPageEventArgs e)
{
 grdQualifications.PageIndex = e.NewPageIndex;
 grdQualifications.DataBind();
}
protected void grdQualifications_Sorting(object sender, GridViewSortEventArgs e) { }
protected void grdQualifications_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dsQualifications.SelectedIndex = rowIndex;
        object currentEntity = dsQualifications.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
        string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
            if (grdQualifications.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in grdQualifications.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dsQualifications.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
                        currentEntity = dsQualifications.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }
            }
        }
        else
        {
            foreach (DictionaryEntry val in grdQualifications.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }
        if (e.CommandName.Equals("Edit"))
        {
            if (DialogService != null)
            {
                // QFDataGrid
                            DialogService.SetSpecs(300, 500, "AddEditQualification", GetLocalResourceObject("ffcca958-25b8-48e6-908e-a743c599c67b.DialogTitleOverride").ToString() );
                            DialogService.EntityType = typeof(Sage.Entity.Interfaces.IQualification );
                DialogService.EntityID = id;
                DialogService.ShowDialog();
            }
        }
        if (e.CommandName.Equals("Delete"))
        {
            Sage.Entity.Interfaces.IQualificationCategory mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.IQualificationCategory;
            if (mainentity != null)
            {
                Sage.Entity.Interfaces.IQualification childEntity = null;
                if((currentEntity != null) && (currentEntity is Sage.Entity.Interfaces.IQualification))
                {
                    childEntity = (Sage.Entity.Interfaces.IQualification)currentEntity;
                }
                else if (id != null)
                {
                    childEntity = Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IQualification>(id);
            }
                if(childEntity != null)
                {
                     mainentity.Qualifications.Remove(childEntity);

                     if((childEntity.PersistentState & Sage.Platform.Orm.Interfaces.PersistentState.New) <= 0)
                     {
                         childEntity.Delete();
                     }
                     dsQualifications.SelectedIndex = -1;
                }
            }
        }
    }
    grdQualifications_refresh();
}
    protected void grdQualifications_refresh()
    {
        if (PageWorkItem != null) {
            Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
            if (refresher != null)
            {
                refresher.RefreshAll();
            }
            else
            {
                Response.Redirect(Request.Url.ToString());
            }
        }
    }

        protected void grdQualifications_RowEditing(object sender, GridViewEditEventArgs e)
    {
        grdQualifications.SelectedIndex = e.NewEditIndex;
        e.Cancel = true;
    }
            protected void grdQualifications_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        grdQualifications.SelectedIndex = -1;
    }
    </script>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="Qualifications_RTools" ToolbarLocation="right">
    <asp:ImageButton runat="server" ID="btnAdd"
 ToolTip="<%$ resources: btnAdd.ToolTip %>" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=plus_16x16"  />
 
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=Qualifications&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkQualificationsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="Qualifications" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IQualificationCategory); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dsQualifications;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dsQualifications
{ 
  get 
  {
    if (_dsQualifications == null)
    {
             _dsQualifications = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IQualification), 
	    EntityType              ,"Qualifications", System.Reflection.MemberTypes.Property);
                   _dsQualifications.UseSmartQuery = true;
      	   	}
 	return _dsQualifications;
  }
}

void dsQualifications_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dsQualifications.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dsQualifications);
   }
}

 



 

protected override void OnAddEntityBindings() {
       dsQualifications.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("Qualifications", grdQualifications ));
   dsQualifications.BindFieldNames = new String[] { "Id","Visible","SortPosition","Description","ShowNotes" };
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dsQualifications_OnCurrentEntitySet);
    
    }
       
protected void btnAdd_ClickAction(object sender, EventArgs e) {
	
Sage.Entity.Interfaces.IQualificationCategory mainentity = this.BindingSource.Current as Sage.Entity.Interfaces.IQualificationCategory;
if (mainentity != null)
{
    if (mainentity.Qualifications.Count >= 8)
    {
        DialogService.ShowMessage(GetLocalResourceObject("warning_toomanyitems").ToString());
    }
	else
	{
		DialogService.SetSpecs(240, 500, "AddEditQualification", GetLocalResourceObject("2f32efe7-5522-49ff-b133-3cc0289a5db0.DialogTitleOverride").ToString() );
		DialogService.DialogParameters.Add("QualificationCategory", mainentity);
		DialogService.EntityType = typeof(Sage.Entity.Interfaces.IQualification); 
		DialogService.ShowDialog();
	}
}

}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 btnAdd.Click += new ImageClickEventHandler(btnAdd_ClickAction);


}

protected void quickformload0(object sender, EventArgs e) {
grdQualifications.Sort("SortPosition", SortDirection.Ascending);



}
private bool _runActivating;
protected override void OnActivating()
{
_runActivating = true;
}
private void DoActivating()
{
quickformload0(this, EventArgs.Empty);

}
protected override void OnFormBound()
{
Sage.Platform.WebPortal.EntityPage epage = Page as Sage.Platform.WebPortal.EntityPage;
        if (epage != null)
            _runActivating = (epage.IsNewEntity || _runActivating);
if (_runActivating) DoActivating();
if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
if (dsQualifications.SourceObject == null) { dsQualifications.SourceObject = BindingSource.Current; }
if (dsQualifications.SourceObject == null) { RegisterBindingsWithClient(dsQualifications); }
dsQualifications.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new QualificationsAdapter(this)); }
}

public class QualificationsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IQualifications
{
    public QualificationsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.IDataGridControl _grdQualifications;
    public  Sage.Platform.Controls.IDataGridControl grdQualifications
    {
        get { return FindControl(ref _grdQualifications, "grdQualifications"); }
    }
    private Sage.Platform.Controls.IDataSourceControl _dsQualifications;
    public  Sage.Platform.Controls.IDataSourceControl dsQualifications
    {
        get { return FindControl(ref _dsQualifications, "dsQualifications"); }
    }
    private Sage.Platform.Controls.IButtonControl _btnAdd;
    public  Sage.Platform.Controls.IButtonControl btnAdd
    {
        get { return FindControl(ref _btnAdd, "btnAdd"); }
    }

}

</script>

<script type="text/javascript">
</script>
