<%@ Control Language="C#" ClassName="DeDupJobResults" Inherits="Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider" %>
<%@ Register Assembly="Sage.SalesLogix.Client.GroupBuilder" Namespace="Sage.SalesLogix.Client.GroupBuilder" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.PickList" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.DependencyLookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Lookup" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.Web.Controls" Namespace="Sage.SalesLogix.Web.Controls.Timeline" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.SalesLogix.HighLevelTypes" Namespace="Sage.SalesLogix.HighLevelTypes" TagPrefix="SalesLogix" %>
<%@ Register Assembly="Sage.Platform.WebPortal" Namespace="Sage.Platform.WebPortal.SmartParts" TagPrefix="SalesLogix" %>

<%//------------------------------------------------------------------------
//This file was generated by a tool.  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
//------------------------------------------------------------------------ %>
  <SalesLogix:SlxGridView runat="server" ID="dgDeDupResults" GridLines="None"
AutoGenerateColumns="false" CellPadding="4" CssClass="datagrid" PagerStyle-CssClass="gridPager"
AlternatingRowStyle-CssClass="rowdk" RowStyle-CssClass="rowlt" SelectedRowStyle-CssClass="rowSelected" ShowEmptyTable="true" EnableViewState="false"
 AllowPaging="true" PageSize="20" OnPageIndexChanging="dgDeDupResultspage_changing"  ExpandableRows="True" ResizableColumns="True"  OnRowCommand="dgDeDupResults_RowCommand"
 DataKeyNames="InstanceId,Id"
 AllowSorting="true" OnSorting="dgDeDupResults_Sorting"  ShowSortIcon="true" >
<Columns>
 <asp:CommandField ShowSelectButton="true"
  SelectText="<%$ resources: dgDeDupResults.4226ea1a-8d09-4c03-aefa-bc35450748cc.Text %>" ButtonType="link"
             >
          </asp:CommandField>
    <asp:BoundField DataField="SourceEntityDescription"
      HeaderText="<%$ resources: dgDeDupResults.f7e22454-5fcf-4230-a4f2-e2d3e1816316.ColumnHeading %>"       SortExpression="SourceEntityDescription"    >
      </asp:BoundField>
    <asp:BoundField DataField="ResultDescription"
      HeaderText="<%$ resources: dgDeDupResults.1f118b59-59be-4cc5-b34c-3946d6ddfcb3.ColumnHeading %>"       SortExpression="ResultDescription"    >
      </asp:BoundField>
    <asp:BoundField DataField="Score"
      HeaderText="<%$ resources: dgDeDupResults.b6c962ca-ec49-427d-a194-e0848e45e0be.ColumnHeading %>"       SortExpression="Score"    >
      </asp:BoundField>
    <asp:BoundField DataField="ResultEntityDescription"
      HeaderText="<%$ resources: dgDeDupResults.91e08126-1be2-4b58-b29e-2e6f40e87b2b.ColumnHeading %>"       SortExpression="ResultEntityDescription"    >
      </asp:BoundField>
    <asp:BoundField DataField="SourceEntityTypeName"
      HeaderText="<%$ resources: dgDeDupResults.e6216d84-33d1-408d-a79a-d07d84afc2bf.ColumnHeading %>"       SortExpression="SourceEntityTypeName"    >
      </asp:BoundField>
    <asp:BoundField DataField="ResultCount"
      HeaderText="<%$ resources: dgDeDupResults.b5cdbe99-deee-4263-aab6-b5fddd1ee4bb.ColumnHeading %>"       SortExpression="ResultCount"    >
      </asp:BoundField>
 </Columns>
    <PagerSettings Mode="NumericFirstLast" FirstPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=Start_16x16" LastPageImageUrl="ImageResource.axd?scope=global&type=Global_Images&key=End_16x16" />
</SalesLogix:SlxGridView>

<script runat="server" type="text/C#">


protected void dgDeDupResultspage_changing(object sender, GridViewPageEventArgs e)
{
 dgDeDupResults.PageIndex = e.NewPageIndex;
 dgDeDupResults.DataBind();
}
protected void dgDeDupResults_Sorting(object sender, GridViewSortEventArgs e) { }
protected void dgDeDupResults_RowCommand(object sender, GridViewCommandEventArgs e)
{
    if (e.CommandName == "Page")
        return;
    int rowIndex;
    if (Int32.TryParse(e.CommandArgument.ToString(), out rowIndex))
    {
        dsDeDupResults.SelectedIndex = rowIndex;
        object currentEntity = dsDeDupResults.Current;
        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
        string id = String.Empty;
        //Check if this is an unpersisted entity and use its InstanceId
        if (Sage.Platform.WebPortal.PortalUtil.ObjectIsNewEntity(currentEntity))
        {
            if (dgDeDupResults.DataKeys[0].Values.Count > 1) {
                foreach (DictionaryEntry val in dgDeDupResults.DataKeys[rowIndex].Values)
                {
                    if (val.Key.ToString() == "InstanceId")
                    {
                        Guid instanceId = (Guid)val.Value;
                        dsDeDupResults.SetCurrentEntityByInstanceId(instanceId);
                        id = instanceId.ToString();
                        currentEntity = dsDeDupResults.Current;
                        if ((currentEntity is Sage.Platform.ComponentModel.ComponentView) && !((Sage.Platform.ComponentModel.ComponentView)currentEntity).IsVirtualComponent)
                            currentEntity = ((Sage.Platform.ComponentModel.ComponentView)currentEntity).Component;
                    }
                }
            }
        }
        else
        {
            foreach (DictionaryEntry val in dgDeDupResults.DataKeys[rowIndex].Values)
            {
                if (val.Key.ToString() != "InstanceId")
                {
                    id = val.Value.ToString();
                }
            }
        }
    }
    dgDeDupResults_refresh();
}
    protected void dgDeDupResults_refresh()
    {
        if (PageWorkItem != null) {
            Sage.Platform.WebPortal.Services.IPanelRefreshService refresher = PageWorkItem.Services.Get<Sage.Platform.WebPortal.Services.IPanelRefreshService>();
            if (refresher != null)
            {
                refresher.RefreshAll();
            }
            else
            {
                Response.Redirect(Request.Url.ToString());
            }
        }
    }

        </script>
 


 <SalesLogix:SmartPartToolsContainer runat="server" ID="DeDupJobResults_RTools" ToolbarLocation="right">
  <SalesLogix:PageLink ID="btnEditForm" CssClass="adminEditFormButton" runat="server" LinkType="RelativePath" ToolTip="<%$ resources: Portal, EditForm_ToolTip %>" NavigateUrl="~/FormManager.aspx?entityid=DeDupJobResults&modeid=Detail" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=form_manager_16x16"></SalesLogix:PageLink>
 
 
 
 
 <SalesLogix:PageLink ID="lnkDeDupJobResultsHelp" runat="server" LinkType="HelpFileName" ToolTip="<%$ resources: Portal, Help_ToolTip %>" Target="MCWebHelp" NavigateUrl="DeDupJobResults" ImageUrl="~/ImageResource.axd?scope=global&type=Global_Images&key=Help_16x16"></SalesLogix:PageLink>
 </SalesLogix:SmartPartToolsContainer>



<script runat="server" type="text/C#">
/// <summary>
/// Gets or sets the role security service.
/// </summary>
/// <value>The role security service.</value>
[Sage.Platform.Application.ServiceDependency]
public Sage.Platform.Security.IRoleSecurityService RoleSecurityService { get; set; }

public override Type EntityType
{
    get { return typeof(Sage.Entity.Interfaces.IDeDupJob); }
}

 private Sage.Platform.WebPortal.Binding.WebEntityListBindingSource _dsDeDupResults;
public Sage.Platform.WebPortal.Binding.WebEntityListBindingSource dsDeDupResults
{ 
  get 
  {
    if (_dsDeDupResults == null)
    {
             _dsDeDupResults = new Sage.Platform.WebPortal.Binding.WebEntityListBindingSource(typeof(Sage.Entity.Interfaces.IDeDupResult), 
	    EntityType              ,"DeDupResults", System.Reflection.MemberTypes.Property);
            	   	}
 	return _dsDeDupResults;
  }
}

void dsDeDupResults_OnCurrentEntitySet(object sender, EventArgs e) 
{
      if (Visible)
    { 
		if(BindingSource.Current != null)
		{
		
      
        dsDeDupResults.SourceObject = BindingSource.Current;
   		}
    }
   if (Visible)
   {   
      RegisterBindingsWithClient(dsDeDupResults);
   }
}

 



 

protected override void OnAddEntityBindings() {
       dsDeDupResults.Bindings.Add(new Sage.Platform.WebPortal.Binding.WebEntityListBinding("DeDupResults", dgDeDupResults ));
   dsDeDupResults.BindFieldNames = new String[] { "Id","SourceEntityDescription","ResultDescription","Score","ResultEntityDescription","SourceEntityTypeName","ResultCount" };
     
     BindingSource.OnCurrentEntitySet += new EventHandler(dsDeDupResults_OnCurrentEntitySet);
    
}
       
protected void dgDeDupResults_RowSelectedAction(object sender, EventArgs e) {
  if (DialogService != null)
        {

            string deDupResultId = dgDeDupResults.DataKeys[dgDeDupResults.SelectedIndex].Values[1].ToString();

            Sage.Entity.Interfaces.IDeDupResult deDupResult =
                Sage.Platform.EntityFactory.GetById<Sage.Entity.Interfaces.IDeDupResult>(deDupResultId);


            System.Reflection.Assembly assem = System.Reflection.Assembly.GetAssembly(typeof(Sage.Entity.Interfaces.IAccount));
            string typeName = deDupResult.SourceEntityType.Split(new char[] { ',' })[0];
            Type mergeType = assem.GetType(typeName);
            if (mergeType != null) 
            {

                object sourceEntity = Sage.Platform.EntityFactory.GetById(mergeType, deDupResult.SourceEntityId);
                object destEntity = Sage.Platform.EntityFactory.GetById(mergeType, deDupResult.ResultEntityId);

                if (sourceEntity == null || destEntity == null)
                {
                    throw new Sage.Platform.Application.ValidationException(GetLocalResourceObject("error_SourceDestUnavaliable").ToString());
                }
            }
                        
            if (deDupResult != null)
            {

                if (deDupResult.ResultStatus.Equals("Merged"))
                {
                    throw new Sage.Platform.Application.ValidationException(GetLocalResourceObject("error_JobResultResolved").ToString());
                }

                DialogService.SetSpecs(750, 900, "DeDupResultDetail", GetLocalResourceObject("ResultDetail_DialogCaption").ToString());
                DialogService.EntityType = typeof(Sage.Entity.Interfaces.IDeDupResult);
                DialogService.EntityID = deDupResultId;
                DialogService.ShowDialog();
            }
            else
            {
                throw new Sage.Platform.Application.ValidationException(GetLocalResourceObject("error_RecordNotFound").ToString());
            }
        }


}

protected override void OnWireEventHandlers()
{
 base.OnWireEventHandlers();
 dgDeDupResults.SelectedIndexChanged += new EventHandler(dgDeDupResults_RowSelectedAction);


}

protected override void OnFormBound()
{
if (!RoleSecurityService.HasAccess("Administration/Forms/View"))
{
btnEditForm.Visible = false;
}
if (dsDeDupResults.SourceObject == null) { dsDeDupResults.SourceObject = BindingSource.Current; }
if (dsDeDupResults.SourceObject == null) { RegisterBindingsWithClient(dsDeDupResults); }
dsDeDupResults.Bind();



}



public override Sage.Platform.Application.UI.ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
{
    ToolsSmartPartInfo tinfo = new ToolsSmartPartInfo();
        if (BindingSource != null)
    {
        if (BindingSource.Current != null)
        {
            tinfo.Description = BindingSource.Current.ToString();
            tinfo.Title = BindingSource.Current.ToString();
        }
    }
    
    foreach (Control c in Controls)
    {
        SmartPartToolsContainer cont = c as SmartPartToolsContainer;
        if (cont != null)
        {
            switch (cont.ToolbarLocation)
            {
                case SmartPartToolsLocation.Right:
                    foreach (Control tool in cont.Controls)
                    {
                                            tinfo.RightTools.Add(tool);
                                        }
                    break;
                case SmartPartToolsLocation.Center:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.CenterTools.Add(tool);
                    }
                    break;
                case SmartPartToolsLocation.Left:
                    foreach (Control tool in cont.Controls)
                    {
                        tinfo.LeftTools.Add(tool);
                    }
                    break;
            }
        }
    }

        return tinfo;
}

private Sage.Platform.Controls.IEntityForm _formAdapter;

public Sage.Platform.Controls.IEntityForm FormAdapter
{
    get { return _formAdapter ?? (_formAdapter = new DeDupJobResultsAdapter(this)); }
}

public class DeDupJobResultsAdapter : Sage.Platform.WebPortal.Adapters.EntityFormAdapter, Sage.Form.Interfaces.IDeDupJobResults
{
    public DeDupJobResultsAdapter(Sage.Platform.WebPortal.SmartParts.EntityBoundSmartPartInfoProvider smartPart)
        : base(smartPart) {}

    private Sage.Platform.Controls.IDataGridControl _dgDeDupResults;
    public  Sage.Platform.Controls.IDataGridControl dgDeDupResults
    {
        get { return FindControl(ref _dgDeDupResults, "dgDeDupResults"); }
    }
    private Sage.Platform.Controls.IDataSourceControl _dsDeDupResults;
    public  Sage.Platform.Controls.IDataSourceControl dsDeDupResults
    {
        get { return FindControl(ref _dsDeDupResults, "dsDeDupResults"); }
    }

}

</script>

<script type="text/javascript">
</script>
